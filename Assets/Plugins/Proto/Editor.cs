// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: editor.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Pbe {

  /// <summary>Holder for reflection information generated from editor.proto</summary>
  public static partial class EditorReflection {

    #region Descriptor
    /// <summary>File descriptor for editor.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EditorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxlZGl0b3IucHJvdG8SA3BiZSJCCgdSZXNJdGVtEg0KBUdyb3VwGAEgASgF",
            "EhoKBFR5cGUYAiABKA4yDC5wYmUuUmVzVHlwZRIMCgRQYXRoGAMgASgJIk8K",
            "EVJlc0dwdVNraW5VcmxJbmZvEhAKCHNraW5OYW1lGAEgASgJEhIKCm1hdHJp",
            "eE5hbWUYAiABKAkSFAoMY2xpcE5hbWVMaXN0GAMgAygJIocDCgxFZGl0b3JD",
            "b25maWcSJAoKU2VjdGlvbkxzdBgBIAMoCzIQLnBiZS5TZWN0aW9uRGF0YRIq",
            "CgxDaGFyYWN0ZXJMc3QYAiADKAsyFC5wYmUuQ2hhcmFjdGVyQ29uZmlnEh4K",
            "B1Jvb21Mc3QYAyADKAsyDS5wYmUuUm9vbURhdGESOgoURWZmZWN0U3RhdGVQ",
            "cmVmYWJMc3QYBCADKAsyHC5wYmUuRWZmZWN0U3RhdGVQcmVmYWJDb25maWcS",
            "NAoPQ2FtZXJhRm9sbG93THN0GAUgAygLMhsucGJlLkNhbWVyYUZvbGxvd0l0",
            "ZW1Db25maWcSIgoIU2tpbGxMc3QYBiADKAsyEC5wYmUuU2tpbGxDb25maWcS",
            "NAoRU2tpbGxFeHRlbnNpb25Mc3QYTiADKAsyGS5wYmUuU2tpbGxFeHRlbnNp",
            "b25Db25maWcSDwoHVmVyc2lvbhgHIAEoBRIoCgxSb29tU2NlbmVMc3QYCCAD",
            "KAsyEi5wYmUuUm9vbVNjZW5lRGF0YSL3AgoLU2VjdGlvbkRhdGESEQoJU2Vj",
            "dGlvbklEGAEgASgFEhMKC1N0YXJ0Um9vbUlkGAIgASgFEg0KBVhTaXplGAMg",
            "ASgFEg0KBVlTaXplGAQgASgFEh0KB1ZNaW5NYXAYBSADKAsyDC5wYmUuTWlu",
            "aU1hcBILCgNLZXkYBiABKAUSGAoQTm9ybWFsSW50cm9CZ21JRBgHIAEoBRIW",
            "Cg5Cb3NzSW50cm9CZ21JRBgIIAEoBRIXCg9BYnlzc0ludHJvQmdtSUQYCSAB",
            "KAUSFwoPTm9ybWFsTG9vcEJnbUlEGAogASgFEhUKDUJvc3NMb29wQmdtSUQY",
            "CyABKAUSFgoOQWJ5c3NMb29wQmdtSUQYDCABKAUSGAoQTm9ybWFsT3V0cm9C",
            "Z21JRBgNIAEoBRIWCg5Cb3NzT3V0cm9CZ21JRBgOIAEoBRIXCg9BYnlzc091",
            "dHJvQmdtSUQYDyABKAUSGAoQQWZ0ZXJSZXN1bHRCZ21JRBgQIAEoBSJVChRT",
            "a2lsbEV4dGVuc2lvbkNvbmZpZxILCgNLZXkYASABKAUSDwoHSGVyb0lEcxgC",
            "IAMoBRIOCgZTa2lsbHMYAyADKAUSDwoHV2VhcG9ucxgEIAMoBSJ5CgdNaW5p",
            "TWFwEgwKBFhQb3MYASABKAUSDAoEWVBvcxgCIAEoBRIOCgZSb29tSUQYAyAB",
            "KAUSHwoIUm9vbVR5cGUYBCABKA4yDS5wYmUuUm9vbVR5cGUSDQoFVFBMc3QY",
            "BSADKAgSEgoKUm9vbU9mZnNldBgGIAEoAiLdBwoIUm9vbURhdGESEQoJU2Nl",
            "bmVOYW1lGAEgASgJEg4KBlJvb21JRBgCIAEoBRISCgpCYXR0bGVNb2RlGAMg",
            "ASgFEicKC0Nhbk1vdmVBcmVhGAQgASgLMhIucGJlLlNjZW5lQXJlYVJlY3QS",
            "MQoPVlBsYXllckJpcnRoUG9zGAUgAygLMhgucGJlLlBsYXllckJpcnRoUG9z",
            "aXRpb24SIAoIVkVuZW1pZXMYBiADKAsyDi5wYmUuQ2VsbEVuZW15EhsKBVZO",
            "cGNzGAcgAygLMgwucGJlLkNlbGxOUEMSLAoNVkRlc3RydWN0aWJsZRgIIAMo",
            "CzIVLnBiZS5DZWxsRGVzdHJ1Y3RpYmxlEiwKDVZUcmFuc2ZlckRvb3IYCSAD",
            "KAsyFS5wYmUuQ2VsbFRyYW5zZmVyRG9vchIjCglWVHJpZ2dlcnMYCiADKAsy",
            "EC5wYmUuQ2VsbFRyaWdnZXISMAoRVlRlcnJhaW5EZWNvcmF0b3IYCyADKAsy",
            "FS5wYmUuVGVycmFpbkRlY29yYXRvchIoCg1WTWFwRGVjb3JhdG9yGAwgAygL",
            "MhEucGJlLk1hcERlY29yYXRvchIVCg1WVGVycmFpbkluZGV4GA0gAygFEgsK",
            "A0tleRgOIAEoBRIPCgdTb3VuZElEGA8gASgFEhkKEVNvdW5kSW50ZXJ2YWxU",
            "aW1lGBAgASgCEhwKFFNvdW5kUGxheVByb2JhYmlsaXR5GBEgASgFEi8KDkNh",
            "bWVyYWJvdW5kYXJ5GBIgASgLMhcucGJlLkNhbWVyYWJvdW5kYXJ5UmVjdBIS",
            "CgpSb29tTWF4VUlEGBMgASgFEjkKFFZDcmVhdGVNb25zdGVyUG9pbnRzGBQg",
            "AygLMhsucGJlLkNlbGxDcmVhdGVNb25zdGVyUG9pbnQSRQoaVkNyZWF0ZVJh",
            "bmRvbU1vbnN0ZXJQb2ludHMYFSADKAsyIS5wYmUuQ2VsbENyZWF0ZVJhbmRv",
            "bU1vbnN0ZXJQb2ludBIOCgZSb29tQUkYFiABKAUSKQoMVkFieXNzUG9pbnRz",
            "GBcgAygLMhMucGJlLkNlbGxBYnlzc1BvaW50Ek0KHlZBYnlzc0NyZWF0ZU1v",
            "bnN0ZXJHcm91cFBvaW50cxgYIAMoCzIlLnBiZS5DZWxsQWJ5c3NDcmVhdGVN",
            "b25zdGVyR3JvdXBQb2ludBIUCgxWVGVycmFpblR5cGUYGSADKAUSFQoNQ2Ft",
            "ZXJhT2Zmc2V0WBgaIAEoAhIVCg1DYW1lcmFPZmZzZXRaGBsgASgCEh8KF0xh",
            "eWVyQW5pbWF0aW9uU3BlZWRMaXN0GBwgAygCIoIBCg1Sb29tU2NlbmVEYXRh",
            "Eg4KBlJvb21JRBgBIAEoBRIqCg5WTWFwRGVjb3JhdG9ycxgCIAMoCzISLnBi",
            "ZS5NYXBEZWNvcmF0b3JzEigKDFZNYXBFbGVtZW50cxgDIAMoCzISLnBiZS5N",
            "YXBEZWNvcmF0b3JzEgsKA0tleRgEIAEoBSJXCg1TY2VuZUFyZWFSZWN0EhAK",
            "CFhTaXplTWluGAEgASgCEhAKCFhTaXplTWF4GAIgASgCEhAKCFlTaXplTWlu",
            "GAMgASgCEhAKCFlTaXplTWF4GAQgASgCIlwKEkNhbWVyYWJvdW5kYXJ5UmVj",
            "dBIQCghYU2l6ZU1pbhgBIAEoAhIQCghYU2l6ZU1heBgCIAEoAhIQCghaU2l6",
            "ZU1pbhgDIAEoAhIQCghaU2l6ZU1heBgEIAEoAiKsAQoTUGxheWVyQmlydGhQ",
            "b3NpdGlvbhIOCgZTZWF0SUQYASABKAUSDgoGVGVhbUlEGAIgASgFEhEKCVBv",
            "c2l0aW9uWBgDIAEoAhIRCglQb3NpdGlvblkYBCABKAISEQoJUG9zaXRpb25a",
            "GAUgASgCEg4KBlNjYWxlWBgGIAEoAhIOCgZTY2FsZVkYByABKAISDgoGU2Nh",
            "bGVaGAggASgCEgwKBEZhY2UYCSABKAUiSQoQVGVycmFpbkRlY29yYXRvchIP",
            "CgdSZXNOYW1lGAEgASgJEhEKCVBvc2l0aW9uWBgCIAEoAhIRCglQb3NpdGlv",
            "bloYAyABKAIilgIKDE1hcERlY29yYXRvchIPCgdSZXNOYW1lGAEgASgJEhYK",
            "DkxvY2FsUG9zaXRpb25YGAIgASgCEhYKDkxvY2FsUG9zaXRpb25ZGAMgASgC",
            "EhIKClNjZW5lTGF5ZXIYBCABKAUSEgoKTGF5ZXJPcmRlchgFIAEoBRIWCg5M",
            "b2NhbFBvc2l0aW9uWhgGIAEoAhITCgtMb2NhbFNjYWxlWBgHIAEoAhITCgtM",
            "b2NhbFNjYWxlWRgIIAEoAhITCgtMb2NhbFNjYWxlWhgJIAEoAhIWCg5Mb2Nh",
            "bFJvdGF0aW9uWBgKIAEoAhIWCg5Mb2NhbFJvdGF0aW9uWRgLIAEoAhIWCg5M",
            "b2NhbFJvdGF0aW9uWhgMIAEoAiKZAwoNTWFwRGVjb3JhdG9ycxIPCgdSZXNO",
            "YW1lGAEgASgJEhYKDkxvY2FsUG9zaXRpb25YGAIgASgCEhYKDkxvY2FsUG9z",
            "aXRpb25ZGAMgASgCEhYKDkxvY2FsUG9zaXRpb25aGAQgASgCEhIKCkxheWVy",
            "T3JkZXIYBSABKAUSEwoLTG9jYWxTY2FsZVgYBiABKAISEwoLTG9jYWxTY2Fs",
            "ZVkYByABKAISEwoLTG9jYWxTY2FsZVoYCCABKAISEwoLTG9jYWxFdWxlclgY",
            "CSABKAISEwoLTG9jYWxFdWxlclkYCiABKAISEwoLTG9jYWxFdWxlcloYCyAB",
            "KAISFQoNQmFsYW5jZVZhbHVlWBgMIAEoAhIVCg1CYWxhbmNlVmFsdWVZGA0g",
            "ASgCEhUKDUJhbGFuY2VWYWx1ZVoYDiABKAISCwoDSHVlGA8gASgCEhIKClNh",
            "dHVyYXRpb24YECABKAISEQoJSW50ZW5zaXR5GBEgASgCEhIKCkJyaWdodG5l",
            "c3MYEiABKAISEAoIQ29udHJhc3QYEyABKAIiYwoWQ2VsbENyZWF0ZU1vbnN0",
            "ZXJQb2ludBIQCghVbmlxdWVJRBgBIAEoBRIeCgZWRW5lbXkYAiABKAsyDi5w",
            "YmUuQ2VsbEVuZW15EhcKD1NlY3Rpb25VbmlxdWVJRBgDIAEoBSJ1ChxDZWxs",
            "Q3JlYXRlUmFuZG9tTW9uc3RlclBvaW50EhAKCFVuaXF1ZUlEGAEgASgFEioK",
            "DFZSYW5kb21FbmVteRgCIAMoCzIULnBiZS5DZWxsUmFuZG9tRW5lbXkSFwoP",
            "U2VjdGlvblVuaXF1ZUlEGAMgASgFIkEKD0NlbGxSYW5kb21FbmVteRIOCgZX",
            "ZWlnaHQYASABKAUSHgoGVkVuZW15GAIgASgLMg4ucGJlLkNlbGxFbmVteSLd",
            "AQoOQ2VsbEFieXNzUG9pbnQSEAoIVW5pcXVlSUQYASABKAUSEQoJUG9zaXRp",
            "b25YGAIgASgCEhEKCVBvc2l0aW9uWhgDIAEoAhIXCg9TZWN0aW9uVW5pcXVl",
            "SUQYBCABKAUSHQoVRmlyc3RXYXZlTW9uc3RlckxldmVsGAUgASgFEhwKFEZp",
            "cnN0V2F2ZU1vbnN0ZXJUZWFtGAYgASgFEh4KFlNlY29uZFdhdmVNb25zdGVy",
            "TGV2ZWwYByABKAUSHQoVU2Vjb25kV2F2ZU1vbnN0ZXJUZWFtGAggASgFIqsB",
            "CiBDZWxsQWJ5c3NDcmVhdGVNb25zdGVyR3JvdXBQb2ludBIQCghVbmlxdWVJ",
            "RBgBIAEoBRIRCglQb3NpdGlvblgYAiABKAISEQoJUG9zaXRpb25aGAMgASgC",
            "EhkKEU1vbnN0ZXJHcm91cExldmVsGAQgASgFEhsKE01vbnN0ZXJHcm91cFBv",
            "aW50SUQYBSABKAUSFwoPU2VjdGlvblVuaXF1ZUlEGAYgASgFIuUBCglDZWxs",
            "RW5lbXkSEAoIVW5pcXVlSUQYASABKAUSEQoJTW9uc3RlcklEGAIgASgFEg8K",
            "B0FrYU5hbWUYAyABKAkSDQoFTGV2ZWwYBCABKAUSEQoJRGlyZWN0aW9uGAUg",
            "ASgFEhEKCVBvc2l0aW9uWBgGIAEoAhIRCglQb3NpdGlvbloYByABKAISDwoH",
            "R3JvdXBJRBgIIAEoBRIPCgdTdG9yeUlEGAkgASgFEhcKD1NlY3Rpb25Vbmlx",
            "dWVJRBgKIAEoBRIOCgZUZWFtSUQYCyABKAUSDwoHQUlTaWdodBgMIAEoBSKV",
            "AQoHQ2VsbE5QQxIQCghVbmlxdWVJRBgBIAEoBRINCgVOUENJRBgCIAEoBRIP",
            "CgdBa2FOYW1lGAMgASgJEhEKCURpcmVjdGlvbhgEIAEoBRIRCglQb3NpdGlv",
            "blgYBSABKAISEQoJUG9zaXRpb25aGAYgASgCEg8KB1N0b3J5SUQYByABKAUS",
            "DgoGVGVhbUlEGAggASgFIv8BChBDZWxsRGVzdHJ1Y3RpYmxlEhAKCFVuaXF1",
            "ZUlEGAEgASgFEhYKDkRlc3RydWN0aWJsZUlEGAIgASgFEg8KB0FrYU5hbWUY",
            "BCABKAkSEQoJUG9zaXRpb25YGAUgASgCEhEKCVBvc2l0aW9uWhgGIAEoAhIR",
            "CglHcmlkV2lkdGgYByABKAUSEgoKR3JpZEhlaWdodBgIIAEoBRIUCgxUZXJy",
            "YWluSW5kZXgYCSADKAUSDwoHU3RhdGVJZBgKIAEoBRIOCgZUZWFtSUQYCyAB",
            "KAUSFwoPU2VjdGlvblVuaXF1ZUlEGAwgASgFEhMKC1RlcnJhaW5UeXBlGA0g",
            "AygFIpMDChBDZWxsVHJhbnNmZXJEb29yEhAKCFVuaXF1ZUlEGAEgASgFEhgK",
            "EFRyYW5zZmVyRG9vck5hbWUYAiABKAkSDQoFUmVzSUQYAyABKAUSDwoHQWth",
            "TmFtZRgEIAEoCRITCgtUb3VjaFJhbmdlWBgFIAEoAhITCgtUb3VjaFJhbmdl",
            "WhgGIAEoAhIRCglQb3NpdGlvblgYByABKAISEQoJUG9zaXRpb25aGAggASgC",
            "EhcKD1Bvc2l0aW9uWE9mZnNldBgJIAEoAhIXCg9Qb3NpdGlvblpPZmZzZXQY",
            "CiABKAISHAoUVHJhbnNmZXJQb2ludFhPZmZzZXQYCyABKAISHAoUVHJhbnNm",
            "ZXJQb2ludFpPZmZzZXQYDCABKAISLQoJRGlyZWN0aW9uGA0gASgOMhoucGJl",
            "LkVudW1UcmFuc2ZlckRpcmVjdGlvbhIPCgdTdGF0ZUlkGA4gASgFEg4KBlRl",
            "YW1JRBgPIAEoBRIXCg9TZWN0aW9uVW5pcXVlSUQYECABKAUSDAoERmFjZRgR",
            "IAEoBSKdAQoLQ2VsbFRyaWdnZXISLAoLVHJpZ2dlckJhc2UYASABKAsyFy5w",
            "YmUuVHJpZ2dlckJhc2VEYXRhQ2ZnEjIKEFRyaWdnZXJDb25kaXRpb24YAiAB",
            "KAsyGC5wYmUuVHJpZ2dlckNvbmRpdGlvbkNmZxIsCg1UcmlnZ2VyUmVzdWx0",
            "GAMgASgLMhUucGJlLlRyaWdnZXJSZXN1bHRDZmcioQEKElRyaWdnZXJCYXNl",
            "RGF0YUNmZxIQCghVbmlxdWVJRBgBIAEoBRIxCg9CZVRyaWdnZXJlZFR5cGUY",
            "AiABKA4yGC5wYmUuQ2VsbEJlVHJpZ2dlcmVkVHlwZRIXCg9NYXhUcmlnZ2Vy",
            "Q291bnQYAyABKAUSFgoOTmV4dFRyaWdnZXJJRHMYBCADKAUSFQoNSW50ZXJ2",
            "YWxGcmFtZRgFIAEoBSLbAQoTVHJpZ2dlckNvbmRpdGlvbkNmZxIwCg1Db25k",
            "aXRpb25UeXBlGAEgASgOMhkucGJlLlRyaWdnZXJDb25kaXRpb25UeXBlEjQK",
            "CkNIUFBlcmNlbnQYAiABKAsyIC5wYmUuVHJpZ2dlckNvbmRpdG9uSFBQZXJj",
            "ZW50Q2ZnEjAKCENUb3VjaGVkGAMgASgLMh4ucGJlLlRyaWdnZXJDb25kaXRv",
            "blRvdWNoZWRDZmcSKgoFQ0RlYWQYBCABKAsyGy5wYmUuVHJpZ2dlckNvbmRp",
            "dG9uRGVhZENmZyLzAgoQVHJpZ2dlclJlc3VsdENmZxIqCgpSZXN1bHRUeXBl",
            "GAEgASgOMhYucGJlLlRyaWdnZXJSZXN1bHRUeXBlEjAKCVJUcmFuc2ZlchgC",
            "IAEoCzIdLnBiZS5UcmlnZ2VyUmVzdWx0VHJhbnNmZXJDZmcSNQoKUk1lY2hh",
            "bmlzbRgDIAEoCzIhLnBiZS5UcmlnZ2VyUmVzdWx0QWN0aXZlTWVjaGFuaXNt",
            "EjcKDlJDaGFuZ2VBYmlsaXR5GAQgASgLMh8ucGJlLlRyaWdnZXJSZXN1bHRD",
            "aGFuZ2VBYmlsaXR5EjMKDFJDaGFuZ2VTa2lsbBgFIAEoCzIdLnBiZS5Ucmln",
            "Z2VyUmVzdWx0Q2hhbmdlU2tpbGwSKAoFUkJ1ZmYYBiABKAsyGS5wYmUuVHJp",
            "Z2dlclJlc3VsdEJ1ZmZDZmcSMgoIUkRlc3Ryb3kYByABKAsyIC5wYmUuVHJp",
            "Z2dlclJlc3VsdERlc3Ryb3lUcmlnZ2VyImUKG1RyaWdnZXJDb25kaXRvbkhQ",
            "UGVyY2VudENmZxIWCg5MaXN0ZW5FbmVteVVJRBgBIAEoBRIbChNMaXN0ZW5F",
            "bmVteUVudGl0eUlEGAIgASgFEhEKCUhwUGVyY2VudBgDIAEoAiK3AgoZVHJp",
            "Z2dlckNvbmRpdG9uVG91Y2hlZENmZxIRCglDaGVja1R5cGUYASABKAUSEwoL",
            "VG91Y2hSYW5nZVgYAiABKAISEwoLVG91Y2hSYW5nZVoYAyABKAISEQoJUG9z",
            "aXRpb25YGAQgASgCEhEKCVBvc2l0aW9uWhgFIAEoAhIRCglUb3VjaFBvc1gY",
            "BiABKAISEQoJVG91Y2hQb3NaGAcgASgCEhkKEVRyYW5zZmVyUG9pbnRQb3NY",
            "GAggASgCEhkKEVRyYW5zZmVyUG9pbnRQb3NaGAkgASgCEhIKClByZWZhYk5h",
            "bWUYCiABKAkSEgoKQ2hlY2tDb3VudBgLIAEoBRINCgVJc1BlchgMIAEoCBIR",
            "CglNb2RlbFR5cGUYDSABKAUSEQoJRGlyZWN0aW9uGA4gASgFIk8KFlRyaWdn",
            "ZXJDb25kaXRvbkRlYWRDZmcSFwoPTGlzdGVuRW5lbXlVSURzGAEgAygFEhwK",
            "FExpc3RlbkVuZW15RW50aXR5SURzGAIgAygFItoBChhUcmlnZ2VyUmVzdWx0",
            "VHJhbnNmZXJDZmcSFAoMVHJhbnNmZXJUeXBlGAEgASgFEhUKDVZUcmFuc2Zl",
            "ckxpc3QYAiADKAUSEQoJUG9zaXRpb25YGAMgASgCEhEKCVBvc2l0aW9uWhgE",
            "IAEoAhIUCgxMaXN0ZW5SYW5nZVgYBSABKAISFAoMTGlzdGVuUmFuZ2VaGAYg",
            "ASgCEg8KB1RQSW5kZXgYByABKAUSFQoNU2hvd0FuaW1hdGlvbhgJIAEoCBIX",
            "Cg9UcmFuc2ZlclRlYW1BbGwYCiABKAgiJgoRVHJpZ2dlclRyaWdnZXJDZmcS",
            "EQoJVlVuaXF1ZUlEGAEgAygFIpgBChRUcmlnZ2VyUmVzdWx0QnVmZkNmZxIO",
            "CgZCdWZmSUQYASABKAUSEgoKVGFyZ2V0VHlwZRgCIAEoBRISCgpWVGFyZ2V0",
            "VUlEGAMgAygFEhIKCkJ1ZmZUZWFtSUQYBCABKAUSEQoJUG9zaXRpb25YGAUg",
            "ASgCEhEKCVBvc2l0aW9uWhgGIAEoAhIOCgZPUFR5cGUYByABKAUiQAobVHJp",
            "Z2dlclJlc3VsdERlc3Ryb3lUcmlnZ2VyEiEKGURlc3Ryb3lUcmlnZ2VyRGVs",
            "YXlTZWNvbmQYASABKAUiRQocVHJpZ2dlclJlc3VsdEFjdGl2ZU1lY2hhbmlz",
            "bRITCgtNZWNoYW5pc21JRBgBIAEoBRIQCghFbnRpdHlJRBgCIAEoBSJQChpU",
            "cmlnZ2VyUmVzdWx0Q2hhbmdlQWJpbGl0eRIXCg9BYmlsaXR5RW51bUxpc3QY",
            "ASADKAUSGQoRQWJpbGl0eUVuYWJsZUxpc3QYAiADKAgiLQoYVHJpZ2dlclJl",
            "c3VsdENoYW5nZVNraWxsEhEKCVNraWxsRW51bRgBIAEoBSLSAQoPQ2hhcmFj",
            "dGVyQ29uZmlnEg4KBkhlcm9JRBgBIAEoBRIoCg5Ta2lsbENvbmZpZ0xzdBgC",
            "IAMoCzIQLnBiZS5Ta2lsbENvbmZpZxIOCgZSYW5nZVgYAyABKAISDgoGUmFu",
            "Z2VaGAQgASgCEhIKClByZWZhYk5hbWUYBSABKAkSCwoDS2V5GAYgASgFEg0K",
            "BVNjYWxlGAcgASgCEiAKClByZWZhYlR5cGUYCCABKA4yDC5wYmUuUmVzVHlw",
            "ZRITCgtXZWFwb25SZXNJRBgJIAEoBSKbCgoLU2tpbGxDb25maWcSDwoHU2tp",
            "bGxJRBgBIAEoBRILCgNLZXkYAiABKAMSEAoIQ2xpcE5hbWUYAyABKAkSFAoM",
            "RGVmYXVsdFNwZWVkGAQgASgCEhIKClRvdGFsRnJhbWUYBSABKAUSKAoOU291",
            "bmRDb25maWdMc3QYBiADKAsyEC5wYmUuU291bmRDb25maWcSKgoPQXR0YWNr",
            "Q29uZmlnTHN0GAcgAygLMhEucGJlLkF0dGFja0NvbmZpZxIhCglEZWZCb3hM",
            "c3QYCCADKAsyDi5wYmUuRGVmQ29uZmlnEioKD0VmZmVjdENvbmZpZ0xzdBgJ",
            "IAMoCzIRLnBiZS5FZmZlY3RDb25maWcSKgoPU2NyZWVuRWZmZWN0THN0GAog",
            "AygLMhEucGJlLlNjcmVlbkVmZmVjdBImCg1Nb3ZlQ29uZmlnTHN0GAsgAygL",
            "Mg8ucGJlLk1vdmVDb25maWcSKAoOQ2hhbmdlU2tpbGxMc3QYDCADKAsyEC5w",
            "YmUuQ2hhbmdlU2tpbGwSEwoLSXNMb29wU2tpbGwYDSABKAgSEAoIRW5kU2tp",
            "bGwYDiABKAUSIQoJUHJlc3NJbmZvGA8gASgLMg4ucGJlLlByZXNzSW5mbxIm",
            "CgpBdHRyYWN0THN0GBAgAygLMhIucGJlLkF0dHJhY3RDb25maWcSJQoNQnVm",
            "ZkNvbmZpZ0xzdBgRIAMoCzIOLnBiZS5GcmFtZUJ1ZmYSJQoITW92ZUluZm8Y",
            "EiABKAsyEy5wYmUuTW92ZUluZm9Db25maWcSJQoIR3JhYkluZm8YEyABKAsy",
            "Ey5wYmUuR3JhYkluZm9Db25maWcSKgoMR3JhYkV2ZW50THN0GBQgAygLMhQu",
            "cGJlLkdyYWJFdmVudENvbmZpZxIqCg9FbnRpdHlDb25maWdMc3QYFSADKAsy",
            "ES5wYmUuRW50aXR5Q29uZmlnEg4KBkhlcm9JRBgWIAMoBRIRCglXZWFwb25U",
            "YWcYFyABKAUSDQoFSXNQdnAYGCABKAgSJAoJV2VhcG9uTHN0GBkgAygLMhEu",
            "cGJlLldlYXBvbkNvbmZpZxIPCgdNdXNpY0lEGBogASgFEjAKD0NhbWVyYUZv",
            "bGxvd0xzdBgbIAMoCzIXLnBiZS5DYW1lcmFGb2xsb3dDb25maWcSLgoOQ2Ft",
            "ZXJhU2hha2VMc3QYHCADKAsyFi5wYmUuQ2FtZXJhU2hha2VDb25maWcSEQoJ",
            "TG9vcENvdW50GB0gASgFEhAKCEVmZmVjdElEGB4gASgFEhYKDkFkZFNwZWVk",
            "TnVtYmVyGB8gASgCEhsKE1RvdGFsQW5pbWF0aW9uRnJhbWUYICABKAUSGwoT",
            "Tm90SW5mbHVlbmNlQnlTcGVlZBghIAEoCBIvChJNZWNoYW5pc21Db25maWdM",
            "c3QYIiADKAsyEy5wYmUuRnJhbWVNZWNoYW5pc20SKQoNU2tpbGxDbGlwTGlz",
            "dBgjIAMoCzISLnBiZS5Ta2lsbENsaXBJbmZvEiIKC0ZyYW1lVGFnTHN0GCQg",
            "AygLMg0ucGJlLkZyYW1lVGFnEjIKEENhbWVyYUNvbnRyb2xMc3QYJSADKAsy",
            "GC5wYmUuQ2FtZXJhQ29udHJvbENvbmZpZxI2ChVTY3JlZW5FZmZlY3RDb25m",
            "aWdMc3QYJiADKAsyFy5wYmUuU2NyZWVuRWZmZWN0Q29uZmlnEiIKCEJsb2Nr",
            "THN0GCcgAygLMhAucGJlLkJsb2NrQ29uZmlnIokCCg1Ta2lsbENsaXBJbmZv",
            "Eg4KBkNsaXBJRBgBIAEoBRIrCgpDaGFuZ2VUeXBlGAIgASgOMhcucGJlLkVu",
            "dW1DbGlwQ2hhbmdlVHlwZRIVCg1Db3N0Q29tYm9CZWFuGAMgASgIEhQKDFRh",
            "cmdldENsaXBJRBgEIAEoBRITCgtDaGFuZ2VGcmFtZRgFIAEoBRIZChFDaGFu",
            "Z2VXaGVuTm9QcmVzcxgGIAEoCBIRCglDaGFuZ2VQcm8YByABKAUSFQoNQ2hh",
            "bmdlV2hlbkhpdBgIIAEoCBIQCghpc0ZpbmlzaBgJIAEoCBIRCglibG9ja1R5",
            "cGUYCiABKAUSDwoHZGlyVHlwZRgLIAEoBSJKCgxFbnRpdHlDb25maWcSCwoD",
            "S2V5GAIgASgFEi0KDkVudGl0eUluZm9MaXN0GAMgAygLMhUucGJlLkVudGl0",
            "eUluZm9Db25maWci9QUKEEVudGl0eUluZm9Db25maWcSDwoHT2Zmc2V0WBgB",
            "IAEoAhIPCgdPZmZzZXRZGAIgASgCEg8KB09mZnNldFoYAyABKAISFAoMRHVy",
            "YXRpb25UaW1lGAQgASgCEhIKCk1vdmVTcGVlZFgYBSABKAISEgoKTW92ZVNw",
            "ZWVkWRgGIAEoAhIRCglBZGRTcGVlZFgYByABKAISEQoJQWRkU3BlZWRZGAgg",
            "ASgCEiYKCVJhbmRDb3VudBgJIAEoCzITLnBiZS5SYW5kU2hvb3RDb3VudBIW",
            "Cg5NYXhBdHRhY2tUaW1lcxgKIAEoBRITCgtNYXhEaXN0YW5jZRgLIAEoAhIY",
            "ChBCdWxsZXRUYXJnZXRUeXBlGAwgASgFEhsKCFJhbmRBcmVhGA0gASgLMgku",
            "cGJlLlZlYzMSEAoIRW5pdGl5SWQYDiABKAUSEQoJU2tpbGxJbmZvGA8gASgF",
            "EhQKDElzSWdub3JlV2FsbBgQIAEoCBIWCg5Jc0NhbWVyYUZvbGxvdxgRIAEo",
            "CBISCgpNb3ZlU3BlZWRaGBIgASgCEhEKCUFkZFNwZWVkWhgTIAEoAhIVCg1O",
            "b3RDaGFuZ2VGYWNlGBQgASgIEhYKDklzRWZmZWN0Um90YXRlGBUgASgIEhEK",
            "CUJhY2tTaG91dBgWIAEoCBIWCg5Jc1NjYWxlSW5oZXJpdBgXIAEoCBIRCglJ",
            "bml0U3RhdGUYGCABKAUSDgoGSXNQb29sGBkgASgIEhEKCUhlaWdodE1pbhga",
            "IAEoAhIRCglIZWlnaHRNYXgYGyABKAISHQoVVG91Y2hHcm91bmREZWxheUZy",
            "YW1lGBwgASgFEhMKC1JhbmdlUmFkaXVzGB0gASgFEhEKCVJhbmdlVHlwZRge",
            "IAEoBRIxChFFbnRpdHlUcmFjZUNvbmZpZxgfIAEoCzIWLnBiZS5FbnRpdHlU",
            "cmFjZUNvbmZpZxInChBFZmZlY3RVbmxvY2tBeGlzGCAgASgLMg0ucGJlLkJv",
            "b2xWZWMzItYCChFFbnRpdHlUcmFjZUNvbmZpZxIRCglUcmFjZVRpbWUYASAB",
            "KAUSFAoMVXBkYXRlTnVtYmVyGAIgASgFEhIKCkFuY2hvclR5cGUYAyABKAUS",
            "HwoMQW5jaG9yT2Zmc2V0GAQgASgLMgkucGJlLlZlYzMSEQoJQ2hlY2tUeXBl",
            "GAUgASgFEhMKC0NoZWNrUmFkaXVzGAYgASgFEhcKD0NoZWNrTWluUmFkaWFu",
            "cxgHIAEoBRIXCg9DaGVja01heFJhZGlhbnMYCCABKAUSEwoLQ2hlY2tIZWln",
            "aHQYCSABKAUSEwoLVHJhY2VUYXJnZXQYCiABKAUSJgoPVHJhY2VVbmxvY2tB",
            "eGlzGAsgASgLMg0ucGJlLkJvb2xWZWMzEhYKDlRyYWNlU3BlZWRUeXBlGAwg",
            "ASgFEh8KDFRhcmdldE9mZnNldBgNIAEoCzIJLnBiZS5WZWMzIjkKDlJhbmRT",
            "aG9vdENvdW50EhQKDFJhbmRDb3VudE1pbhgBIAEoBRIRCglSYW5kQ291bnQY",
            "AiABKAUixgEKCVByZXNzSW5mbxIRCglQcmVzc1R5cGUYASABKAUSJgoOQ2hh",
            "cmdlU2tpbGxDZmcYAyABKAsyDi5wYmUuQ2hhcmdlQ2ZnEicKDE9wZW5Ta2ls",
            "bENmZxgHIAEoCzIRLnBiZS5PcGVuQ2xvc2VDZmcSJAoNU2xpZGVTa2lsbENm",
            "ZxgIIAEoCzINLnBiZS5TbGlkZUNmZxIvChBKb3lzdGlja1NraWxsQ2ZnGAog",
            "ASgLMhUucGJlLkpveXN0aWNrU2tpbGxDZmciMgoNUHJlc3NTa2lsbENmZxIQ",
            "CghEdXJhdGlvbhgBIAEoBRIPCgdTa2lsbElkGAIgASgFInIKFkR1cmF0aW9u",
            "Q2hhbmdlU2tpbGxDZmcSEgoKU2hvcnRGcmFtZRgBIAEoBRIUCgxTaG9ydFNr",
            "aWxsSWQYAiABKAUSFQoNTm90U2hvcnRGcmFtZRgDIAEoBRIXCg9Ob3RTaG9y",
            "dFNraWxsSWQYBCABKAUiigIKCUNoYXJnZUNmZxIVCg1IYXNDYXN0QWN0aW9u",
            "GAEgASgIEhAKCENhc3RUaWNrGAIgASgFEiMKCkNoYXJnZVR5cGUYAyABKA4y",
            "Dy5wYmUuQ2hhcmdlVHlwZRIpCg1QcmVzc1NraWxsQ2ZnGAQgAygLMhIucGJl",
            "LlByZXNzU2tpbGxDZmcSEgoKQ2hhcmdlVGljaxgFIAEoBRIVCg1NYXhDaGFy",
            "Z2VUaWNrGAYgASgFEhUKDUNoYXJnZVNraWxsSWQYByABKAUSFAoMQ2hhcmdl",
            "RWZmZWN0GAggASgFEhIKCkNhc3RFZmZlY3QYCSABKAUSGAoQTmVlZFNob3dD",
            "aGFudEJhchgKIAEoCCJPCg5Ta2lsbExpbWl0SW5mbxIpCglMaW1pdFR5cGUY",
            "ASABKA4yFi5wYmUuQ29uZGl0b25MaW1pdFR5cGUSEgoKTGltaXRWYWx1ZRgC",
            "IAEoBSKEAQoMT3BlbkNsb3NlQ2ZnEhAKCENhc3RUaW1lGAEgASgFEhAKCEF1",
            "dG9PcGVuGAIgASgIEhMKC0hvbGRpbmdUaW1lGAMgASgFEigKC1NraWxsTGlt",
            "aXRzGAQgAygLMhMucGJlLlNraWxsTGltaXRJbmZvEhEKCUJ1ZmZJbmZvcxgF",
            "IAMoBSI6CgtEaXJTa2lsbENmZxIaCgNEaXIYASABKA4yDS5wYmUuU2xpZGVE",
            "aXISDwoHU2tpbGxJZBgCIAEoBSIoCgdJbnRQYWlyEg0KBUZpcnN0GAEgASgF",
            "Eg4KBlNlY29uZBgCIAEoBSL4AgoIU2xpZGVDZmcSDwoHU2hvd1RpcBgBIAEo",
            "CBIPCgdUaXBNb2RlGAIgASgFEiQKDVByZXNzRG93blR5cGUYAyABKA4yDS5w",
            "YmUuU2tpbGxOdW0SEQoJU2tpbGxEb3duGAQgASgFEiYKEFNraWxsRG93bk1h",
            "cHBpbmcYBSADKAsyDC5wYmUuSW50UGFpchIhCgpIb2xkT25UeXBlGAYgASgO",
            "Mg0ucGJlLlNraWxsTnVtEhMKC01heEhvbGRUaW1lGAcgASgFEhEKCVNraWxs",
            "SG9sZBgIIAEoBRIqChBTa2lsbEhvbGRNYXBwaW5nGAkgAygLMhAucGJlLkRp",
            "clNraWxsQ2ZnEiIKC1ByZXNzVXBUeXBlGAogASgOMg0ucGJlLlNraWxsTnVt",
            "Eg8KB1NraWxsVXAYCyABKAUSKAoOU2tpbGxVcE1hcHBpbmcYDCADKAsyEC5w",
            "YmUuRGlyU2tpbGxDZmcSEwoLcmVwZWF0VGltZXMYDSABKAUijwQKEEpveXN0",
            "aWNrU2tpbGxDZmcSEAoIQ2FzdFRpY2sYASABKAUSDgoGWFlNb3ZlGAIgASgI",
            "Eg4KBlhaTW92ZRgDIAEoCBIUCgxSYW5nZU9mZnNldFgYBCABKAISFAoMUmFu",
            "Z2VPZmZzZXRZGAUgASgCEhQKDFJhbmdlT2Zmc2V0WhgGIAEoAhIVCg1DdXJz",
            "b3JPZmZzZXRYGAcgASgCEhUKDUN1cnNvck9mZnNldFkYCCABKAISFQoNQ3Vy",
            "c29yT2Zmc2V0WhgJIAEoAhIOCgZTcGVlZFgYCiABKAISDgoGU3BlZWRZGAsg",
            "ASgCEg4KBlJhbmdlWBgMIAEoAhIOCgZSYW5nZVkYDSABKAISFAoMRm9sbG93",
            "Q2FtZXJhGA4gASgIEhUKDVJhbmdlRWZmZWN0SUQYDyABKAUSFgoOQ3Vyc29y",
            "RWZmZWN0SUQYECABKAUSFAoMQ2FzdEVmZmVjdElEGBEgASgFEicKCUNhc3RT",
            "a2lsbBgSIAEoCzIULnBiZS5Kb3lzdGlja0Nhc3RDZmcSKAoIQ2FzdFR5cGUY",
            "EyABKA4yFi5wYmUuRW51bVByZXNzQ2FzdFR5cGUSLQoORW50aXR5SW5mb0xp",
            "c3QYFCADKAsyFS5wYmUuRW50aXR5SW5mb0NvbmZpZxIQCghIb2xkVGljaxgV",
            "IAEoBRITCgtDYXN0QnlTcGVlZBgWIAEoCCIzCg9Kb3lzdGlja0Nhc3RDZmcS",
            "DwoHU2tpbGxJRBgBIAEoBRIPCgdDYXN0TnVtGAIgASgJIkAKDEVmZmVjdENv",
            "bmZpZxILCgNLZXkYAiABKAUSIwoKRWZmZWN0SW5mbxgDIAMoCzIPLnBiZS5F",
            "ZmZlY3RJbmZvIrADCgpFZmZlY3RJbmZvEg8KB1Jlc05hbWUYASABKAkSEgoK",
            "RWZmZWN0VHlwZRgCIAEoBRIOCgZJc0xvb3AYAyABKAgSEQoJTG9vcENvdW50",
            "GAQgASgFEh0KB1Jlc1R5cGUYBSABKA4yDC5wYmUuUmVzVHlwZRIfCgpCbGlu",
            "ZFBvaW50GAYgASgOMgsucGJlLkpvaW5JZBIPCgdPZmZzZXRYGAcgASgCEg8K",
            "B09mZnNldFkYCCABKAISDwoHT2Zmc2V0WhgJIAEoAhIdChVEZWxldGVXaGVu",
            "Q2hhbmdlU2tpbGwYCiABKAgSEgoKU3RvcEVmZmVjdBgLIAEoCBIeChZEZWxl",
            "dGVXaGVuQ2hhbmdlQWN0aW9uGAwgASgIEhYKDkxpZmVDeWNsZVN0eWxlGA0g",
            "ASgFEg4KBlNjYWxlWBgOIAEoAhIOCgZTY2FsZVkYDyABKAISDgoGU2NhbGVa",
            "GBAgASgCEg4KBkV1bGVyWBgRIAEoAhIOCgZFdWxlclkYEiABKAISDgoGRXVs",
            "ZXJaGBMgASgCEhAKCER1cmF0aW9uGBQgASgCEgoKAmlkGBUgASgFIu4DCgpN",
            "b3ZlQ29uZmlnEgsKA0tleRgCIAEoBRIOCgZTcGVlZFgYAyABKAISDgoGU3Bl",
            "ZWRZGAQgASgCEg4KBlNwZWVkWhgFIAEoAhIVCg1DYW5UdXJuQXJvdW5kGAYg",
            "ASgIEhkKEUlzRm9yY2VUdXJuQXJvdW5kGAcgASgIEhMKC1VzZUpveXN0aWNr",
            "GAggASgIEhUKDUZvcndhcmRTcGVlZFgYCSABKAISFQoNRm9yd2FyZFNwZWVk",
            "WRgKIAEoAhIVCg1Gb3J3YXJkU3BlZWRaGAsgASgCEhYKDkJhY2t3YXJkU3Bl",
            "ZWRYGAwgASgCEhYKDkJhY2t3YXJkU3BlZWRZGA0gASgCEhYKDkJhY2t3YXJk",
            "U3BlZWRaGA4gASgCEhMKC0lnbm9yZUJsb2NrGA8gASgIEhMKC1NwZWVkUmVs",
            "YXRlGBAgASgIEjEKD1NwZWVkUmVsYXRlVHlwZRgRIAEoDjIYLnBiZS5FbnVt",
            "U3BlZWRSZWxhdGVUeXBlEhgKEFNwZWVkUmVsYXRlVmFsdWUYEiABKAISEQoJ",
            "Rmxhc2hNb3ZlGBMgASgIEi0KDUZsYXNoTW92ZVR5cGUYFCABKA4yFi5wYmUu",
            "RW51bUZsYXNoTW92ZVR5cGUSFgoORmxhc2hNb3ZlU3BlZWQYFSABKAIiKgoO",
            "TW92ZUluZm9Db25maWcSGAoQQmFja0lucHV0Tm9TcGVlZBgBIAEoCCJpCgxT",
            "Y3JlZW5FZmZlY3QSJQoLU2hha2VTY3JlZW4YAiABKAsyEC5wYmUuU2hha2VT",
            "Y3JlZW4SJQoLU2NyZWVuU2NhbGUYAyABKAsyEC5wYmUuU2NyZWVuU2NhbGUS",
            "CwoDS2V5GAQgASgFIp0BCgtTaGFrZVNjcmVlbhIWCg5DYW5TaGFrZVNjcmVl",
            "bhgBIAEoCBIUCgxTaGFrZVNjcmVlblgYAiABKAISFAoMU2hha2VTY3JlZW5Z",
            "GAMgASgCEhcKD1NoYWtlU2NyZWVuVGltZRgEIAEoBRIXCg9TaGFrZVNjcmVl",
            "bk9uY2UYBSABKAUSGAoQU2hha2VTY3JlZW5QYXJhbRgGIAEoAiKBAQoLU2Ny",
            "ZWVuU2NhbGUSFgoOQ2FuQ2hhbmdlU2NhbGUYASABKAgSDQoFU2NhbGUYAiAB",
            "KAISEQoJTmVlZEZyYW1lGAMgASgFEhAKCExhc3RUaW1lGAQgASgFEhIKClJl",
            "c3VtZVRpbWUYBSABKAUSEgoKU2NhbGVUaW1lcxgGIAEoBSJECgtTb3VuZENv",
            "bmZpZxIoCgpTb3VuZENsaXBzGAIgAygLMhQucGJlLlNvdW5kQ2xpcENvbmZp",
            "ZxILCgNLZXkYAyABKAUimQEKD1NvdW5kQ2xpcENvbmZpZxIPCgdJc0dyb3Vw",
            "GAEgASgIEgoKAklkGAIgASgFEhUKDUlzV2VhcG9uTXVzY2kYAyABKAgSHQoV",
            "SXNSZW1vdmVPbkNoYW5nZVNraWxsGAQgASgIEh4KFklzUmVtb3ZlT25DaGFu",
            "Z2VBY3Rpb24YBSABKAgSEwoLQXVkaW9Wb2x1bWUYBiABKAIilgEKDEF0dGFj",
            "a0NvbmZpZxILCgNLZXkYAiABKAUSDgoGSHVydElkGAMgASgFEh8KB0hpdElu",
            "Zm8YBCABKAsyDi5wYmUuSGl0RWZmZWN0Ei4KEkF0dGFja0JveEdyb3VwTGlz",
            "dBgFIAMoCzISLnBiZS5BdHRhY2tCb3hMaXN0EhgKEFVzZVNhbWVTa2lsbElu",
            "Zm8YBiABKAgiygIKDUF0dHJhY3RDb25maWcSCwoDS2V5GAEgASgFEhcKD0F0",
            "dHJhY3REdXJhdGlvbhgCIAEoBRINCgVTcGVlZBgDIAEoBRISCgpJc0hpdEZv",
            "cmNlGAQgASgIEhEKCUhpdEZvcmNlWBgFIAEoBRIRCglIaXRGb3JjZVkYBiAB",
            "KAUSLQoPQXR0cmFjdFBvc0dyb3VwGAcgAygLMhQucGJlLkF0dHJhY3RQb3NH",
            "cm91cBINCgVNb3ZlWBgIIAEoCBINCgVNb3ZlWRgJIAEoCBINCgVNb3ZlWhgK",
            "IAEoCBIYChBSZW1vdmVPblNraWxsRW5kGAsgASgIEg4KBlNpbmdsZRgMIAEo",
            "CBIUCgxJc0F0dGFja0hpbnQYDSABKAgSGQoRQXR0YWNrU2tpbGxJbmZvSWQY",
            "DiABKAUSEwoLU3BlZWRHcm93dGgYDyABKAUiRAoPQXR0cmFjdFBvc0dyb3Vw",
            "EhUKA0JveBgBIAEoCzIILnBiZS5Cb3gSGgoHU2VsZlBvcxgCIAEoCzIJLnBi",
            "ZS5WZWMzIicKBFZlYzMSCQoBWBgBIAEoBRIJCgFZGAIgASgFEgkKAVoYAyAB",
            "KAUiKwoIQm9vbFZlYzMSCQoBeBgBIAEoCBIJCgF5GAIgASgIEgkKAXoYAyAB",
            "KAgiPgoIVHJhY2tQb3MSGgoFSm9pbnQYASABKA4yCy5wYmUuSm9pbklkEhYK",
            "A1BvcxgCIAEoCzIJLnBiZS5WZWMzIiEKCUhpdEVmZmVjdBIUCgxIaXRTa2ls",
            "bFR5cGUYASABKAUiUgoNQXR0YWNrQm94TGlzdBIfCgdCb3hMaXN0GAEgAygL",
            "Mg4ucGJlLkF0dGFja0JveBIRCglNYXhUYXJnZXQYAiABKAUSDQoFUmVzZXQY",
            "AyABKAgiRQoJQXR0YWNrQm94EhUKA0JveBgBIAEoCzIILnBiZS5Cb3gSDwoH",
            "U29ydE51bRgCIAEoBRIQCghFZmZlY3RJRBgDIAEoBSIyCglEZWZDb25maWcS",
            "CwoDS2V5GAIgASgFEhgKBkRlZkJveBgDIAMoCzIILnBiZS5Cb3giMwoLQmxv",
            "Y2tDb25maWcSCwoDS2V5GAEgASgFEhcKBWJsb2NrGAIgAygLMggucGJlLkJv",
            "eCJoCgNCb3gSDgoGUmFuZ2VYGAEgASgCEg4KBlJhbmdlWRgCIAEoAhIOCgZS",
            "YW5nZVoYAyABKAISDwoHT2Zmc2V0WBgEIAEoAhIPCgdPZmZzZXRZGAUgASgC",
            "Eg8KB09mZnNldFoYBiABKAIiSAoLQ2hhbmdlU2tpbGwSLAoOVmVjQ2hhbmdl",
            "U2tpbGwYAiADKAsyFC5wYmUuQ2hhbmdlU2tpbGxVbml0EgsKA0tleRgDIAEo",
            "BSJRCg9DaGFuZ2VTa2lsbFVuaXQSFAoMSW5wdXRTa2lsbElEGAEgASgFEhQK",
            "DEp1bXBGcmFtZU51bRgCIAEoBRISCgpSZXNldFNwZWVkGAMgASgIIksKCUZy",
            "YW1lQnVmZhIQCghGcmFtZU51bRgBIAEoBRILCgNLZXkYAiABKAUSHwoIQnVm",
            "ZkluZm8YAyADKAsyDS5wYmUuQnVmZkluZm8irQEKCEJ1ZmZJbmZvEhIKCkJ1",
            "ZmZJbmZvSWQYASABKAUSDQoFTGV2ZWwYAiABKAUSFQoNVXNlU2tpbGxMZXZl",
            "bBgDIAEoCBIdChVEZWxldGVXaGVuQ2hhbmdlU2tpbGwYBCABKAgSHgoWRGVs",
            "ZXRlV2hlbkNoYW5nZUFjdGlvbhgFIAEoCBIQCghEdXJhdGlvbhgGIAEoBRIW",
            "Cg5MaWZlQ3ljbGVTdHlsZRgHIAEoBSJaCg5GcmFtZU1lY2hhbmlzbRIQCghG",
            "cmFtZU51bRgBIAEoBRILCgNLZXkYAiABKAUSKQoNTWVjaGFuaXNtSW5mbxgD",
            "IAMoCzISLnBiZS5NZWNoYW5pc21JbmZvIqEBCg1NZWNoYW5pc21JbmZvEhMK",
            "C01lY2hhbmlzbUlEGAEgASgFEg0KBUlzQWRkGAIgASgIEhUKDVVzZVNraWxs",
            "TGV2ZWwYAyABKAgSHQoVRGVsZXRlV2hlbkNoYW5nZVNraWxsGAQgASgIEh4K",
            "FkRlbGV0ZVdoZW5DaGFuZ2VBY3Rpb24YBSABKAgSFgoOTGlmZUN5Y2xlU3R5",
            "bGUYBiABKAUiUgoIRnJhbWVUYWcSEAoIRnJhbWVOdW0YASABKAUSCwoDS2V5",
            "GAIgASgFEicKDEZyYW1lVGFnSW5mbxgDIAMoCzIRLnBiZS5GcmFtZVRhZ0lu",
            "Zm8iHQoMRnJhbWVUYWdJbmZvEg0KBVRhZ0lEGAEgASgFIloKF0VmZmVjdFN0",
            "YXRlUHJlZmFiQ29uZmlnEgsKA0tleRgBIAEoBRIMCgROYW1lGAIgASgJEiQK",
            "BlN0YXRlcxgDIAMoCzIULnBiZS5FZmZlY3RTdGF0ZUl0ZW0iigEKD0VmZmVj",
            "dFN0YXRlSXRlbRIPCgdSZXNwYXRoGAEgASgJEhAKCENsaXBOYW1lGAIgASgJ",
            "Eh0KB1Jlc1R5cGUYAyABKA4yDC5wYmUuUmVzVHlwZRISCgpTdGF0ZUluZGV4",
            "GAQgASgFEg8KB1NraWxsSWQYBSABKAUSEAoIRWZmZWN0SWQYBiABKAUivAUK",
            "DkdyYWJJbmZvQ29uZmlnEiMKCEdyYWJUeXBlGAEgASgOMhEucGJlLkVudW1H",
            "cmFiVHlwZRIRCglIaXRGb3JjZVgYAiABKAUSEQoJSGl0Rm9yY2VZGAMgASgF",
            "EhEKCUhpdEZvcmNlWhgEIAEoBRIYChBJc0ltbUNoYW5nZVNraWxsGAUgASgI",
            "EhUKDUNoYW5nZVNraWxsSWQYBiABKAUSIgoKR3JhYlRyYWNrcxgHIAMoCzIO",
            "LnBiZS5HcmFiVHJhY2sSEgoKSXNIaXRGb3JjZRgIIAEoCBIbChNNYXhHcmFi",
            "VGFyZ2V0TnVtYmVyGAkgASgFEhoKEkNoYW5nZUdyYWJEZWZMZXZlbBgKIAEo",
            "BRIRCglHcmFiTGV2ZWwYCyABKAUSEQoJQmVIaXROYW1lGAwgASgFEhkKEUNv",
            "bW1vbkdyYWJTa2lsbElkGA0gASgFEhcKD0NvbW1vbkdyYWJGcmFtZRgOIAEo",
            "BRIaChJDb21tb25IaXRTa2lsbFR5cGUYDyABKAUSHgoHQmluZFBvcxgQIAEo",
            "CzINLnBiZS5UcmFja1BvcxIgCg1CZXNpZXJQYXJtdGVyGBEgASgLMgkucGJl",
            "LlZlYzMSGwoIUm90YXRpb24YEiABKAsyCS5wYmUuVmVjMxIQCghIdXJ0TG9v",
            "cBgTIAEoCBIYChBHZW5lcmF0ZUVudGl0eUlkGBQgASgFEh8KF0lnbm9yZVZp",
            "ZXdJbnRlcnBvbGF0aW9uGBUgASgIEhAKCEdyYWJDbGlwGBYgASgFEhQKDHNl",
            "bGZCdWZmSW5mbxgXIAEoBRITCgtjbGVhck15QnVmZhgYIAEoCBIWCg50YXJn",
            "ZXRCdWZmSW5mbxgZIAEoBRIXCg9jbGVhclRhcmdldEJ1ZmYYGiABKAgSGgoS",
            "R2VuZXJhdGVFbnRpdHlUeXBlGBsgASgFIlAKCUdyYWJUcmFjaxIRCglTdGFy",
            "RnJhbWUYASABKAUSEgoKVG90YWxGcmFtZRgCIAEoBRIcCglPZmZTZXRQb3MY",
            "AyABKAsyCS5wYmUuVmVjMyJsCg9HcmFiRXZlbnRDb25maWcSCwoDS2V5GAEg",
            "ASgFEiEKBVN0YXRlGAIgASgOMhIucGJlLkVudW1HcmFiRXZlbnQSFQoNQ2hh",
            "bmdlU2tpbGxJZBgDIAEoBRISCgpKdWRnZUZyYW1lGAQgASgFIvcBCgpBSVRy",
            "ZWVOb2RlEg4KBm5vZGVJRBgBIAEoBRIQCghub2RlVHlwZRgCIAEoBRIbCgR0",
            "YXNrGAMgASgLMgsucGJlLkFJVGFza0gAEiAKBGRlY28YBCABKAsyEC5wYmUu",
            "QUlEZWNvcmF0b3JIABJFChlwcm9iYWJpbGl0eVNlbGVjdG9yQ29uZmlnGAYg",
            "ASgLMiAucGJlLkFJUHJvYmFiaWxpdHlTZWxlY3RvckNvbmZpZ0gBEi8KDnBh",
            "cmFsbGVsQ29uZmlnGAcgASgLMhUucGJlLkFJUGFyYWxsZWxDb25maWdIAUIG",
            "CgRsZWFmQggKBmNvbmZpZyKjGAoGQUlUYXNrEhIKCmRldGFpbFR5cGUYASAB",
            "KAUSDgoGaW52ZXJ0GAIgASgIEj0KDmFwcHJvYWNoQ29uZmlnGAUgASgLMiMu",
            "cGJlLkFJQWN0aW9uRGlyZWN0bHlBcHByb2FjaENvbmZpZ0gAEjEKDGF0dGFj",
            "a0NvbmZpZxgGIAEoCzIZLnBiZS5BSUFjdGlvbkF0dGFja0NvbmZpZ0gAEjkK",
            "EGF3YXlUYXJnZXRDb25maWcYByABKAsyHS5wYmUuQUlBY3Rpb25Bd2F5VGFy",
            "Z2V0Q29uZmlnSAASLwoLY2xvc2VDb25maWcYCCABKAsyGC5wYmUuQUlBY3Rp",
            "b25DbG9zZUNvbmZpZ0gAEjsKEWNsb3NlVGFyZ2V0Q29uZmlnGAkgASgLMh4u",
            "cGJlLkFJQWN0aW9uQ2xvc2VUYXJnZXRDb25maWdIABI5ChBjeWNsZUNsb3Nl",
            "Q29uZmlnGAogASgLMh0ucGJlLkFJQWN0aW9uQ3ljbGVDbG9zZUNvbmZpZ0gA",
            "Ei0KCmlkbGVDb25maWcYCyABKAsyFy5wYmUuQUlBY3Rpb25JZGxlQ29uZmln",
            "SAASMQoMd2FuZGVyQ29uZmlnGAwgASgLMhkucGJlLkFJQWN0aW9uV2FuZGVy",
            "Q29uZmlnSAASOwoRemlnQXBwcm9hY2hDb25maWcYDSABKAsyHi5wYmUuQUlB",
            "Y3Rpb25aaWdBcHByb2FjaENvbmZpZ0gAEjMKDXNldEZhY2VDb25maWcYDiAB",
            "KAsyGi5wYmUuQUlBY3Rpb25TZXRGYWNlQ29uZmlnSAASOQoQZ2V0T3duZXJJ",
            "RENvbmZpZxgPIAEoCzIdLnBiZS5BSUFjdGlvbkdldE93bmVySURDb25maWdI",
            "ABI7ChFnZXRUYXJnZXRJRENvbmZpZxgQIAEoCzIeLnBiZS5BSUFjdGlvbkdl",
            "dFRhcmdldElEQ29uZmlnSAASPAoQZGlzdGFuY2VYWUNvbmZpZxgRIAEoCzIg",
            "LnBiZS5BSUNvbmRpdGlvbkRpc3RhbmNlWFlDb25maWdIABI+ChRkaXN0YW5j",
            "ZVRhcmdldENvbmZpZxgSIAEoCzIeLnBiZS5BSUNvbmRpdGlvbkRpc3RhbmNl",
            "VGFyZ2V0SAASOwoRZXhlY3V0ZVRyZWVDb25maWcYEyABKAsyHi5wYmUuQUlB",
            "Y3Rpb25FeGVjdXRlVHJlZUNvbmZpZ0gAEi0KCndhaXRDb25maWcYFCABKAsy",
            "Fy5wYmUuQUlBY3Rpb25XYWl0Q29uZmlnSAASPQoSc2V0QkJJbnRlZ2VyQ29u",
            "ZmlnGBUgASgLMh8ucGJlLkFJQWN0aW9uU2V0QkJJbnRlZ2VyQ29uZmlnSAAS",
            "RAoUY2hlY2tCQkludGVnZXJDb25maWcYFiABKAsyJC5wYmUuQUlDb25kaXRp",
            "b25DaGVja0JCSW50ZWdlckNvbmZpZ0gAEjMKDWRvU2tpbGxDb25maWcYFyAB",
            "KAsyGi5wYmUuQUlBY3Rpb25Eb1NraWxsQ29uZmlnSAASNQoOZG9BY3Rpb25D",
            "b25maWcYGCABKAsyGy5wYmUuQUlBY3Rpb25Eb0FjdGlvbkNvbmZpZ0gAEjMK",
            "DWFkZEJ1ZmZDb25maWcYGSABKAsyGi5wYmUuQUlBY3Rpb25BZGRCdWZmQ29u",
            "ZmlnSAASOwoRYWRkQnVmZkluZm9Db25maWcYGiABKAsyHi5wYmUuQUlBY3Rp",
            "b25BZGRCdWZmSW5mb0NvbmZpZ0gAEjYKDWNoZWNrSFBDb25maWcYGyABKAsy",
            "HS5wYmUuQUlDb25kaXRpb25DaGVja0hQQ29uZmlnSAASNgoNaGFzQnVmZkNv",
            "bmZpZxgcIAEoCzIdLnBiZS5BSUNvbmRpdGlvbkhhc0J1ZmZDb25maWdIABI8",
            "ChB1c2luZ1NraWxsQ29uZmlnGB0gASgLMiAucGJlLkFJQ29uZGl0aW9uVXNp",
            "bmdTa2lsbENvbmZpZ0gAEj4KEWNhblVzZVNraWxsQ29uZmlnGB4gASgLMiEu",
            "cGJlLkFJQ29uZGl0aW9uQ2FuVXNlU2tpbGxDb25maWdIABI/ChJiZUNvbnN0",
            "cmFpbnRDb25maWcYHyABKAsyIS5wYmUuQUlDb25kaXRpb25CZUNvbnRyYWlu",
            "dENvbmZpZ0gAEjkKEHJlbW92ZUJ1ZmZDb25maWcYICABKAsyHS5wYmUuQUlB",
            "Y3Rpb25SZW1vdmVCdWZmQ29uZmlnSAASQQoUcmVtb3ZlQnVmZkluZm9Db25m",
            "aWcYISABKAsyIS5wYmUuQUlBY3Rpb25SZW1vdmVCdWZmSW5mb0NvbmZpZ0gA",
            "Ei0KCm1vdmVDb25maWcYIiABKAsyFy5wYmUuQUlBY3Rpb25Nb3ZlQ29uZmln",
            "SAASNwoPZ2V0VW5pdElEQ29uZmlnGCMgASgLMhwucGJlLkFJQWN0aW9uR2V0",
            "VW5pdElEQ29uZmlnSAASSgobZ2V0UmFuZ2VkTW9uc3RlckNvdW50Q29uZmln",
            "GCQgASgLMiMucGJlLkFJQWN0aW9uR2V0TW9uc3RlckNvdW50SW5SYW5nZUgA",
            "Ei0KCmxvYWZDb25maWcYJSABKAsyFy5wYmUuQUlBY3Rpb25Mb2FmQ29uZmln",
            "SAASMwoNc3VpY2lkZUNvbmZpZxgmIAEoCzIaLnBiZS5BSUFjdGlvblN1aWNp",
            "ZGVDb25maWdIABIxCgxidWJibGVDb25maWcYJyABKAsyGS5wYmUuQUlBY3Rp",
            "b25CdWJibGVDb25maWdIABI1Cg5ibGFja0JhckNvbmZpZxgoIAEoCzIbLnBi",
            "ZS5BSUFjdGlvbkJsYWNrQmFyQ29uZmlnSAASQwoVZ2V0UGxheWVyVW5pdElE",
            "Q29uZmlnGCkgASgLMiIucGJlLkFJQWN0aW9uR2V0UGxheWVyVW5pdElEQ29u",
            "ZmlnSAASRQoWZmluZEJhY2thcHByb2FjaENvbmZpZxgqIAEoCzIjLnBiZS5B",
            "SUFjdGlvbkZpbmRCYWNrQXBwcm9hY2hDb25maWdIABI5ChBiYXR0bGVUaXBz",
            "Q29uZmlnGCsgASgLMh0ucGJlLkFJQWN0aW9uQmF0dGxlVGlwc0NvbmZpZ0gA",
            "EjUKDnNjZW5hcmlvQ29uZmlnGCwgASgLMhsucGJlLkFJQWN0aW9uU2NlbmFy",
            "aW9Db25maWdIABJEChRjaGVja1VuaXRTdGF0ZUNvbmZpZxgtIAEoCzIkLnBi",
            "ZS5BSUNvbmRpdGlvbkNoZWNrVW5pdFN0YXRlQ29uZmlnSAASOwoRYnV0dG9u",
            "U3RhdGVDb25maWcYLiABKAsyHi5wYmUuQUlBY3Rpb25CdXR0b25TdGF0ZUNv",
            "bmZpZ0gAEkcKF3N0YXJ0Q2FtZXJhT2Zmc2V0Q29uZmlnGC8gASgLMiQucGJl",
            "LkFJQWN0aW9uU3RhcnRDYW1lcmFPZmZzZXRDb25maWdIABI7ChFjYW1lcmFS",
            "ZXNldENvbmZpZxgwIAEoCzIeLnBiZS5BSUFjdGlvbkNhbWVyYVJlc2V0Q29u",
            "ZmlnSAASQgoTRWxlbWVudERhbWFnZUNvbmZpZxgxIAEoCzIjLnBiZS5BSUNv",
            "bmRpdGlvbkVsZW1lbnREYW1hZ2VDb25maWdIABI7ChFzZXRQb3NpdGlvbkNv",
            "bmZpZxgyIAEoCzIeLnBiZS5BSUFjdGlvblNldFBvc2l0aW9uQ29uZmlnSAAS",
            "RQoWZ2V0TW9uc3RlclVuaXRJRENvbmZpZxgzIAEoCzIjLnBiZS5BSUFjdGlv",
            "bkdldE1vbnN0ZXJVbml0SURDb25maWdIABI5ChBhdHRhY2tMaXN0Q29uZmln",
            "GDQgASgLMh0ucGJlLkFJQWN0aW9uQXR0YWNrTGlzdENvbmZpZ0gAEj8KE2dl",
            "dFNlY3Rpb25EaWZDb25maWcYNSABKAsyIC5wYmUuQUlBY3Rpb25HZXRTZWN0",
            "aW9uRGlmQ29uZmlnSAASPQoVcmVtb3ZlU2NlbmVJdGVtQ29uZmlnGDYgASgL",
            "MhwucGJlLkFJQWN0aW9uUmVtb3ZlU2NlbmVJdGVtSAASQwoYZnVsbFNjcmVl",
            "bk1hc2tTaG93Q29uZmlnGDcgASgLMh8ucGJlLkFJQWN0aW9uRnVsbFNjcmVl",
            "bk1hc2tTaG93SABCCAoGY29uZmlnIlwKC0FJRGVjb3JhdG9yEhIKCmRldGFp",
            "bFR5cGUYASABKAUSLwoOcmVwZWF0ZXJDb25maWcYAyABKAsyFS5wYmUuQUlS",
            "ZXBlYXRlckNvbmZpZ0gAQggKBmNvbmZpZyJWChRBSUFjdGlvbkF0dGFja0Nv",
            "bmZpZxISCgphdHRhY2tUeXBlGAEgASgFEhQKDGFjdGlvbkZvbGxvdxgCIAEo",
            "CBIUCgxlZmZlY3RGb2xsb3cYAyABKAgiPgoYQUlBY3Rpb25Bd2F5VGFyZ2V0",
            "Q29uZmlnEhAKCGZhY2VUeXBlGAEgASgFEhAKCG1vdmVUeXBlGAIgASgFIkoK",
            "HkFJQWN0aW9uRGlyZWN0bHlBcHByb2FjaENvbmZpZxIRCgljbG9zZVR5cGUY",
            "ASABKAUSFQoNZGlyZWN0aW9uVHlwZRgCIAEoBSIvCh5BSUFjdGlvbkZpbmRC",
            "YWNrQXBwcm9hY2hDb25maWcSDQoFcGFyYW0YASABKAUiOwoTQUlBY3Rpb25D",
            "bG9zZUNvbmZpZxIRCglsaW1pdE5vZGUYASABKAUSEQoJYnJlYWtUeXBlGAIg",
            "ASgFIoQBChlBSUFjdGlvbkNsb3NlVGFyZ2V0Q29uZmlnEhAKCG1vdmVUeXBl",
            "GAEgASgFEhAKCHRpbWVUeXBlGAIgASgFEg8KB3RpY2tOdW0YAyABKAISGAoQ",
            "dGlja051bVJhbmRvbU1pbhgEIAEoAhIYChB0aWNrTnVtUmFuZG9tTWF4GAUg",
            "ASgCInQKGEFJQWN0aW9uQ3ljbGVDbG9zZUNvbmZpZxISCgphY3Rpb25UeXBl",
            "GAEgASgFEhEKCWN5Y2xlVHlwZRgCIAEoBRINCgVjb3VudBgDIAEoBRIQCght",
            "aW5Db3VudBgEIAEoBRIQCghtYXhDb3VudBgFIAEoBSImChJBSUFjdGlvbklk",
            "bGVDb25maWcSEAoIaWRsZVR5cGUYASABKAUiPAoUQUlBY3Rpb25XYW5kZXJD",
            "b25maWcSEgoKd2FuZGVyVHlwZRgBIAEoBRIQCghtb3ZlVHlwZRgCIAEoBSIq",
            "ChlBSUFjdGlvblppZ0FwcHJvYWNoQ29uZmlnEg0KBWFuZ2xlGAEgASgCIioK",
            "EkFJQWN0aW9uV2FpdENvbmZpZxIUCgxtaWxsaXNlY29uZHMYASABKAUilAEK",
            "G0FJQ29uZGl0aW9uRGlzdGFuY2VYWUNvbmZpZxIVCg14RGlzdGFuY2VUeXBl",
            "GAEgASgFEhEKCXhEaXN0YW5jZRgCIAEoAhIVCg16RGlzdGFuY2VUeXBlGAMg",
            "ASgFEhEKCXpEaXN0YW5jZRgEIAEoAhIPCgdjYWxUeXBlGAUgASgFEhAKCGZh",
            "Y2VPbmx5GAYgASgIIlgKGUFJQ29uZGl0aW9uRGlzdGFuY2VUYXJnZXQSFAoM",
            "ZGlzdGFuY2VUeXBlGAEgASgFEhMKC2NvbXBhcmVUeXBlGAIgASgFEhAKCGRp",
            "c3RhbmNlGAMgASgCImoKH0FJQ29uZGl0aW9uQ2hlY2tCQkludGVnZXJDb25m",
            "aWcSHwoJYmJJbnRlZ2VyGAEgASgLMgwucGJlLkJCUGFyYW0SEQoJY2hlY2tU",
            "eXBlGAIgASgFEhMKC3ZhbHVlMkNoZWNrGAMgASgFIpEBChhBSUNvbmRpdGlv",
            "bkNoZWNrSFBDb25maWcSEgoKdGFyZ2V0VHlwZRgBIAEoBRIeCgh0YXJnZXRJ",
            "RBgCIAEoCzIMLnBiZS5CQlBhcmFtEhMKC2NvbXBhcmVUeXBlGAMgASgFEhIK",
            "CnZhbHVlUmVmZXIYBCABKAUSGAoQaHBWYWx1ZU9yUGVyY2VudBgFIAEoBSJe",
            "ChhBSUNvbmRpdGlvbkhhc0J1ZmZDb25maWcSEgoKdGFyZ2V0VHlwZRgBIAEo",
            "BRIeCgh0YXJnZXRJRBgCIAEoCzIMLnBiZS5CQlBhcmFtEg4KBmJ1ZmZJRBgD",
            "IAEoBSJiChtBSUNvbmRpdGlvblVzaW5nU2tpbGxDb25maWcSEgoKdGFyZ2V0",
            "VHlwZRgBIAEoBRIeCgh0YXJnZXRJRBgCIAEoCzIMLnBiZS5CQlBhcmFtEg8K",
            "B3NraWxsSUQYAyABKAUiYwocQUlDb25kaXRpb25DYW5Vc2VTa2lsbENvbmZp",
            "ZxISCgp0YXJnZXRUeXBlGAEgASgFEh4KCHRhcmdldElEGAIgASgLMgwucGJl",
            "LkJCUGFyYW0SDwoHc2tpbGxJRBgDIAEoBSJSChxBSUNvbmRpdGlvbkJlQ29u",
            "dHJhaW50Q29uZmlnEhIKCnRhcmdldFR5cGUYASABKAUSHgoIdGFyZ2V0SUQY",
            "AiABKAsyDC5wYmUuQkJQYXJhbSJkCh9BSUNvbmRpdGlvbkNoZWNrVW5pdFN0",
            "YXRlQ29uZmlnEhIKCnRhcmdldFR5cGUYASABKAUSHgoIdGFyZ2V0SUQYAiAB",
            "KAsyDC5wYmUuQkJQYXJhbRINCgVzdGF0ZRgDIAEoBSItChtBSVByb2JhYmls",
            "aXR5U2VsZWN0b3JDb25maWcSDgoGY29uZmlnGAEgAygFIjQKEEFJUGFyYWxs",
            "ZWxDb25maWcSDgoGcG9saWN5GAEgASgFEhAKCHJlcGVhdGVkGAIgASgIIlgK",
            "EEFJUmVwZWF0ZXJDb25maWcSFAoMcmVwZWF0ZXJNb2RlGAEgASgFEhMKC3Jl",
            "cGVhdFRpbWVzGAIgASgFEhkKEXJlcGVhdFVudGlsU3RhdHVzGAMgASgIIkMK",
            "FUFJQWN0aW9uU2V0RmFjZUNvbmZpZxIPCgdmYWNlRGlyGAEgASgFEhkKA1VJ",
            "RBgCIAEoCzIMLnBiZS5CQlBhcmFtIncKEkFJQWN0aW9uTW92ZUNvbmZpZxIa",
            "ChJhYnNvbHV0ZU9yUmVsYXRpdmUYASABKAUSCwoDYXJYGAIgASgFEgsKA2Fy",
            "WhgDIAEoBRIQCghtb3ZlVHlwZRgEIAEoBRIZCgNVSUQYBSABKAsyDC5wYmUu",
            "QkJQYXJhbSI1ChhBSUFjdGlvbkdldE93bmVySURDb25maWcSGQoDYmJwGAEg",
            "ASgLMgwucGJlLkJCUGFyYW0iNgoZQUlBY3Rpb25HZXRUYXJnZXRJRENvbmZp",
            "ZxIZCgNiYnAYASABKAsyDC5wYmUuQkJQYXJhbSJGChdBSUFjdGlvbkdldFVu",
            "aXRJRENvbmZpZxIQCgh1bmlxdWVJRBgBIAEoBRIZCgNiYnAYAiABKAsyDC5w",
            "YmUuQkJQYXJhbSJICh1BSUFjdGlvbkdldFBsYXllclVuaXRJRENvbmZpZxIM",
            "CgRzZWF0GAEgASgFEhkKA2JicBgCIAEoCzIMLnBiZS5CQlBhcmFtIl8KGkFJ",
            "QWN0aW9uU2V0QkJJbnRlZ2VyQ29uZmlnEh8KCWJiSW50ZWdlchgBIAEoCzIM",
            "LnBiZS5CQlBhcmFtEhEKCW9wZXJhdGlvbhgCIAEoBRINCgV2YWx1ZRgDIAEo",
            "BSJGChlBSUFjdGlvbkV4ZWN1dGVUcmVlQ29uZmlnEg4KBnRyZWVJZBgBIAEo",
            "BRIZCgNVSUQYAiABKAsyDC5wYmUuQkJQYXJhbSJgChVBSUFjdGlvbkRvU2tp",
            "bGxDb25maWcSDwoHc2tpbGxJZBgBIAEoBRIZCgNVSUQYAiABKAsyDC5wYmUu",
            "QkJQYXJhbRIbChNOZWVkRG9Ta2lsbERpcmVjdGx5GAMgASgIImoKFkFJQWN0",
            "aW9uRG9BY3Rpb25Db25maWcSEAoIYWN0aW9uSWQYASABKAUSEAoIZHVyYXRp",
            "b24YAiABKAUSEQoJYnJlYWthYmxlGAMgASgIEhkKA1VJRBgEIAEoCzIMLnBi",
            "ZS5CQlBhcmFtIogBChVBSUFjdGlvbkFkZEJ1ZmZDb25maWcSEgoKdGFyZ2V0",
            "VHlwZRgBIAEoBRIeCgh0YXJnZXRJRBgCIAEoCzIMLnBiZS5CQlBhcmFtEg4K",
            "BmJ1ZmZJRBgDIAEoBRIRCglidWZmTGV2ZWwYBCABKAUSGAoQbWlsbGlzZWNE",
            "dXJhdGlvbhgFIAEoBSKQAQoZQUlBY3Rpb25BZGRCdWZmSW5mb0NvbmZpZxIS",
            "Cgp0YXJnZXRUeXBlGAEgASgFEh4KCHRhcmdldElEGAIgASgLMgwucGJlLkJC",
            "UGFyYW0SEgoKYnVmZkluZm9JRBgDIAEoBRIRCglidWZmTGV2ZWwYBCABKAUS",
            "GAoQbWlsbGlzZWNEdXJhdGlvbhgFIAEoBSJeChhBSUFjdGlvblJlbW92ZUJ1",
            "ZmZDb25maWcSEgoKdGFyZ2V0VHlwZRgBIAEoBRIeCgh0YXJnZXRJRBgCIAEo",
            "CzIMLnBiZS5CQlBhcmFtEg4KBmJ1ZmZJRBgDIAEoBSJmChxBSUFjdGlvblJl",
            "bW92ZUJ1ZmZJbmZvQ29uZmlnEhIKCnRhcmdldFR5cGUYASABKAUSHgoIdGFy",
            "Z2V0SUQYAiABKAsyDC5wYmUuQkJQYXJhbRISCgpidWZmSW5mb0lEGAMgASgF",
            "ImAKHkFJQWN0aW9uR2V0TW9uc3RlckNvdW50SW5SYW5nZRIOCgZyYWRpdXMY",
            "ASABKAUSEQoJbW9uc3RlcklEGAIgAygFEhsKBWNvdW50GAMgASgLMgwucGJl",
            "LkJCUGFyYW0iKgoSQUlBY3Rpb25Mb2FmQ29uZmlnEhQKDG1pbGxpc2Vjb25k",
            "cxgBIAEoBSJwChVBSUFjdGlvblN1aWNpZGVDb25maWcSFQoNcGxheUFuaW1h",
            "dGlvbhgBIAEoCBIPCgdza2lsbElEGAIgASgFEhkKA1VJRBgDIAEoCzIMLnBi",
            "ZS5CQlBhcmFtEhQKDGhpZGVEcm9wSXRlbRgEIAEoCCJBChRBSUFjdGlvbkJ1",
            "YmJsZUNvbmZpZxIOCgZ0YWxrSUQYASABKAUSGQoDVUlEGAIgASgLMgwucGJl",
            "LkJCUGFyYW0iOAoWQUlBY3Rpb25CbGFja0JhckNvbmZpZxIMCgRzaG93GAEg",
            "ASgIEhAKCGR1cmF0aW9uGAIgASgFIjwKGEFJQWN0aW9uQmF0dGxlVGlwc0Nv",
            "bmZpZxIOCgZ0aXBzSUQYASABKAUSEAoIZHVyYXRpb24YAiABKAUiLAoWQUlB",
            "Y3Rpb25TY2VuYXJpb0NvbmZpZxISCgpzY2VuYXJpb0lEGAEgASgFIj0KGUFJ",
            "QWN0aW9uQnV0dG9uU3RhdGVDb25maWcSEQoJYnV0dG9uUG9zGAEgAygFEg0K",
            "BXN0YXRlGAIgASgIIlkKH0FJQWN0aW9uU3RhcnRDYW1lcmFPZmZzZXRDb25m",
            "aWcSDwoHWE9mZnNldBgBIAEoAhIPCgdaT2Zmc2V0GAIgASgCEhQKDFNtb290",
            "aE1zVGltZRgDIAEoBSIxChlBSUFjdGlvbkNhbWVyYVJlc2V0Q29uZmlnEhQK",
            "DFNtb290aE1zVGltZRgBIAEoBSJqCh5BSUNvbmRpdGlvbkVsZW1lbnREYW1h",
            "Z2VDb25maWcSEgoKVGFyZ2V0VHlwZRgBIAEoBRIeCghUYXJnZXRJRBgCIAEo",
            "CzIMLnBiZS5CQlBhcmFtEhQKDEVsZW1lbnRTdGF0ZRgDIAEoBSJgChlBSUFj",
            "dGlvblNldFBvc2l0aW9uQ29uZmlnEgwKBFBvc1gYASABKAISDAoEUG9zWRgC",
            "IAEoAhIMCgRQb3NaGAMgASgCEhkKA1VJRBgEIAEoCzIMLnBiZS5CQlBhcmFt",
            "IlMKHkFJQWN0aW9uR2V0TW9uc3RlclVuaXRJRENvbmZpZxIWCg5Nb25zdGVy",
            "VGFibGVJRBgBIAEoBRIZCgNCYnAYAiABKAsyDC5wYmUuQkJQYXJhbSJBChhB",
            "SUFjdGlvbkF0dGFja0xpc3RDb25maWcSJQoKQXR0YWNrTGlzdBgBIAMoCzIR",
            "LnBiZS5BSUF0dGFja05vZGUiOAobQUlBY3Rpb25HZXRTZWN0aW9uRGlmQ29u",
            "ZmlnEhkKA0JicBgBIAEoCzIMLnBiZS5CQlBhcmFtIjYKF0FJQWN0aW9uUmVt",
            "b3ZlU2NlbmVJdGVtEhsKE1JlbW92ZURlY29yYXRvck5hbWUYASABKAkiLgoa",
            "QUlBY3Rpb25GdWxsU2NyZWVuTWFza1Nob3cSEAoIRHVyYXRpb24YASABKAUi",
            "QAoMQUlBdHRhY2tOb2RlEg8KB1NraWxsSUQYASABKAUSDQoFRGVsYXkYAiAB",
            "KAUSEAoIRHVyYXRpb24YAyABKAUiNQoQQUlOb2RlQ29ubmVjdGlvbhIQCghm",
            "YXRoZXJJRBgBIAEoBRIPCgdjaGlsZElEGAIgASgFIiUKB0JCUGFyYW0SDAoE",
            "bmFtZRgBIAEoCRIMCgR0eXBlGAIgASgFIoYBCgZBSVRyZWUSDgoGdHJlZUlE",
            "GAEgASgFEh4KBW5vZGVzGAIgAygLMg8ucGJlLkFJVHJlZU5vZGUSLgoPbm9k",
            "ZUNvbm5lY3Rpb25zGAMgAygLMhUucGJlLkFJTm9kZUNvbm5lY3Rpb24SHAoG",
            "YmJWYXJzGAQgAygLMgwucGJlLkJCUGFyYW0iKwoNQ29tYmluZUFJVHJlZRIa",
            "CgV0cmVlcxgBIAMoCzILLnBiZS5BSVRyZWUiQwoMV2VhcG9uQ29uZmlnEgsK",
            "A0tleRgBIAEoBRImCgd3ZWFwb25zGAMgAygLMhUucGJlLldlYXBvbkl0ZW1D",
            "b25maWciawoQV2VhcG9uSXRlbUNvbmZpZxIKCgJJZBgBIAEoBRIRCglJc0Fk",
            "ZENsaXAYAiABKAgSEAoIQ2xpcE5hbWUYAyABKAkSFAoMSXNIaWRlV2VhcG9u",
            "GAQgASgIEhAKCEFsbEZyYW1lGAUgASgFIqEBChJDYW1lcmFGb2xsb3dDb25m",
            "aWcSCwoDS2V5GAEgASgFEhcKD0lzQnJlYWtPbkFjdGlvbhgCIAEoCBIWCg5J",
            "c0JyZWFrT25Ta2lsbBgDIAEoCBIRCglTdGFydFRpbWUYBCABKAUSDwoHRW5k",
            "VGltZRgFIAEoBRIRCglCYWNrRnJhbWUYBiABKAISFgoOU3RhcnRNb3ZlRnJh",
            "bWUYByABKAIixQEKE0NhbWVyYUNvbnRyb2xDb25maWcSCwoDS2V5GAEgASgF",
            "EgwKBFBvc1gYAyABKAISDAoEUG9zWRgEIAEoAhIMCgRQb3NaGAUgASgCEhUK",
            "DUJhY2tNb3ZlRnJhbWUYBiABKAUSFgoOU3RhcnRNb3ZlRnJhbWUYByABKAUS",
            "FwoPU3RheU9mZmVzdEZyYW1lGAggASgFEhcKD0lzQnJlYWtPbkFjdGlvbhgJ",
            "IAEoCBIWCg5Jc0JyZWFrT25Ta2lsbBgKIAEoCCJVChZDYW1lcmFGb2xsb3dJ",
            "dGVtQ29uZmlnEgsKA0tleRgBIAEoBRIJCgFYGAIgASgCEgkKAVkYAyABKAIS",
            "CQoBWhgEIAEoAhINCgVTY2FsZRgFIAEoAiKOAQoRQ2FtZXJhU2hha2VDb25m",
            "aWcSCwoDS2V5GAEgASgFEg4KBlhTY2FsZRgCIAEoAhIOCgZZc2NhbGUYAyAB",
            "KAISDwoHQWxsVGltZRgEIAEoAhIUCgxUaW1lT25lVGltZXMYBSABKAISEQoJ",
            "UmVkdWN0aW9uGAYgASgCEhIKClN0YXJ0RnJhbWUYByABKAUiLwoQRWRpdG9y",
            "T2Zmc2V0SXRlbRILCgNLZXkYASABKAMSDgoGT2Zmc2V0GAIgASgFInUKEEVk",
            "aXRvck9mZnNldExpc3QSJwoIVGFibGVLZXkYASABKAsyFS5wYmUuRWRpdG9y",
            "T2Zmc2V0SXRlbRIOCgZMZW5ndGgYAiABKAUSKAoJT2Zmc2V0THN0GAMgAygL",
            "MhUucGJlLkVkaXRvck9mZnNldEl0ZW0iPwoRRWRpdG9yT2Zmc2V0VGFibGUS",
            "KgoLT2Zmc2V0VGFibGUYASADKAsyFS5wYmUuRWRpdG9yT2Zmc2V0TGlzdCKV",
            "AQoSU2NyZWVuRWZmZWN0Q29uZmlnEgsKA0tleRgBIAEoBRIWCg5FZmZlY3RT",
            "aG93VHlwZRgCIAEoBRIrCg5lZmZlY3RGZ3VpSW5mbxgDIAMoCzITLnBiZS5F",
            "ZmZlY3RGZ3VpSW5mbxItCg9lZmZlY3RWaWRlb0luZm8YBCADKAsyFC5wYmUu",
            "RWZmZWN0VmlkZW9JbmZvIuoCCg5FZmZlY3RGZ3VpSW5mbxIbChNFZmZlY3RG",
            "Z3VpTGF5ZXJUeXBlGAEgASgFEhAKCEVmZmVjdElkGAIgASgFEhcKD0VmZmVj",
            "dEN5Y2xlVHlwZRgDIAEoBRIWCg5FZmZlY3REdXJhdGlvbhgEIAEoBRIdChVE",
            "ZWxldGVXaGVuQ2hhbmdlU2tpbGwYBSABKAgSEgoKSXNUZWFtU2hvdxgGIAEo",
            "CBIeChZEZWxldGVXaGVuQ2hhbmdlQWN0aW9uGAggASgIEhMKC0lzUml2YWxT",
            "aG93GAkgASgIEhkKEUZvbGxvd0F2YXRhclNwZWVkGAogASgIEhoKElN0b3BQ",
            "bGF5TmV4dEVmZmVjdBgLIAEoCBIRCglFZmZlY3RHSWQYDCABKAUSGAoQRWZm",
            "ZWN0U3RhcnRGcmFtZRgNIAEoBRIWCg5FZmZlY3RFbmRGcmFtZRgOIAEoBRIU",
            "CgxFZmZlY3RTdGF0dXMYDyABKAUiOgoPRWZmZWN0VmlkZW9JbmZvEhYKDlZp",
            "ZGVvTGF5ZXJUeXBlGAEgASgFEg8KB1ZpZGVvSWQYAiABKAUqQgoKQmF0dGxl",
            "VHlwZRILCgdPZmZMaW5lEAASCgoGU2luZ2xlEAESDgoKTXV0aVBsYXllchAC",
            "EgsKB0R1bmdlb24QAyplCgpCYXR0bGVNb2RlEgwKCE1vZGVOb25lEAASCAoE",
            "VGVzdBABEg4KCkxvY2FsRnJhbWUQAhINCglTeW5jRnJhbWUQAxIPCgtSZWNv",
            "cmRGcmFtZRAEEg8KC0VkaXRvclNraWxsEAUqQAoLQmF0dGxlU3RhdGUSDQoJ",
            "U3RhdGVOb25lEAASCQoFU3RhcnQQARIOCgpXYWl0UmVzdWx0EAISBwoDRW5k",
            "EAMqSgoQVGVhbVJlbGF0aW9uVHlwZRIICgRTZWxmEAASBwoDT3duEAESCwoH",
            "RnJpZW5kcxACEgkKBUVuZW15EAMSCwoHTmV1dHJhbBAEKkMKEVNlbGVjdG9y",
            "UmFuZ2VUeXBlEggKBFJvb20QABIHCgNNYXAQARIMCghDaXJjdWxhchACEg0K",
            "CVJlY3RhbmdsZRADKkYKCFJvb21UeXBlEg4KCk5vcm1hbFJvb20QABINCglT",
            "dGFydFJvb20QARIMCghCb3NzUm9vbRACEg0KCUFieXNzUm9vbRADKmsKFFRy",
            "aWdnZXJDb25kaXRpb25UeXBlEhEKDU5vbmVDb25kaXRpb24QABINCglIUFBl",
            "cmNlbnQQARILCgdUb3VjaGVkEAISCAoEVGltZRADEggKBERlYWQQBBIQCgxN",
            "YXhDb25kaXRpb24QBSp6ChFUcmlnZ2VyUmVzdWx0VHlwZRIOCgpOb25lUmVz",
            "dWx0EAASDAoIVHJhbnNmZXIQARITCg9BY3RpdmVNZWNoYW5pc20QAhIRCg1D",
            "aGFuZ2VBYmlsaXR5EAMSEAoMUkNoYW5nZVNraWxsEAQSDQoJTWF4UmVzdWx0",
            "EAUqOwoTQ2VsbEJlVHJpZ2dlcmVkVHlwZRITCg9FeGlzdEFsbFRoZVRpbWUQ",
            "ABIPCgtCZVRyaWdnZXJlZBABKj4KFUVudW1UcmFuc2ZlckRpcmVjdGlvbhIJ",
            "CgVSaWdodBAAEggKBERvd24QARIICgRMZWZ0EAISBgoCVXAQAypYCgdSZXNU",
            "eXBlEgoKBlByZWZhYhAAEhUKEUdQVVNraW5uaW5nUHJlZmFiEAESEwoPR1BV",
            "RWZmZWN0UHJlZmFiEAISFQoRRWZmZWN0U3RhdGVQcmVmYWIQAyr+AQoGSm9p",
            "bklkEg4KCkRfUl93ZWFwb24QABIOCgpEX0xfd2VhcG9uEAESCgoGRF93aW5n",
            "EAISEAoMQW5jaG9yU2hhZG93EAMSDwoLQW5jaG9yRml4ZWQQBBIOCgpBbmNo",
            "b3JGYWNlEAUSDwoLRF9oZWFkZHJlc3MQBhIKCgZEX2ZhY2UQBxIMCghEX1Jf",
            "ZWFycxAIEgwKCERfTF9lYXJzEAkSCgoGRF9idXR0EAoSGgoWV2VhcG9uUl9f",
            "RF93ZWFwb25fZ3JhYhALEhoKFldlYXBvbkxfX0Rfd2VhcG9uX2dyYWIQDBIL",
            "CgdEX3dhaXN0EA0SCwoHRF9jcm93bhAOKr0BChFFbnVtRWRpb3JUYWJsZVRh",
            "ZxIICgROb25lEAASDgoKU2VjdGlvbkxzdBABEhAKDENoYXJhY3RlckxzdBAC",
            "EgsKB1Jvb21Mc3QQAxIYChRFZmZlY3RTdGF0ZVByZWZhYkxzdBAEEhMKD0Nh",
            "bWVyYUZvbGxvd0xzdBAFEgwKCFNraWxsTHN0EAYSEAoMRWRpb3JWZXJzaW9u",
            "EAcSEAoMUm9vbVNjZW5lTHN0EAgSDgoKU2tpbGxFeExzdBBOKnMKEkVudW1D",
            "bGlwQ2hhbmdlVHlwZRIOCgpBdXRvQ2hhbmdlEAASDgoKQWdhaW5QcmVzcxAB",
            "Eg0KCUhvbGRQcmVzcxACEg8KC1Byb2JhYmlsaXR5EAMSDQoJSGl0VGFyZ2V0",
            "EAQSDgoKQ2hlY2tCbG9jaxAFKkEKCkNoYXJnZVR5cGUSDAoIQXV0b0Nhc3QQ",
            "ABIPCgtMb29wVW50aWxVcBABEhQKEExvb3BVbnRpbE1heFRpY2sQAiqjAQoR",
            "Q29uZGl0b25MaW1pdFR5cGUSDwoLSHBDb25zdE1vcmUQABIRCg1IcFBlcmNl",
            "bnRNb3JlEAESDwoLTXBDb25zdE1vcmUQAhIRCg1NcFBlcmNlbnRNb3JlEAMS",
            "DwoLSHBDb25zdExlc3MQBBIRCg1IcFBlcmNlbnRMZXNzEAUSDwoLTXBDb25z",
            "dExlc3MQBhIRCg1NcFBlcmNlbnRMZXNzEAcqOgoIU2xpZGVEaXISCgoGU2xp",
            "ZGVSEAASCgoGU2xpZGVEEAESCgoGU2xpZGVMEAISCgoGU2xpZGVVEAMqPgoI",
            "U2tpbGxOdW0SDQoJTm9uZVNraWxsEAASDwoLU2luZ2xlU2tpbGwQARISCg5N",
            "dWx0aXBsZVNraWxscxACKkIKEUVudW1QcmVzc0Nhc3RUeXBlEgsKB1ByZXNz",
            "VXAQABINCglQcmVzc0Rvd24QARIRCg1VbkNvbmRpdGlvbmFsEAIqMQoQRWZm",
            "ZWN0RW50aXR5VHlwZRIOCgpFZmZlY3RUaW1lEAASDQoJR2l2ZW5UaW1lEAEq",
            "QQoTRW51bVNwZWVkUmVsYXRlVHlwZRIVChFSZWxhdGVBdHRhY2tTcGVlZBAA",
            "EhMKD1JlbGF0ZU1vdmVTcGVlZBABKlMKEUVudW1GbGFzaE1vdmVUeXBlEgsK",
            "B1NQRUVEX1gQABILCgdTUEVFRF9aEAESEQoNTU9WRV9KT1lTVElDSxACEhEK",
            "DUFJX1RBUkdFVF9QT1MQAyowChBFbnVtVHJhY2tQb3NUeXBlEg0KCVRyYW5z",
            "Zm9ybRAAEg0KCVVuaXRKb2ludBABKlIKDEVudW1HcmFiVHlwZRIUChBFbnVt",
            "R3JhYlR5cGVOb25lEAASCwoHR29DYXRjaBABEggKBFB1bGwQAhIKCgZUYXJn",
            "ZXQQAxIJCgVTcGVlZBAEKoYBCg1FbnVtR3JhYkV2ZW50EhUKEUVudW1HcmFi",
            "U3RhdGVOb25lEAASCQoFSnVkZ2UQARILCgdFeGVjdXRlEAISCwoHUmVsZWFz",
            "ZRADEhMKD0dyYWJDaGFuZ2VTa2lsbBAEEg8KC0p1ZGVFeGVjdXRlEAUSEwoP",
            "SnVkZ2VBbmRFeGVjdXRlEAZiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Pbe.BattleType), typeof(global::Pbe.BattleMode), typeof(global::Pbe.BattleState), typeof(global::Pbe.TeamRelationType), typeof(global::Pbe.SelectorRangeType), typeof(global::Pbe.RoomType), typeof(global::Pbe.TriggerConditionType), typeof(global::Pbe.TriggerResultType), typeof(global::Pbe.CellBeTriggeredType), typeof(global::Pbe.EnumTransferDirection), typeof(global::Pbe.ResType), typeof(global::Pbe.JoinId), typeof(global::Pbe.EnumEdiorTableTag), typeof(global::Pbe.EnumClipChangeType), typeof(global::Pbe.ChargeType), typeof(global::Pbe.ConditonLimitType), typeof(global::Pbe.SlideDir), typeof(global::Pbe.SkillNum), typeof(global::Pbe.EnumPressCastType), typeof(global::Pbe.EffectEntityType), typeof(global::Pbe.EnumSpeedRelateType), typeof(global::Pbe.EnumFlashMoveType), typeof(global::Pbe.EnumTrackPosType), typeof(global::Pbe.EnumGrabType), typeof(global::Pbe.EnumGrabEvent), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.ResItem), global::Pbe.ResItem.Parser, new[]{ "Group", "Type", "Path" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.ResGpuSkinUrlInfo), global::Pbe.ResGpuSkinUrlInfo.Parser, new[]{ "SkinName", "MatrixName", "ClipNameList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.EditorConfig), global::Pbe.EditorConfig.Parser, new[]{ "SectionLst", "CharacterLst", "RoomLst", "EffectStatePrefabLst", "CameraFollowLst", "SkillLst", "SkillExtensionLst", "Version", "RoomSceneLst" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.SectionData), global::Pbe.SectionData.Parser, new[]{ "SectionID", "StartRoomId", "XSize", "YSize", "VMinMap", "Key", "NormalIntroBgmID", "BossIntroBgmID", "AbyssIntroBgmID", "NormalLoopBgmID", "BossLoopBgmID", "AbyssLoopBgmID", "NormalOutroBgmID", "BossOutroBgmID", "AbyssOutroBgmID", "AfterResultBgmID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.SkillExtensionConfig), global::Pbe.SkillExtensionConfig.Parser, new[]{ "Key", "HeroIDs", "Skills", "Weapons" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.MiniMap), global::Pbe.MiniMap.Parser, new[]{ "XPos", "YPos", "RoomID", "RoomType", "TPLst", "RoomOffset" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.RoomData), global::Pbe.RoomData.Parser, new[]{ "SceneName", "RoomID", "BattleMode", "CanMoveArea", "VPlayerBirthPos", "VEnemies", "VNpcs", "VDestructible", "VTransferDoor", "VTriggers", "VTerrainDecorator", "VMapDecorator", "VTerrainIndex", "Key", "SoundID", "SoundIntervalTime", "SoundPlayProbability", "Cameraboundary", "RoomMaxUID", "VCreateMonsterPoints", "VCreateRandomMonsterPoints", "RoomAI", "VAbyssPoints", "VAbyssCreateMonsterGroupPoints", "VTerrainType", "CameraOffsetX", "CameraOffsetZ", "LayerAnimationSpeedList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.RoomSceneData), global::Pbe.RoomSceneData.Parser, new[]{ "RoomID", "VMapDecorators", "VMapElements", "Key" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.SceneAreaRect), global::Pbe.SceneAreaRect.Parser, new[]{ "XSizeMin", "XSizeMax", "YSizeMin", "YSizeMax" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.CameraboundaryRect), global::Pbe.CameraboundaryRect.Parser, new[]{ "XSizeMin", "XSizeMax", "ZSizeMin", "ZSizeMax" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.PlayerBirthPosition), global::Pbe.PlayerBirthPosition.Parser, new[]{ "SeatID", "TeamID", "PositionX", "PositionY", "PositionZ", "ScaleX", "ScaleY", "ScaleZ", "Face" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.TerrainDecorator), global::Pbe.TerrainDecorator.Parser, new[]{ "ResName", "PositionX", "PositionZ" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.MapDecorator), global::Pbe.MapDecorator.Parser, new[]{ "ResName", "LocalPositionX", "LocalPositionY", "SceneLayer", "LayerOrder", "LocalPositionZ", "LocalScaleX", "LocalScaleY", "LocalScaleZ", "LocalRotationX", "LocalRotationY", "LocalRotationZ" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.MapDecorators), global::Pbe.MapDecorators.Parser, new[]{ "ResName", "LocalPositionX", "LocalPositionY", "LocalPositionZ", "LayerOrder", "LocalScaleX", "LocalScaleY", "LocalScaleZ", "LocalEulerX", "LocalEulerY", "LocalEulerZ", "BalanceValueX", "BalanceValueY", "BalanceValueZ", "Hue", "Saturation", "Intensity", "Brightness", "Contrast" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.CellCreateMonsterPoint), global::Pbe.CellCreateMonsterPoint.Parser, new[]{ "UniqueID", "VEnemy", "SectionUniqueID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.CellCreateRandomMonsterPoint), global::Pbe.CellCreateRandomMonsterPoint.Parser, new[]{ "UniqueID", "VRandomEnemy", "SectionUniqueID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.CellRandomEnemy), global::Pbe.CellRandomEnemy.Parser, new[]{ "Weight", "VEnemy" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.CellAbyssPoint), global::Pbe.CellAbyssPoint.Parser, new[]{ "UniqueID", "PositionX", "PositionZ", "SectionUniqueID", "FirstWaveMonsterLevel", "FirstWaveMonsterTeam", "SecondWaveMonsterLevel", "SecondWaveMonsterTeam" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.CellAbyssCreateMonsterGroupPoint), global::Pbe.CellAbyssCreateMonsterGroupPoint.Parser, new[]{ "UniqueID", "PositionX", "PositionZ", "MonsterGroupLevel", "MonsterGroupPointID", "SectionUniqueID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.CellEnemy), global::Pbe.CellEnemy.Parser, new[]{ "UniqueID", "MonsterID", "AkaName", "Level", "Direction", "PositionX", "PositionZ", "GroupID", "StoryID", "SectionUniqueID", "TeamID", "AISight" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.CellNPC), global::Pbe.CellNPC.Parser, new[]{ "UniqueID", "NPCID", "AkaName", "Direction", "PositionX", "PositionZ", "StoryID", "TeamID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.CellDestructible), global::Pbe.CellDestructible.Parser, new[]{ "UniqueID", "DestructibleID", "AkaName", "PositionX", "PositionZ", "GridWidth", "GridHeight", "TerrainIndex", "StateId", "TeamID", "SectionUniqueID", "TerrainType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.CellTransferDoor), global::Pbe.CellTransferDoor.Parser, new[]{ "UniqueID", "TransferDoorName", "ResID", "AkaName", "TouchRangeX", "TouchRangeZ", "PositionX", "PositionZ", "PositionXOffset", "PositionZOffset", "TransferPointXOffset", "TransferPointZOffset", "Direction", "StateId", "TeamID", "SectionUniqueID", "Face" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.CellTrigger), global::Pbe.CellTrigger.Parser, new[]{ "TriggerBase", "TriggerCondition", "TriggerResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.TriggerBaseDataCfg), global::Pbe.TriggerBaseDataCfg.Parser, new[]{ "UniqueID", "BeTriggeredType", "MaxTriggerCount", "NextTriggerIDs", "IntervalFrame" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.TriggerConditionCfg), global::Pbe.TriggerConditionCfg.Parser, new[]{ "ConditionType", "CHPPercent", "CTouched", "CDead" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.TriggerResultCfg), global::Pbe.TriggerResultCfg.Parser, new[]{ "ResultType", "RTransfer", "RMechanism", "RChangeAbility", "RChangeSkill", "RBuff", "RDestroy" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.TriggerConditonHPPercentCfg), global::Pbe.TriggerConditonHPPercentCfg.Parser, new[]{ "ListenEnemyUID", "ListenEnemyEntityID", "HpPercent" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.TriggerConditonTouchedCfg), global::Pbe.TriggerConditonTouchedCfg.Parser, new[]{ "CheckType", "TouchRangeX", "TouchRangeZ", "PositionX", "PositionZ", "TouchPosX", "TouchPosZ", "TransferPointPosX", "TransferPointPosZ", "PrefabName", "CheckCount", "IsPer", "ModelType", "Direction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.TriggerConditonDeadCfg), global::Pbe.TriggerConditonDeadCfg.Parser, new[]{ "ListenEnemyUIDs", "ListenEnemyEntityIDs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.TriggerResultTransferCfg), global::Pbe.TriggerResultTransferCfg.Parser, new[]{ "TransferType", "VTransferList", "PositionX", "PositionZ", "ListenRangeX", "ListenRangeZ", "TPIndex", "ShowAnimation", "TransferTeamAll" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.TriggerTriggerCfg), global::Pbe.TriggerTriggerCfg.Parser, new[]{ "VUniqueID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.TriggerResultBuffCfg), global::Pbe.TriggerResultBuffCfg.Parser, new[]{ "BuffID", "TargetType", "VTargetUID", "BuffTeamID", "PositionX", "PositionZ", "OPType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.TriggerResultDestroyTrigger), global::Pbe.TriggerResultDestroyTrigger.Parser, new[]{ "DestroyTriggerDelaySecond" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.TriggerResultActiveMechanism), global::Pbe.TriggerResultActiveMechanism.Parser, new[]{ "MechanismID", "EntityID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.TriggerResultChangeAbility), global::Pbe.TriggerResultChangeAbility.Parser, new[]{ "AbilityEnumList", "AbilityEnableList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.TriggerResultChangeSkill), global::Pbe.TriggerResultChangeSkill.Parser, new[]{ "SkillEnum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.CharacterConfig), global::Pbe.CharacterConfig.Parser, new[]{ "HeroID", "SkillConfigLst", "RangeX", "RangeZ", "PrefabName", "Key", "Scale", "PrefabType", "WeaponResID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.SkillConfig), global::Pbe.SkillConfig.Parser, new[]{ "SkillID", "Key", "ClipName", "DefaultSpeed", "TotalFrame", "SoundConfigLst", "AttackConfigLst", "DefBoxLst", "EffectConfigLst", "ScreenEffectLst", "MoveConfigLst", "ChangeSkillLst", "IsLoopSkill", "EndSkill", "PressInfo", "AttractLst", "BuffConfigLst", "MoveInfo", "GrabInfo", "GrabEventLst", "EntityConfigLst", "HeroID", "WeaponTag", "IsPvp", "WeaponLst", "MusicID", "CameraFollowLst", "CameraShakeLst", "LoopCount", "EffectID", "AddSpeedNumber", "TotalAnimationFrame", "NotInfluenceBySpeed", "MechanismConfigLst", "SkillClipList", "FrameTagLst", "CameraControlLst", "ScreenEffectConfigLst", "BlockLst" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.SkillClipInfo), global::Pbe.SkillClipInfo.Parser, new[]{ "ClipID", "ChangeType", "CostComboBean", "TargetClipID", "ChangeFrame", "ChangeWhenNoPress", "ChangePro", "ChangeWhenHit", "IsFinish", "BlockType", "DirType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.EntityConfig), global::Pbe.EntityConfig.Parser, new[]{ "Key", "EntityInfoList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.EntityInfoConfig), global::Pbe.EntityInfoConfig.Parser, new[]{ "OffsetX", "OffsetY", "OffsetZ", "DurationTime", "MoveSpeedX", "MoveSpeedY", "AddSpeedX", "AddSpeedY", "RandCount", "MaxAttackTimes", "MaxDistance", "BulletTargetType", "RandArea", "EnitiyId", "SkillInfo", "IsIgnoreWall", "IsCameraFollow", "MoveSpeedZ", "AddSpeedZ", "NotChangeFace", "IsEffectRotate", "BackShout", "IsScaleInherit", "InitState", "IsPool", "HeightMin", "HeightMax", "TouchGroundDelayFrame", "RangeRadius", "RangeType", "EntityTraceConfig", "EffectUnlockAxis" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.EntityTraceConfig), global::Pbe.EntityTraceConfig.Parser, new[]{ "TraceTime", "UpdateNumber", "AnchorType", "AnchorOffset", "CheckType", "CheckRadius", "CheckMinRadians", "CheckMaxRadians", "CheckHeight", "TraceTarget", "TraceUnlockAxis", "TraceSpeedType", "TargetOffset" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.RandShootCount), global::Pbe.RandShootCount.Parser, new[]{ "RandCountMin", "RandCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.PressInfo), global::Pbe.PressInfo.Parser, new[]{ "PressType", "ChargeSkillCfg", "OpenSkillCfg", "SlideSkillCfg", "JoystickSkillCfg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.PressSkillCfg), global::Pbe.PressSkillCfg.Parser, new[]{ "Duration", "SkillId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.DurationChangeSkillCfg), global::Pbe.DurationChangeSkillCfg.Parser, new[]{ "ShortFrame", "ShortSkillId", "NotShortFrame", "NotShortSkillId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.ChargeCfg), global::Pbe.ChargeCfg.Parser, new[]{ "HasCastAction", "CastTick", "ChargeType", "PressSkillCfg", "ChargeTick", "MaxChargeTick", "ChargeSkillId", "ChargeEffect", "CastEffect", "NeedShowChantBar" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.SkillLimitInfo), global::Pbe.SkillLimitInfo.Parser, new[]{ "LimitType", "LimitValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.OpenCloseCfg), global::Pbe.OpenCloseCfg.Parser, new[]{ "CastTime", "AutoOpen", "HoldingTime", "SkillLimits", "BuffInfos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.DirSkillCfg), global::Pbe.DirSkillCfg.Parser, new[]{ "Dir", "SkillId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.IntPair), global::Pbe.IntPair.Parser, new[]{ "First", "Second" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.SlideCfg), global::Pbe.SlideCfg.Parser, new[]{ "ShowTip", "TipMode", "PressDownType", "SkillDown", "SkillDownMapping", "HoldOnType", "MaxHoldTime", "SkillHold", "SkillHoldMapping", "PressUpType", "SkillUp", "SkillUpMapping", "RepeatTimes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.JoystickSkillCfg), global::Pbe.JoystickSkillCfg.Parser, new[]{ "CastTick", "XYMove", "XZMove", "RangeOffsetX", "RangeOffsetY", "RangeOffsetZ", "CursorOffsetX", "CursorOffsetY", "CursorOffsetZ", "SpeedX", "SpeedY", "RangeX", "RangeY", "FollowCamera", "RangeEffectID", "CursorEffectID", "CastEffectID", "CastSkill", "CastType", "EntityInfoList", "HoldTick", "CastBySpeed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.JoystickCastCfg), global::Pbe.JoystickCastCfg.Parser, new[]{ "SkillID", "CastNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.EffectConfig), global::Pbe.EffectConfig.Parser, new[]{ "Key", "EffectInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.EffectInfo), global::Pbe.EffectInfo.Parser, new[]{ "ResName", "EffectType", "IsLoop", "LoopCount", "ResType", "BlindPoint", "OffsetX", "OffsetY", "OffsetZ", "DeleteWhenChangeSkill", "StopEffect", "DeleteWhenChangeAction", "LifeCycleStyle", "ScaleX", "ScaleY", "ScaleZ", "EulerX", "EulerY", "EulerZ", "Duration", "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.MoveConfig), global::Pbe.MoveConfig.Parser, new[]{ "Key", "SpeedX", "SpeedY", "SpeedZ", "CanTurnAround", "IsForceTurnAround", "UseJoystick", "ForwardSpeedX", "ForwardSpeedY", "ForwardSpeedZ", "BackwardSpeedX", "BackwardSpeedY", "BackwardSpeedZ", "IgnoreBlock", "SpeedRelate", "SpeedRelateType", "SpeedRelateValue", "FlashMove", "FlashMoveType", "FlashMoveSpeed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.MoveInfoConfig), global::Pbe.MoveInfoConfig.Parser, new[]{ "BackInputNoSpeed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.ScreenEffect), global::Pbe.ScreenEffect.Parser, new[]{ "ShakeScreen", "ScreenScale", "Key" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.ShakeScreen), global::Pbe.ShakeScreen.Parser, new[]{ "CanShakeScreen", "ShakeScreenX", "ShakeScreenY", "ShakeScreenTime", "ShakeScreenOnce", "ShakeScreenParam" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.ScreenScale), global::Pbe.ScreenScale.Parser, new[]{ "CanChangeScale", "Scale", "NeedFrame", "LastTime", "ResumeTime", "ScaleTimes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.SoundConfig), global::Pbe.SoundConfig.Parser, new[]{ "SoundClips", "Key" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.SoundClipConfig), global::Pbe.SoundClipConfig.Parser, new[]{ "IsGroup", "Id", "IsWeaponMusci", "IsRemoveOnChangeSkill", "IsRemoveOnChangeAction", "AudioVolume" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AttackConfig), global::Pbe.AttackConfig.Parser, new[]{ "Key", "HurtId", "HitInfo", "AttackBoxGroupList", "UseSameSkillInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AttractConfig), global::Pbe.AttractConfig.Parser, new[]{ "Key", "AttractDuration", "Speed", "IsHitForce", "HitForceX", "HitForceY", "AttractPosGroup", "MoveX", "MoveY", "MoveZ", "RemoveOnSkillEnd", "Single", "IsAttackHint", "AttackSkillInfoId", "SpeedGrowth" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AttractPosGroup), global::Pbe.AttractPosGroup.Parser, new[]{ "Box", "SelfPos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.Vec3), global::Pbe.Vec3.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.BoolVec3), global::Pbe.BoolVec3.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.TrackPos), global::Pbe.TrackPos.Parser, new[]{ "Joint", "Pos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.HitEffect), global::Pbe.HitEffect.Parser, new[]{ "HitSkillType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AttackBoxList), global::Pbe.AttackBoxList.Parser, new[]{ "BoxList", "MaxTarget", "Reset" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AttackBox), global::Pbe.AttackBox.Parser, new[]{ "Box", "SortNum", "EffectID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.DefConfig), global::Pbe.DefConfig.Parser, new[]{ "Key", "DefBox" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.BlockConfig), global::Pbe.BlockConfig.Parser, new[]{ "Key", "Block" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.Box), global::Pbe.Box.Parser, new[]{ "RangeX", "RangeY", "RangeZ", "OffsetX", "OffsetY", "OffsetZ" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.ChangeSkill), global::Pbe.ChangeSkill.Parser, new[]{ "VecChangeSkill", "Key" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.ChangeSkillUnit), global::Pbe.ChangeSkillUnit.Parser, new[]{ "InputSkillID", "JumpFrameNum", "ResetSpeed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.FrameBuff), global::Pbe.FrameBuff.Parser, new[]{ "FrameNum", "Key", "BuffInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.BuffInfo), global::Pbe.BuffInfo.Parser, new[]{ "BuffInfoId", "Level", "UseSkillLevel", "DeleteWhenChangeSkill", "DeleteWhenChangeAction", "Duration", "LifeCycleStyle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.FrameMechanism), global::Pbe.FrameMechanism.Parser, new[]{ "FrameNum", "Key", "MechanismInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.MechanismInfo), global::Pbe.MechanismInfo.Parser, new[]{ "MechanismID", "IsAdd", "UseSkillLevel", "DeleteWhenChangeSkill", "DeleteWhenChangeAction", "LifeCycleStyle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.FrameTag), global::Pbe.FrameTag.Parser, new[]{ "FrameNum", "Key", "FrameTagInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.FrameTagInfo), global::Pbe.FrameTagInfo.Parser, new[]{ "TagID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.EffectStatePrefabConfig), global::Pbe.EffectStatePrefabConfig.Parser, new[]{ "Key", "Name", "States" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.EffectStateItem), global::Pbe.EffectStateItem.Parser, new[]{ "Respath", "ClipName", "ResType", "StateIndex", "SkillId", "EffectId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.GrabInfoConfig), global::Pbe.GrabInfoConfig.Parser, new[]{ "GrabType", "HitForceX", "HitForceY", "HitForceZ", "IsImmChangeSkill", "ChangeSkillId", "GrabTracks", "IsHitForce", "MaxGrabTargetNumber", "ChangeGrabDefLevel", "GrabLevel", "BeHitName", "CommonGrabSkillId", "CommonGrabFrame", "CommonHitSkillType", "BindPos", "BesierParmter", "Rotation", "HurtLoop", "GenerateEntityId", "IgnoreViewInterpolation", "GrabClip", "SelfBuffInfo", "ClearMyBuff", "TargetBuffInfo", "ClearTargetBuff", "GenerateEntityType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.GrabTrack), global::Pbe.GrabTrack.Parser, new[]{ "StarFrame", "TotalFrame", "OffSetPos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.GrabEventConfig), global::Pbe.GrabEventConfig.Parser, new[]{ "Key", "State", "ChangeSkillId", "JudgeFrame" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AITreeNode), global::Pbe.AITreeNode.Parser, new[]{ "NodeID", "NodeType", "Task", "Deco", "ProbabilitySelectorConfig", "ParallelConfig" }, new[]{ "Leaf", "Config" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AITask), global::Pbe.AITask.Parser, new[]{ "DetailType", "Invert", "ApproachConfig", "AttackConfig", "AwayTargetConfig", "CloseConfig", "CloseTargetConfig", "CycleCloseConfig", "IdleConfig", "WanderConfig", "ZigApproachConfig", "SetFaceConfig", "GetOwnerIDConfig", "GetTargetIDConfig", "DistanceXYConfig", "DistanceTargetConfig", "ExecuteTreeConfig", "WaitConfig", "SetBBIntegerConfig", "CheckBBIntegerConfig", "DoSkillConfig", "DoActionConfig", "AddBuffConfig", "AddBuffInfoConfig", "CheckHPConfig", "HasBuffConfig", "UsingSkillConfig", "CanUseSkillConfig", "BeConstraintConfig", "RemoveBuffConfig", "RemoveBuffInfoConfig", "MoveConfig", "GetUnitIDConfig", "GetRangedMonsterCountConfig", "LoafConfig", "SuicideConfig", "BubbleConfig", "BlackBarConfig", "GetPlayerUnitIDConfig", "FindBackapproachConfig", "BattleTipsConfig", "ScenarioConfig", "CheckUnitStateConfig", "ButtonStateConfig", "StartCameraOffsetConfig", "CameraResetConfig", "ElementDamageConfig", "SetPositionConfig", "GetMonsterUnitIDConfig", "AttackListConfig", "GetSectionDifConfig", "RemoveSceneItemConfig", "FullScreenMaskShowConfig" }, new[]{ "Config" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIDecorator), global::Pbe.AIDecorator.Parser, new[]{ "DetailType", "RepeaterConfig" }, new[]{ "Config" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIActionAttackConfig), global::Pbe.AIActionAttackConfig.Parser, new[]{ "AttackType", "ActionFollow", "EffectFollow" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIActionAwayTargetConfig), global::Pbe.AIActionAwayTargetConfig.Parser, new[]{ "FaceType", "MoveType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIActionDirectlyApproachConfig), global::Pbe.AIActionDirectlyApproachConfig.Parser, new[]{ "CloseType", "DirectionType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIActionFindBackApproachConfig), global::Pbe.AIActionFindBackApproachConfig.Parser, new[]{ "Param" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIActionCloseConfig), global::Pbe.AIActionCloseConfig.Parser, new[]{ "LimitNode", "BreakType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIActionCloseTargetConfig), global::Pbe.AIActionCloseTargetConfig.Parser, new[]{ "MoveType", "TimeType", "TickNum", "TickNumRandomMin", "TickNumRandomMax" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIActionCycleCloseConfig), global::Pbe.AIActionCycleCloseConfig.Parser, new[]{ "ActionType", "CycleType", "Count", "MinCount", "MaxCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIActionIdleConfig), global::Pbe.AIActionIdleConfig.Parser, new[]{ "IdleType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIActionWanderConfig), global::Pbe.AIActionWanderConfig.Parser, new[]{ "WanderType", "MoveType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIActionZigApproachConfig), global::Pbe.AIActionZigApproachConfig.Parser, new[]{ "Angle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIActionWaitConfig), global::Pbe.AIActionWaitConfig.Parser, new[]{ "Milliseconds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIConditionDistanceXYConfig), global::Pbe.AIConditionDistanceXYConfig.Parser, new[]{ "XDistanceType", "XDistance", "ZDistanceType", "ZDistance", "CalType", "FaceOnly" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIConditionDistanceTarget), global::Pbe.AIConditionDistanceTarget.Parser, new[]{ "DistanceType", "CompareType", "Distance" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIConditionCheckBBIntegerConfig), global::Pbe.AIConditionCheckBBIntegerConfig.Parser, new[]{ "BbInteger", "CheckType", "Value2Check" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIConditionCheckHPConfig), global::Pbe.AIConditionCheckHPConfig.Parser, new[]{ "TargetType", "TargetID", "CompareType", "ValueRefer", "HpValueOrPercent" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIConditionHasBuffConfig), global::Pbe.AIConditionHasBuffConfig.Parser, new[]{ "TargetType", "TargetID", "BuffID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIConditionUsingSkillConfig), global::Pbe.AIConditionUsingSkillConfig.Parser, new[]{ "TargetType", "TargetID", "SkillID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIConditionCanUseSkillConfig), global::Pbe.AIConditionCanUseSkillConfig.Parser, new[]{ "TargetType", "TargetID", "SkillID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIConditionBeContraintConfig), global::Pbe.AIConditionBeContraintConfig.Parser, new[]{ "TargetType", "TargetID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIConditionCheckUnitStateConfig), global::Pbe.AIConditionCheckUnitStateConfig.Parser, new[]{ "TargetType", "TargetID", "State" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIProbabilitySelectorConfig), global::Pbe.AIProbabilitySelectorConfig.Parser, new[]{ "Config" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIParallelConfig), global::Pbe.AIParallelConfig.Parser, new[]{ "Policy", "Repeated" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIRepeaterConfig), global::Pbe.AIRepeaterConfig.Parser, new[]{ "RepeaterMode", "RepeatTimes", "RepeatUntilStatus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIActionSetFaceConfig), global::Pbe.AIActionSetFaceConfig.Parser, new[]{ "FaceDir", "UID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIActionMoveConfig), global::Pbe.AIActionMoveConfig.Parser, new[]{ "AbsoluteOrRelative", "ArX", "ArZ", "MoveType", "UID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIActionGetOwnerIDConfig), global::Pbe.AIActionGetOwnerIDConfig.Parser, new[]{ "Bbp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIActionGetTargetIDConfig), global::Pbe.AIActionGetTargetIDConfig.Parser, new[]{ "Bbp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIActionGetUnitIDConfig), global::Pbe.AIActionGetUnitIDConfig.Parser, new[]{ "UniqueID", "Bbp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIActionGetPlayerUnitIDConfig), global::Pbe.AIActionGetPlayerUnitIDConfig.Parser, new[]{ "Seat", "Bbp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIActionSetBBIntegerConfig), global::Pbe.AIActionSetBBIntegerConfig.Parser, new[]{ "BbInteger", "Operation", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIActionExecuteTreeConfig), global::Pbe.AIActionExecuteTreeConfig.Parser, new[]{ "TreeId", "UID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIActionDoSkillConfig), global::Pbe.AIActionDoSkillConfig.Parser, new[]{ "SkillId", "UID", "NeedDoSkillDirectly" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIActionDoActionConfig), global::Pbe.AIActionDoActionConfig.Parser, new[]{ "ActionId", "Duration", "Breakable", "UID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIActionAddBuffConfig), global::Pbe.AIActionAddBuffConfig.Parser, new[]{ "TargetType", "TargetID", "BuffID", "BuffLevel", "MillisecDuration" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIActionAddBuffInfoConfig), global::Pbe.AIActionAddBuffInfoConfig.Parser, new[]{ "TargetType", "TargetID", "BuffInfoID", "BuffLevel", "MillisecDuration" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIActionRemoveBuffConfig), global::Pbe.AIActionRemoveBuffConfig.Parser, new[]{ "TargetType", "TargetID", "BuffID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIActionRemoveBuffInfoConfig), global::Pbe.AIActionRemoveBuffInfoConfig.Parser, new[]{ "TargetType", "TargetID", "BuffInfoID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIActionGetMonsterCountInRange), global::Pbe.AIActionGetMonsterCountInRange.Parser, new[]{ "Radius", "MonsterID", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIActionLoafConfig), global::Pbe.AIActionLoafConfig.Parser, new[]{ "Milliseconds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIActionSuicideConfig), global::Pbe.AIActionSuicideConfig.Parser, new[]{ "PlayAnimation", "SkillID", "UID", "HideDropItem" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIActionBubbleConfig), global::Pbe.AIActionBubbleConfig.Parser, new[]{ "TalkID", "UID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIActionBlackBarConfig), global::Pbe.AIActionBlackBarConfig.Parser, new[]{ "Show", "Duration" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIActionBattleTipsConfig), global::Pbe.AIActionBattleTipsConfig.Parser, new[]{ "TipsID", "Duration" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIActionScenarioConfig), global::Pbe.AIActionScenarioConfig.Parser, new[]{ "ScenarioID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIActionButtonStateConfig), global::Pbe.AIActionButtonStateConfig.Parser, new[]{ "ButtonPos", "State" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIActionStartCameraOffsetConfig), global::Pbe.AIActionStartCameraOffsetConfig.Parser, new[]{ "XOffset", "ZOffset", "SmoothMsTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIActionCameraResetConfig), global::Pbe.AIActionCameraResetConfig.Parser, new[]{ "SmoothMsTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIConditionElementDamageConfig), global::Pbe.AIConditionElementDamageConfig.Parser, new[]{ "TargetType", "TargetID", "ElementState" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIActionSetPositionConfig), global::Pbe.AIActionSetPositionConfig.Parser, new[]{ "PosX", "PosY", "PosZ", "UID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIActionGetMonsterUnitIDConfig), global::Pbe.AIActionGetMonsterUnitIDConfig.Parser, new[]{ "MonsterTableID", "Bbp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIActionAttackListConfig), global::Pbe.AIActionAttackListConfig.Parser, new[]{ "AttackList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIActionGetSectionDifConfig), global::Pbe.AIActionGetSectionDifConfig.Parser, new[]{ "Bbp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIActionRemoveSceneItem), global::Pbe.AIActionRemoveSceneItem.Parser, new[]{ "RemoveDecoratorName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIActionFullScreenMaskShow), global::Pbe.AIActionFullScreenMaskShow.Parser, new[]{ "Duration" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AIAttackNode), global::Pbe.AIAttackNode.Parser, new[]{ "SkillID", "Delay", "Duration" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AINodeConnection), global::Pbe.AINodeConnection.Parser, new[]{ "FatherID", "ChildID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.BBParam), global::Pbe.BBParam.Parser, new[]{ "Name", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.AITree), global::Pbe.AITree.Parser, new[]{ "TreeID", "Nodes", "NodeConnections", "BbVars" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.CombineAITree), global::Pbe.CombineAITree.Parser, new[]{ "Trees" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.WeaponConfig), global::Pbe.WeaponConfig.Parser, new[]{ "Key", "Weapons" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.WeaponItemConfig), global::Pbe.WeaponItemConfig.Parser, new[]{ "Id", "IsAddClip", "ClipName", "IsHideWeapon", "AllFrame" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.CameraFollowConfig), global::Pbe.CameraFollowConfig.Parser, new[]{ "Key", "IsBreakOnAction", "IsBreakOnSkill", "StartTime", "EndTime", "BackFrame", "StartMoveFrame" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.CameraControlConfig), global::Pbe.CameraControlConfig.Parser, new[]{ "Key", "PosX", "PosY", "PosZ", "BackMoveFrame", "StartMoveFrame", "StayOffestFrame", "IsBreakOnAction", "IsBreakOnSkill" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.CameraFollowItemConfig), global::Pbe.CameraFollowItemConfig.Parser, new[]{ "Key", "X", "Y", "Z", "Scale" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.CameraShakeConfig), global::Pbe.CameraShakeConfig.Parser, new[]{ "Key", "XScale", "Yscale", "AllTime", "TimeOneTimes", "Reduction", "StartFrame" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.EditorOffsetItem), global::Pbe.EditorOffsetItem.Parser, new[]{ "Key", "Offset" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.EditorOffsetList), global::Pbe.EditorOffsetList.Parser, new[]{ "TableKey", "Length", "OffsetLst" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.EditorOffsetTable), global::Pbe.EditorOffsetTable.Parser, new[]{ "OffsetTable" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.ScreenEffectConfig), global::Pbe.ScreenEffectConfig.Parser, new[]{ "Key", "EffectShowType", "EffectFguiInfo", "EffectVideoInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.EffectFguiInfo), global::Pbe.EffectFguiInfo.Parser, new[]{ "EffectFguiLayerType", "EffectId", "EffectCycleType", "EffectDuration", "DeleteWhenChangeSkill", "IsTeamShow", "DeleteWhenChangeAction", "IsRivalShow", "FollowAvatarSpeed", "StopPlayNextEffect", "EffectGId", "EffectStartFrame", "EffectEndFrame", "EffectStatus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbe.EffectVideoInfo), global::Pbe.EffectVideoInfo.Parser, new[]{ "VideoLayerType", "VideoId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///战斗类型
  /// </summary>
  public enum BattleType {
    /// <summary>
    ///离线
    /// </summary>
    [pbr::OriginalName("OffLine")] OffLine = 0,
    /// <summary>
    ///自由练习场
    /// </summary>
    [pbr::OriginalName("Single")] Single = 1,
    /// <summary>
    ///PK模式
    /// </summary>
    [pbr::OriginalName("MutiPlayer")] MutiPlayer = 2,
    /// <summary>
    ///普通关卡模式
    /// </summary>
    [pbr::OriginalName("Dungeon")] Dungeon = 3,
  }

  /// <summary>
  ///战斗模式
  /// </summary>
  public enum BattleMode {
    /// <summary>
    ///未知
    /// </summary>
    [pbr::OriginalName("ModeNone")] ModeNone = 0,
    /// <summary>
    ///单机测试本地数据
    /// </summary>
    [pbr::OriginalName("Test")] Test = 1,
    /// <summary>
    ///本地执行帧数据
    /// </summary>
    [pbr::OriginalName("LocalFrame")] LocalFrame = 2,
    /// <summary>
    ///服务端同步帧数据
    /// </summary>
    [pbr::OriginalName("SyncFrame")] SyncFrame = 3,
    /// <summary>
    ///录像模式
    /// </summary>
    [pbr::OriginalName("RecordFrame")] RecordFrame = 4,
    /// <summary>
    ///编辑器技能预览模式
    /// </summary>
    [pbr::OriginalName("EditorSkill")] EditorSkill = 5,
  }

  /// <summary>
  ///战斗状态
  /// </summary>
  public enum BattleState {
    /// <summary>
    ///未知
    /// </summary>
    [pbr::OriginalName("StateNone")] StateNone = 0,
    /// <summary>
    ///启动
    /// </summary>
    [pbr::OriginalName("Start")] Start = 1,
    /// <summary>
    ///游戏进行中
    /// </summary>
    [pbr::OriginalName("WaitResult")] WaitResult = 2,
    /// <summary>
    ///游戏结束
    /// </summary>
    [pbr::OriginalName("End")] End = 3,
  }

  /// <summary>
  ///队伍关系
  /// </summary>
  public enum TeamRelationType {
    /// <summary>
    ///自己
    /// </summary>
    [pbr::OriginalName("Self")] Self = 0,
    /// <summary>
    ///自己拥有的，比如召唤物
    /// </summary>
    [pbr::OriginalName("Own")] Own = 1,
    /// <summary>
    ///队友
    /// </summary>
    [pbr::OriginalName("Friends")] Friends = 2,
    /// <summary>
    ///敌人
    /// </summary>
    [pbr::OriginalName("Enemy")] Enemy = 3,
    /// <summary>
    ///中立
    /// </summary>
    [pbr::OriginalName("Neutral")] Neutral = 4,
  }

  /// <summary>
  ///选择器--范围类型
  /// </summary>
  public enum SelectorRangeType {
    /// <summary>
    ///全房间
    /// </summary>
    [pbr::OriginalName("Room")] Room = 0,
    /// <summary>
    ///全地图
    /// </summary>
    [pbr::OriginalName("Map")] Map = 1,
    /// <summary>
    ///圆形区域
    /// </summary>
    [pbr::OriginalName("Circular")] Circular = 2,
    /// <summary>
    ///矩形区域
    /// </summary>
    [pbr::OriginalName("Rectangle")] Rectangle = 3,
  }

  /// <summary>
  ///房间类型
  /// </summary>
  public enum RoomType {
    /// <summary>
    ///普通房间
    /// </summary>
    [pbr::OriginalName("NormalRoom")] NormalRoom = 0,
    /// <summary>
    ///起始房间
    /// </summary>
    [pbr::OriginalName("StartRoom")] StartRoom = 1,
    /// <summary>
    ///Boss房间
    /// </summary>
    [pbr::OriginalName("BossRoom")] BossRoom = 2,
    /// <summary>
    ///深渊房间
    /// </summary>
    [pbr::OriginalName("AbyssRoom")] AbyssRoom = 3,
  }

  /// <summary>
  ///触发器条件类型
  /// </summary>
  public enum TriggerConditionType {
    /// <summary>
    ///无条件
    /// </summary>
    [pbr::OriginalName("NoneCondition")] NoneCondition = 0,
    /// <summary>
    ///血量百分比触发器
    /// </summary>
    [pbr::OriginalName("HPPercent")] Hppercent = 1,
    /// <summary>
    ///触碰触发器
    /// </summary>
    [pbr::OriginalName("Touched")] Touched = 2,
    /// <summary>
    ///时间触发器
    /// </summary>
    [pbr::OriginalName("Time")] Time = 3,
    /// <summary>
    ///死亡触发器
    /// </summary>
    [pbr::OriginalName("Dead")] Dead = 4,
    [pbr::OriginalName("MaxCondition")] MaxCondition = 5,
  }

  /// <summary>
  ///触发器结果
  /// </summary>
  public enum TriggerResultType {
    /// <summary>
    ///无结果
    /// </summary>
    [pbr::OriginalName("NoneResult")] NoneResult = 0,
    /// <summary>
    ///传送
    /// </summary>
    [pbr::OriginalName("Transfer")] Transfer = 1,
    /// <summary>
    ///激活机制
    /// </summary>
    [pbr::OriginalName("ActiveMechanism")] ActiveMechanism = 2,
    /// <summary>
    ///修改能力
    /// </summary>
    [pbr::OriginalName("ChangeAbility")] ChangeAbility = 3,
    /// <summary>
    ///释放技能
    /// </summary>
    [pbr::OriginalName("RChangeSkill")] RchangeSkill = 4,
    [pbr::OriginalName("MaxResult")] MaxResult = 5,
  }

  public enum CellBeTriggeredType {
    /// <summary>
    ///一直存在
    /// </summary>
    [pbr::OriginalName("ExistAllTheTime")] ExistAllTheTime = 0,
    /// <summary>
    ///被触发
    /// </summary>
    [pbr::OriginalName("BeTriggered")] BeTriggered = 1,
  }

  public enum EnumTransferDirection {
    [pbr::OriginalName("Right")] Right = 0,
    [pbr::OriginalName("Down")] Down = 1,
    [pbr::OriginalName("Left")] Left = 2,
    [pbr::OriginalName("Up")] Up = 3,
  }

  /// <summary>
  ///资源类型
  /// </summary>
  public enum ResType {
    /// <summary>
    ///预设
    /// </summary>
    [pbr::OriginalName("Prefab")] Prefab = 0,
    /// <summary>
    ///GPUSkinning预设
    /// </summary>
    [pbr::OriginalName("GPUSkinningPrefab")] GpuskinningPrefab = 1,
    /// <summary>
    ///GPUEffectPrefab预设
    /// </summary>
    [pbr::OriginalName("GPUEffectPrefab")] GpueffectPrefab = 2,
    /// <summary>
    ///Effect动画状态机
    /// </summary>
    [pbr::OriginalName("EffectStatePrefab")] EffectStatePrefab = 3,
  }

  /// <summary>
  ///挂点
  /// </summary>
  public enum JoinId {
    /// <summary>
    ///右手武器--挂点
    /// </summary>
    [pbr::OriginalName("D_R_weapon")] DRWeapon = 0,
    /// <summary>
    ///左手武器--挂点
    /// </summary>
    [pbr::OriginalName("D_L_weapon")] DLWeapon = 1,
    /// <summary>
    ///背部&amp;翅膀
    /// </summary>
    [pbr::OriginalName("D_wing")] DWing = 2,
    /// <summary>
    ///脚底位置， 阴影位置锚点， 不会有高度变化
    /// </summary>
    [pbr::OriginalName("AnchorShadow")] AnchorShadow = 3,
    /// <summary>
    ///脚底位置, 
    /// </summary>
    [pbr::OriginalName("AnchorFixed")] AnchorFixed = 4,
    /// <summary>
    ///脚底位置, 会和朝向一起变化
    /// </summary>
    [pbr::OriginalName("AnchorFace")] AnchorFace = 5,
    /// <summary>
    ///头饰
    /// </summary>
    [pbr::OriginalName("D_headdress")] DHeaddress = 6,
    /// <summary>
    ///面部
    /// </summary>
    [pbr::OriginalName("D_face")] DFace = 7,
    /// <summary>
    ///右耳坠
    /// </summary>
    [pbr::OriginalName("D_R_ears")] DREars = 8,
    /// <summary>
    ///左耳坠
    /// </summary>
    [pbr::OriginalName("D_L_ears")] DLEars = 9,
    /// <summary>
    ///屁股
    /// </summary>
    [pbr::OriginalName("D_butt")] DButt = 10,
    /// <summary>
    ///[右手武器] 抓取点
    /// </summary>
    [pbr::OriginalName("WeaponR__D_weapon_grab")] WeaponRDWeaponGrab = 11,
    /// <summary>
    ///[左手武器] 抓取点
    /// </summary>
    [pbr::OriginalName("WeaponL__D_weapon_grab")] WeaponLDWeaponGrab = 12,
    /// <summary>
    /// 腰部
    /// </summary>
    [pbr::OriginalName("D_waist")] DWaist = 13,
    /// <summary>
    /// 头顶UI
    /// </summary>
    [pbr::OriginalName("D_crown")] DCrown = 14,
  }

  public enum EnumEdiorTableTag {
    [pbr::OriginalName("None")] None = 0,
    [pbr::OriginalName("SectionLst")] SectionLst = 1,
    [pbr::OriginalName("CharacterLst")] CharacterLst = 2,
    [pbr::OriginalName("RoomLst")] RoomLst = 3,
    [pbr::OriginalName("EffectStatePrefabLst")] EffectStatePrefabLst = 4,
    [pbr::OriginalName("CameraFollowLst")] CameraFollowLst = 5,
    [pbr::OriginalName("SkillLst")] SkillLst = 6,
    [pbr::OriginalName("EdiorVersion")] EdiorVersion = 7,
    [pbr::OriginalName("RoomSceneLst")] RoomSceneLst = 8,
    [pbr::OriginalName("SkillExLst")] SkillExLst = 78,
  }

  public enum EnumClipChangeType {
    /// <summary>
    ///自动切换
    /// </summary>
    [pbr::OriginalName("AutoChange")] AutoChange = 0,
    /// <summary>
    ///再次按下
    /// </summary>
    [pbr::OriginalName("AgainPress")] AgainPress = 1,
    /// <summary>
    ///按住
    /// </summary>
    [pbr::OriginalName("HoldPress")] HoldPress = 2,
    /// <summary>
    ///概率
    /// </summary>
    [pbr::OriginalName("Probability")] Probability = 3,
    /// <summary>
    ///命中目标
    /// </summary>
    [pbr::OriginalName("HitTarget")] HitTarget = 4,
    /// <summary>
    ///检查碰撞
    /// </summary>
    [pbr::OriginalName("CheckBlock")] CheckBlock = 5,
  }

  public enum ChargeType {
    /// <summary>
    /// 蓄力完自动释放
    /// </summary>
    [pbr::OriginalName("AutoCast")] AutoCast = 0,
    /// <summary>
    /// 循环直到按键抬起
    /// </summary>
    [pbr::OriginalName("LoopUntilUp")] LoopUntilUp = 1,
    /// <summary>
    /// 循环直到时间上限
    /// </summary>
    [pbr::OriginalName("LoopUntilMaxTick")] LoopUntilMaxTick = 2,
  }

  public enum ConditonLimitType {
    /// <summary>
    ///血量固定值>
    /// </summary>
    [pbr::OriginalName("HpConstMore")] HpConstMore = 0,
    /// <summary>
    ///血量百分比>
    /// </summary>
    [pbr::OriginalName("HpPercentMore")] HpPercentMore = 1,
    /// <summary>
    ///蓝量固定值>
    /// </summary>
    [pbr::OriginalName("MpConstMore")] MpConstMore = 2,
    /// <summary>
    ///蓝量百分比>
    /// </summary>
    [pbr::OriginalName("MpPercentMore")] MpPercentMore = 3,
    /// <summary>
    ///血量固定值&lt;
    /// </summary>
    [pbr::OriginalName("HpConstLess")] HpConstLess = 4,
    /// <summary>
    ///血量百分比&lt;
    /// </summary>
    [pbr::OriginalName("HpPercentLess")] HpPercentLess = 5,
    /// <summary>
    ///蓝量固定值&lt;
    /// </summary>
    [pbr::OriginalName("MpConstLess")] MpConstLess = 6,
    /// <summary>
    ///蓝量百分比&lt;
    /// </summary>
    [pbr::OriginalName("MpPercentLess")] MpPercentLess = 7,
  }

  public enum SlideDir {
    /// <summary>
    /// 右
    /// </summary>
    [pbr::OriginalName("SlideR")] SlideR = 0,
    /// <summary>
    /// 下
    /// </summary>
    [pbr::OriginalName("SlideD")] SlideD = 1,
    /// <summary>
    /// 左
    /// </summary>
    [pbr::OriginalName("SlideL")] SlideL = 2,
    /// <summary>
    /// 上
    /// </summary>
    [pbr::OriginalName("SlideU")] SlideU = 3,
  }

  public enum SkillNum {
    /// <summary>
    /// 无
    /// </summary>
    [pbr::OriginalName("NoneSkill")] NoneSkill = 0,
    /// <summary>
    /// 单个
    /// </summary>
    [pbr::OriginalName("SingleSkill")] SingleSkill = 1,
    /// <summary>
    /// 多个
    /// </summary>
    [pbr::OriginalName("MultipleSkills")] MultipleSkills = 2,
  }

  public enum EnumPressCastType {
    /// <summary>
    ///按键抬起
    /// </summary>
    [pbr::OriginalName("PressUp")] PressUp = 0,
    /// <summary>
    ///按键按下
    /// </summary>
    [pbr::OriginalName("PressDown")] PressDown = 1,
    /// <summary>
    ///自动释放
    /// </summary>
    [pbr::OriginalName("UnConditional")] UnConditional = 2,
  }

  public enum EffectEntityType {
    /// <summary>
    /// 特效自己生命周期时间
    /// </summary>
    [pbr::OriginalName("EffectTime")] EffectTime = 0,
    /// <summary>
    /// 自己配置的持续帧
    /// </summary>
    [pbr::OriginalName("GivenTime")] GivenTime = 1,
  }

  public enum EnumSpeedRelateType {
    [pbr::OriginalName("RelateAttackSpeed")] RelateAttackSpeed = 0,
    [pbr::OriginalName("RelateMoveSpeed")] RelateMoveSpeed = 1,
  }

  public enum EnumFlashMoveType {
    [pbr::OriginalName("SPEED_X")] SpeedX = 0,
    [pbr::OriginalName("SPEED_Z")] SpeedZ = 1,
    [pbr::OriginalName("MOVE_JOYSTICK")] MoveJoystick = 2,
    [pbr::OriginalName("AI_TARGET_POS")] AiTargetPos = 3,
  }

  public enum EnumTrackPosType {
    /// <summary>
    /// 逻辑坐标
    /// </summary>
    [pbr::OriginalName("Transform")] Transform = 0,
    /// <summary>
    /// 挂点
    /// </summary>
    [pbr::OriginalName("UnitJoint")] UnitJoint = 1,
  }

  public enum EnumGrabType {
    [pbr::OriginalName("EnumGrabTypeNone")] None = 0,
    /// <summary>
    /// 去抓
    /// </summary>
    [pbr::OriginalName("GoCatch")] GoCatch = 1,
    /// <summary>
    /// 抓过来
    /// </summary>
    [pbr::OriginalName("Pull")] Pull = 2,
    /// <summary>
    ///目标位置
    /// </summary>
    [pbr::OriginalName("Target")] Target = 3,
    /// <summary>
    ///速度
    /// </summary>
    [pbr::OriginalName("Speed")] Speed = 4,
  }

  public enum EnumGrabEvent {
    [pbr::OriginalName("EnumGrabStateNone")] EnumGrabStateNone = 0,
    /// <summary>
    /// 判定
    /// </summary>
    [pbr::OriginalName("Judge")] Judge = 1,
    /// <summary>
    /// 执行抓
    /// </summary>
    [pbr::OriginalName("Execute")] Execute = 2,
    /// <summary>
    /// 释放
    /// </summary>
    [pbr::OriginalName("Release")] Release = 3,
    /// <summary>
    /// 切换技能
    /// </summary>
    [pbr::OriginalName("GrabChangeSkill")] GrabChangeSkill = 4,
    /// <summary>
    /// 持续执行抓到判定结束
    /// </summary>
    [pbr::OriginalName("JudeExecute")] JudeExecute = 5,
    [pbr::OriginalName("JudgeAndExecute")] JudgeAndExecute = 6,
  }

  #endregion

  #region Messages
  /// <summary>
  ///资源数据
  /// </summary>
  public sealed partial class ResItem : pb::IMessage<ResItem> {
    private static readonly pb::MessageParser<ResItem> _parser = new pb::MessageParser<ResItem>(() => new ResItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResItem(ResItem other) : this() {
      group_ = other.group_;
      type_ = other.type_;
      path_ = other.path_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResItem Clone() {
      return new ResItem(this);
    }

    /// <summary>Field number for the "Group" field.</summary>
    public const int GroupFieldNumber = 1;
    private int group_;
    /// <summary>
    /// 资源组
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Group {
      get { return group_; }
      set {
        group_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Pbe.ResType type_ = 0;
    /// <summary>
    /// 类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.ResType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "Path" field.</summary>
    public const int PathFieldNumber = 3;
    private string path_ = "";
    /// <summary>
    /// 路径
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Group != other.Group) return false;
      if (Type != other.Type) return false;
      if (Path != other.Path) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Group != 0) hash ^= Group.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Group != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Group);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Path);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Group != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Group);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResItem other) {
      if (other == null) {
        return;
      }
      if (other.Group != 0) {
        Group = other.Group;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Group = input.ReadInt32();
            break;
          }
          case 16: {
            type_ = (global::Pbe.ResType) input.ReadEnum();
            break;
          }
          case 26: {
            Path = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///皮肤资源参数
  /// </summary>
  public sealed partial class ResGpuSkinUrlInfo : pb::IMessage<ResGpuSkinUrlInfo> {
    private static readonly pb::MessageParser<ResGpuSkinUrlInfo> _parser = new pb::MessageParser<ResGpuSkinUrlInfo>(() => new ResGpuSkinUrlInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResGpuSkinUrlInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResGpuSkinUrlInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResGpuSkinUrlInfo(ResGpuSkinUrlInfo other) : this() {
      skinName_ = other.skinName_;
      matrixName_ = other.matrixName_;
      clipNameList_ = other.clipNameList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResGpuSkinUrlInfo Clone() {
      return new ResGpuSkinUrlInfo(this);
    }

    /// <summary>Field number for the "skinName" field.</summary>
    public const int SkinNameFieldNumber = 1;
    private string skinName_ = "";
    /// <summary>
    /// 皮肤名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkinName {
      get { return skinName_; }
      set {
        skinName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "matrixName" field.</summary>
    public const int MatrixNameFieldNumber = 2;
    private string matrixName_ = "";
    /// <summary>
    /// 动画骨骼名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatrixName {
      get { return matrixName_; }
      set {
        matrixName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clipNameList" field.</summary>
    public const int ClipNameListFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_clipNameList_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> clipNameList_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 动作列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ClipNameList {
      get { return clipNameList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResGpuSkinUrlInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResGpuSkinUrlInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SkinName != other.SkinName) return false;
      if (MatrixName != other.MatrixName) return false;
      if(!clipNameList_.Equals(other.clipNameList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SkinName.Length != 0) hash ^= SkinName.GetHashCode();
      if (MatrixName.Length != 0) hash ^= MatrixName.GetHashCode();
      hash ^= clipNameList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkinName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SkinName);
      }
      if (MatrixName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MatrixName);
      }
      clipNameList_.WriteTo(output, _repeated_clipNameList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkinName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SkinName);
      }
      if (MatrixName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatrixName);
      }
      size += clipNameList_.CalculateSize(_repeated_clipNameList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResGpuSkinUrlInfo other) {
      if (other == null) {
        return;
      }
      if (other.SkinName.Length != 0) {
        SkinName = other.SkinName;
      }
      if (other.MatrixName.Length != 0) {
        MatrixName = other.MatrixName;
      }
      clipNameList_.Add(other.clipNameList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SkinName = input.ReadString();
            break;
          }
          case 18: {
            MatrixName = input.ReadString();
            break;
          }
          case 26: {
            clipNameList_.AddEntriesFrom(input, _repeated_clipNameList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///==========================================================
  /// 配置
  ///----------------------------------------------------------
  /// </summary>
  public sealed partial class EditorConfig : pb::IMessage<EditorConfig> {
    private static readonly pb::MessageParser<EditorConfig> _parser = new pb::MessageParser<EditorConfig>(() => new EditorConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EditorConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditorConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditorConfig(EditorConfig other) : this() {
      sectionLst_ = other.sectionLst_.Clone();
      characterLst_ = other.characterLst_.Clone();
      roomLst_ = other.roomLst_.Clone();
      effectStatePrefabLst_ = other.effectStatePrefabLst_.Clone();
      cameraFollowLst_ = other.cameraFollowLst_.Clone();
      skillLst_ = other.skillLst_.Clone();
      skillExtensionLst_ = other.skillExtensionLst_.Clone();
      version_ = other.version_;
      roomSceneLst_ = other.roomSceneLst_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditorConfig Clone() {
      return new EditorConfig(this);
    }

    /// <summary>Field number for the "SectionLst" field.</summary>
    public const int SectionLstFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Pbe.SectionData> _repeated_sectionLst_codec
        = pb::FieldCodec.ForMessage(10, global::Pbe.SectionData.Parser);
    private readonly pbc::RepeatedField<global::Pbe.SectionData> sectionLst_ = new pbc::RepeatedField<global::Pbe.SectionData>();
    /// <summary>
    /// 随机出的关卡地图列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.SectionData> SectionLst {
      get { return sectionLst_; }
    }

    /// <summary>Field number for the "CharacterLst" field.</summary>
    public const int CharacterLstFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Pbe.CharacterConfig> _repeated_characterLst_codec
        = pb::FieldCodec.ForMessage(18, global::Pbe.CharacterConfig.Parser);
    private readonly pbc::RepeatedField<global::Pbe.CharacterConfig> characterLst_ = new pbc::RepeatedField<global::Pbe.CharacterConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.CharacterConfig> CharacterLst {
      get { return characterLst_; }
    }

    /// <summary>Field number for the "RoomLst" field.</summary>
    public const int RoomLstFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Pbe.RoomData> _repeated_roomLst_codec
        = pb::FieldCodec.ForMessage(26, global::Pbe.RoomData.Parser);
    private readonly pbc::RepeatedField<global::Pbe.RoomData> roomLst_ = new pbc::RepeatedField<global::Pbe.RoomData>();
    /// <summary>
    /// 房间列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.RoomData> RoomLst {
      get { return roomLst_; }
    }

    /// <summary>Field number for the "EffectStatePrefabLst" field.</summary>
    public const int EffectStatePrefabLstFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Pbe.EffectStatePrefabConfig> _repeated_effectStatePrefabLst_codec
        = pb::FieldCodec.ForMessage(34, global::Pbe.EffectStatePrefabConfig.Parser);
    private readonly pbc::RepeatedField<global::Pbe.EffectStatePrefabConfig> effectStatePrefabLst_ = new pbc::RepeatedField<global::Pbe.EffectStatePrefabConfig>();
    /// <summary>
    /// 特效动作状态级配置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.EffectStatePrefabConfig> EffectStatePrefabLst {
      get { return effectStatePrefabLst_; }
    }

    /// <summary>Field number for the "CameraFollowLst" field.</summary>
    public const int CameraFollowLstFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Pbe.CameraFollowItemConfig> _repeated_cameraFollowLst_codec
        = pb::FieldCodec.ForMessage(42, global::Pbe.CameraFollowItemConfig.Parser);
    private readonly pbc::RepeatedField<global::Pbe.CameraFollowItemConfig> cameraFollowLst_ = new pbc::RepeatedField<global::Pbe.CameraFollowItemConfig>();
    /// <summary>
    /// 摄像机跟随
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.CameraFollowItemConfig> CameraFollowLst {
      get { return cameraFollowLst_; }
    }

    /// <summary>Field number for the "SkillLst" field.</summary>
    public const int SkillLstFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Pbe.SkillConfig> _repeated_skillLst_codec
        = pb::FieldCodec.ForMessage(50, global::Pbe.SkillConfig.Parser);
    private readonly pbc::RepeatedField<global::Pbe.SkillConfig> skillLst_ = new pbc::RepeatedField<global::Pbe.SkillConfig>();
    /// <summary>
    /// 技能配置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.SkillConfig> SkillLst {
      get { return skillLst_; }
    }

    /// <summary>Field number for the "SkillExtensionLst" field.</summary>
    public const int SkillExtensionLstFieldNumber = 78;
    private static readonly pb::FieldCodec<global::Pbe.SkillExtensionConfig> _repeated_skillExtensionLst_codec
        = pb::FieldCodec.ForMessage(626, global::Pbe.SkillExtensionConfig.Parser);
    private readonly pbc::RepeatedField<global::Pbe.SkillExtensionConfig> skillExtensionLst_ = new pbc::RepeatedField<global::Pbe.SkillExtensionConfig>();
    /// <summary>
    /// 技能增补配置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.SkillExtensionConfig> SkillExtensionLst {
      get { return skillExtensionLst_; }
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 7;
    private int version_;
    /// <summary>
    /// 版本号，每个作为服务器和客户端版本校验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "RoomSceneLst" field.</summary>
    public const int RoomSceneLstFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Pbe.RoomSceneData> _repeated_roomSceneLst_codec
        = pb::FieldCodec.ForMessage(66, global::Pbe.RoomSceneData.Parser);
    private readonly pbc::RepeatedField<global::Pbe.RoomSceneData> roomSceneLst_ = new pbc::RepeatedField<global::Pbe.RoomSceneData>();
    /// <summary>
    /// 房间场景信息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.RoomSceneData> RoomSceneLst {
      get { return roomSceneLst_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EditorConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EditorConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!sectionLst_.Equals(other.sectionLst_)) return false;
      if(!characterLst_.Equals(other.characterLst_)) return false;
      if(!roomLst_.Equals(other.roomLst_)) return false;
      if(!effectStatePrefabLst_.Equals(other.effectStatePrefabLst_)) return false;
      if(!cameraFollowLst_.Equals(other.cameraFollowLst_)) return false;
      if(!skillLst_.Equals(other.skillLst_)) return false;
      if(!skillExtensionLst_.Equals(other.skillExtensionLst_)) return false;
      if (Version != other.Version) return false;
      if(!roomSceneLst_.Equals(other.roomSceneLst_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= sectionLst_.GetHashCode();
      hash ^= characterLst_.GetHashCode();
      hash ^= roomLst_.GetHashCode();
      hash ^= effectStatePrefabLst_.GetHashCode();
      hash ^= cameraFollowLst_.GetHashCode();
      hash ^= skillLst_.GetHashCode();
      hash ^= skillExtensionLst_.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      hash ^= roomSceneLst_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      sectionLst_.WriteTo(output, _repeated_sectionLst_codec);
      characterLst_.WriteTo(output, _repeated_characterLst_codec);
      roomLst_.WriteTo(output, _repeated_roomLst_codec);
      effectStatePrefabLst_.WriteTo(output, _repeated_effectStatePrefabLst_codec);
      cameraFollowLst_.WriteTo(output, _repeated_cameraFollowLst_codec);
      skillLst_.WriteTo(output, _repeated_skillLst_codec);
      if (Version != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Version);
      }
      roomSceneLst_.WriteTo(output, _repeated_roomSceneLst_codec);
      skillExtensionLst_.WriteTo(output, _repeated_skillExtensionLst_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += sectionLst_.CalculateSize(_repeated_sectionLst_codec);
      size += characterLst_.CalculateSize(_repeated_characterLst_codec);
      size += roomLst_.CalculateSize(_repeated_roomLst_codec);
      size += effectStatePrefabLst_.CalculateSize(_repeated_effectStatePrefabLst_codec);
      size += cameraFollowLst_.CalculateSize(_repeated_cameraFollowLst_codec);
      size += skillLst_.CalculateSize(_repeated_skillLst_codec);
      size += skillExtensionLst_.CalculateSize(_repeated_skillExtensionLst_codec);
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      size += roomSceneLst_.CalculateSize(_repeated_roomSceneLst_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EditorConfig other) {
      if (other == null) {
        return;
      }
      sectionLst_.Add(other.sectionLst_);
      characterLst_.Add(other.characterLst_);
      roomLst_.Add(other.roomLst_);
      effectStatePrefabLst_.Add(other.effectStatePrefabLst_);
      cameraFollowLst_.Add(other.cameraFollowLst_);
      skillLst_.Add(other.skillLst_);
      skillExtensionLst_.Add(other.skillExtensionLst_);
      if (other.Version != 0) {
        Version = other.Version;
      }
      roomSceneLst_.Add(other.roomSceneLst_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            sectionLst_.AddEntriesFrom(input, _repeated_sectionLst_codec);
            break;
          }
          case 18: {
            characterLst_.AddEntriesFrom(input, _repeated_characterLst_codec);
            break;
          }
          case 26: {
            roomLst_.AddEntriesFrom(input, _repeated_roomLst_codec);
            break;
          }
          case 34: {
            effectStatePrefabLst_.AddEntriesFrom(input, _repeated_effectStatePrefabLst_codec);
            break;
          }
          case 42: {
            cameraFollowLst_.AddEntriesFrom(input, _repeated_cameraFollowLst_codec);
            break;
          }
          case 50: {
            skillLst_.AddEntriesFrom(input, _repeated_skillLst_codec);
            break;
          }
          case 56: {
            Version = input.ReadInt32();
            break;
          }
          case 66: {
            roomSceneLst_.AddEntriesFrom(input, _repeated_roomSceneLst_codec);
            break;
          }
          case 626: {
            skillExtensionLst_.AddEntriesFrom(input, _repeated_skillExtensionLst_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SectionData : pb::IMessage<SectionData> {
    private static readonly pb::MessageParser<SectionData> _parser = new pb::MessageParser<SectionData>(() => new SectionData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SectionData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SectionData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SectionData(SectionData other) : this() {
      sectionID_ = other.sectionID_;
      startRoomId_ = other.startRoomId_;
      xSize_ = other.xSize_;
      ySize_ = other.ySize_;
      vMinMap_ = other.vMinMap_.Clone();
      key_ = other.key_;
      normalIntroBgmID_ = other.normalIntroBgmID_;
      bossIntroBgmID_ = other.bossIntroBgmID_;
      abyssIntroBgmID_ = other.abyssIntroBgmID_;
      normalLoopBgmID_ = other.normalLoopBgmID_;
      bossLoopBgmID_ = other.bossLoopBgmID_;
      abyssLoopBgmID_ = other.abyssLoopBgmID_;
      normalOutroBgmID_ = other.normalOutroBgmID_;
      bossOutroBgmID_ = other.bossOutroBgmID_;
      abyssOutroBgmID_ = other.abyssOutroBgmID_;
      afterResultBgmID_ = other.afterResultBgmID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SectionData Clone() {
      return new SectionData(this);
    }

    /// <summary>Field number for the "SectionID" field.</summary>
    public const int SectionIDFieldNumber = 1;
    private int sectionID_;
    /// <summary>
    /// 关卡ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SectionID {
      get { return sectionID_; }
      set {
        sectionID_ = value;
      }
    }

    /// <summary>Field number for the "StartRoomId" field.</summary>
    public const int StartRoomIdFieldNumber = 2;
    private int startRoomId_;
    /// <summary>
    /// 起始房间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartRoomId {
      get { return startRoomId_; }
      set {
        startRoomId_ = value;
      }
    }

    /// <summary>Field number for the "XSize" field.</summary>
    public const int XSizeFieldNumber = 3;
    private int xSize_;
    /// <summary>
    /// 格子x大小
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int XSize {
      get { return xSize_; }
      set {
        xSize_ = value;
      }
    }

    /// <summary>Field number for the "YSize" field.</summary>
    public const int YSizeFieldNumber = 4;
    private int ySize_;
    /// <summary>
    /// 格子y大小  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int YSize {
      get { return ySize_; }
      set {
        ySize_ = value;
      }
    }

    /// <summary>Field number for the "VMinMap" field.</summary>
    public const int VMinMapFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Pbe.MiniMap> _repeated_vMinMap_codec
        = pb::FieldCodec.ForMessage(42, global::Pbe.MiniMap.Parser);
    private readonly pbc::RepeatedField<global::Pbe.MiniMap> vMinMap_ = new pbc::RepeatedField<global::Pbe.MiniMap>();
    /// <summary>
    /// 地图
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.MiniMap> VMinMap {
      get { return vMinMap_; }
    }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 6;
    private int key_;
    /// <summary>
    /// 转换map的key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "NormalIntroBgmID" field.</summary>
    public const int NormalIntroBgmIDFieldNumber = 7;
    private int normalIntroBgmID_;
    /// <summary>
    /// 普通房间 进入BGM ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NormalIntroBgmID {
      get { return normalIntroBgmID_; }
      set {
        normalIntroBgmID_ = value;
      }
    }

    /// <summary>Field number for the "BossIntroBgmID" field.</summary>
    public const int BossIntroBgmIDFieldNumber = 8;
    private int bossIntroBgmID_;
    /// <summary>
    /// Boss房间 进入BGM ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BossIntroBgmID {
      get { return bossIntroBgmID_; }
      set {
        bossIntroBgmID_ = value;
      }
    }

    /// <summary>Field number for the "AbyssIntroBgmID" field.</summary>
    public const int AbyssIntroBgmIDFieldNumber = 9;
    private int abyssIntroBgmID_;
    /// <summary>
    /// 深渊房间 进入BGM ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AbyssIntroBgmID {
      get { return abyssIntroBgmID_; }
      set {
        abyssIntroBgmID_ = value;
      }
    }

    /// <summary>Field number for the "NormalLoopBgmID" field.</summary>
    public const int NormalLoopBgmIDFieldNumber = 10;
    private int normalLoopBgmID_;
    /// <summary>
    /// 普通房间 循环BGM ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NormalLoopBgmID {
      get { return normalLoopBgmID_; }
      set {
        normalLoopBgmID_ = value;
      }
    }

    /// <summary>Field number for the "BossLoopBgmID" field.</summary>
    public const int BossLoopBgmIDFieldNumber = 11;
    private int bossLoopBgmID_;
    /// <summary>
    /// Boss房间 循环BGM ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BossLoopBgmID {
      get { return bossLoopBgmID_; }
      set {
        bossLoopBgmID_ = value;
      }
    }

    /// <summary>Field number for the "AbyssLoopBgmID" field.</summary>
    public const int AbyssLoopBgmIDFieldNumber = 12;
    private int abyssLoopBgmID_;
    /// <summary>
    /// 深渊房间 循环BGM ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AbyssLoopBgmID {
      get { return abyssLoopBgmID_; }
      set {
        abyssLoopBgmID_ = value;
      }
    }

    /// <summary>Field number for the "NormalOutroBgmID" field.</summary>
    public const int NormalOutroBgmIDFieldNumber = 13;
    private int normalOutroBgmID_;
    /// <summary>
    /// 普通房间 结束BGM ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NormalOutroBgmID {
      get { return normalOutroBgmID_; }
      set {
        normalOutroBgmID_ = value;
      }
    }

    /// <summary>Field number for the "BossOutroBgmID" field.</summary>
    public const int BossOutroBgmIDFieldNumber = 14;
    private int bossOutroBgmID_;
    /// <summary>
    /// Boss房间 结束BGM ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BossOutroBgmID {
      get { return bossOutroBgmID_; }
      set {
        bossOutroBgmID_ = value;
      }
    }

    /// <summary>Field number for the "AbyssOutroBgmID" field.</summary>
    public const int AbyssOutroBgmIDFieldNumber = 15;
    private int abyssOutroBgmID_;
    /// <summary>
    /// 深渊房间 结束BGM ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AbyssOutroBgmID {
      get { return abyssOutroBgmID_; }
      set {
        abyssOutroBgmID_ = value;
      }
    }

    /// <summary>Field number for the "AfterResultBgmID" field.</summary>
    public const int AfterResultBgmIDFieldNumber = 16;
    private int afterResultBgmID_;
    /// <summary>
    /// 结算之后 BGM ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AfterResultBgmID {
      get { return afterResultBgmID_; }
      set {
        afterResultBgmID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SectionData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SectionData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SectionID != other.SectionID) return false;
      if (StartRoomId != other.StartRoomId) return false;
      if (XSize != other.XSize) return false;
      if (YSize != other.YSize) return false;
      if(!vMinMap_.Equals(other.vMinMap_)) return false;
      if (Key != other.Key) return false;
      if (NormalIntroBgmID != other.NormalIntroBgmID) return false;
      if (BossIntroBgmID != other.BossIntroBgmID) return false;
      if (AbyssIntroBgmID != other.AbyssIntroBgmID) return false;
      if (NormalLoopBgmID != other.NormalLoopBgmID) return false;
      if (BossLoopBgmID != other.BossLoopBgmID) return false;
      if (AbyssLoopBgmID != other.AbyssLoopBgmID) return false;
      if (NormalOutroBgmID != other.NormalOutroBgmID) return false;
      if (BossOutroBgmID != other.BossOutroBgmID) return false;
      if (AbyssOutroBgmID != other.AbyssOutroBgmID) return false;
      if (AfterResultBgmID != other.AfterResultBgmID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SectionID != 0) hash ^= SectionID.GetHashCode();
      if (StartRoomId != 0) hash ^= StartRoomId.GetHashCode();
      if (XSize != 0) hash ^= XSize.GetHashCode();
      if (YSize != 0) hash ^= YSize.GetHashCode();
      hash ^= vMinMap_.GetHashCode();
      if (Key != 0) hash ^= Key.GetHashCode();
      if (NormalIntroBgmID != 0) hash ^= NormalIntroBgmID.GetHashCode();
      if (BossIntroBgmID != 0) hash ^= BossIntroBgmID.GetHashCode();
      if (AbyssIntroBgmID != 0) hash ^= AbyssIntroBgmID.GetHashCode();
      if (NormalLoopBgmID != 0) hash ^= NormalLoopBgmID.GetHashCode();
      if (BossLoopBgmID != 0) hash ^= BossLoopBgmID.GetHashCode();
      if (AbyssLoopBgmID != 0) hash ^= AbyssLoopBgmID.GetHashCode();
      if (NormalOutroBgmID != 0) hash ^= NormalOutroBgmID.GetHashCode();
      if (BossOutroBgmID != 0) hash ^= BossOutroBgmID.GetHashCode();
      if (AbyssOutroBgmID != 0) hash ^= AbyssOutroBgmID.GetHashCode();
      if (AfterResultBgmID != 0) hash ^= AfterResultBgmID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SectionID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SectionID);
      }
      if (StartRoomId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(StartRoomId);
      }
      if (XSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(XSize);
      }
      if (YSize != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(YSize);
      }
      vMinMap_.WriteTo(output, _repeated_vMinMap_codec);
      if (Key != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Key);
      }
      if (NormalIntroBgmID != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(NormalIntroBgmID);
      }
      if (BossIntroBgmID != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(BossIntroBgmID);
      }
      if (AbyssIntroBgmID != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(AbyssIntroBgmID);
      }
      if (NormalLoopBgmID != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(NormalLoopBgmID);
      }
      if (BossLoopBgmID != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(BossLoopBgmID);
      }
      if (AbyssLoopBgmID != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(AbyssLoopBgmID);
      }
      if (NormalOutroBgmID != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(NormalOutroBgmID);
      }
      if (BossOutroBgmID != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(BossOutroBgmID);
      }
      if (AbyssOutroBgmID != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(AbyssOutroBgmID);
      }
      if (AfterResultBgmID != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(AfterResultBgmID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SectionID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SectionID);
      }
      if (StartRoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartRoomId);
      }
      if (XSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(XSize);
      }
      if (YSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(YSize);
      }
      size += vMinMap_.CalculateSize(_repeated_vMinMap_codec);
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key);
      }
      if (NormalIntroBgmID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NormalIntroBgmID);
      }
      if (BossIntroBgmID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BossIntroBgmID);
      }
      if (AbyssIntroBgmID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AbyssIntroBgmID);
      }
      if (NormalLoopBgmID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NormalLoopBgmID);
      }
      if (BossLoopBgmID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BossLoopBgmID);
      }
      if (AbyssLoopBgmID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AbyssLoopBgmID);
      }
      if (NormalOutroBgmID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NormalOutroBgmID);
      }
      if (BossOutroBgmID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BossOutroBgmID);
      }
      if (AbyssOutroBgmID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AbyssOutroBgmID);
      }
      if (AfterResultBgmID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AfterResultBgmID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SectionData other) {
      if (other == null) {
        return;
      }
      if (other.SectionID != 0) {
        SectionID = other.SectionID;
      }
      if (other.StartRoomId != 0) {
        StartRoomId = other.StartRoomId;
      }
      if (other.XSize != 0) {
        XSize = other.XSize;
      }
      if (other.YSize != 0) {
        YSize = other.YSize;
      }
      vMinMap_.Add(other.vMinMap_);
      if (other.Key != 0) {
        Key = other.Key;
      }
      if (other.NormalIntroBgmID != 0) {
        NormalIntroBgmID = other.NormalIntroBgmID;
      }
      if (other.BossIntroBgmID != 0) {
        BossIntroBgmID = other.BossIntroBgmID;
      }
      if (other.AbyssIntroBgmID != 0) {
        AbyssIntroBgmID = other.AbyssIntroBgmID;
      }
      if (other.NormalLoopBgmID != 0) {
        NormalLoopBgmID = other.NormalLoopBgmID;
      }
      if (other.BossLoopBgmID != 0) {
        BossLoopBgmID = other.BossLoopBgmID;
      }
      if (other.AbyssLoopBgmID != 0) {
        AbyssLoopBgmID = other.AbyssLoopBgmID;
      }
      if (other.NormalOutroBgmID != 0) {
        NormalOutroBgmID = other.NormalOutroBgmID;
      }
      if (other.BossOutroBgmID != 0) {
        BossOutroBgmID = other.BossOutroBgmID;
      }
      if (other.AbyssOutroBgmID != 0) {
        AbyssOutroBgmID = other.AbyssOutroBgmID;
      }
      if (other.AfterResultBgmID != 0) {
        AfterResultBgmID = other.AfterResultBgmID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SectionID = input.ReadInt32();
            break;
          }
          case 16: {
            StartRoomId = input.ReadInt32();
            break;
          }
          case 24: {
            XSize = input.ReadInt32();
            break;
          }
          case 32: {
            YSize = input.ReadInt32();
            break;
          }
          case 42: {
            vMinMap_.AddEntriesFrom(input, _repeated_vMinMap_codec);
            break;
          }
          case 48: {
            Key = input.ReadInt32();
            break;
          }
          case 56: {
            NormalIntroBgmID = input.ReadInt32();
            break;
          }
          case 64: {
            BossIntroBgmID = input.ReadInt32();
            break;
          }
          case 72: {
            AbyssIntroBgmID = input.ReadInt32();
            break;
          }
          case 80: {
            NormalLoopBgmID = input.ReadInt32();
            break;
          }
          case 88: {
            BossLoopBgmID = input.ReadInt32();
            break;
          }
          case 96: {
            AbyssLoopBgmID = input.ReadInt32();
            break;
          }
          case 104: {
            NormalOutroBgmID = input.ReadInt32();
            break;
          }
          case 112: {
            BossOutroBgmID = input.ReadInt32();
            break;
          }
          case 120: {
            AbyssOutroBgmID = input.ReadInt32();
            break;
          }
          case 128: {
            AfterResultBgmID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SkillExtensionConfig : pb::IMessage<SkillExtensionConfig> {
    private static readonly pb::MessageParser<SkillExtensionConfig> _parser = new pb::MessageParser<SkillExtensionConfig>(() => new SkillExtensionConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillExtensionConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillExtensionConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillExtensionConfig(SkillExtensionConfig other) : this() {
      key_ = other.key_;
      heroIDs_ = other.heroIDs_.Clone();
      skills_ = other.skills_.Clone();
      weapons_ = other.weapons_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillExtensionConfig Clone() {
      return new SkillExtensionConfig(this);
    }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 1;
    private int key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "HeroIDs" field.</summary>
    public const int HeroIDsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_heroIDs_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> heroIDs_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HeroIDs {
      get { return heroIDs_; }
    }

    /// <summary>Field number for the "Skills" field.</summary>
    public const int SkillsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_skills_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> skills_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Skills {
      get { return skills_; }
    }

    /// <summary>Field number for the "Weapons" field.</summary>
    public const int WeaponsFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_weapons_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> weapons_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Weapons {
      get { return weapons_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillExtensionConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillExtensionConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if(!heroIDs_.Equals(other.heroIDs_)) return false;
      if(!skills_.Equals(other.skills_)) return false;
      if(!weapons_.Equals(other.weapons_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key != 0) hash ^= Key.GetHashCode();
      hash ^= heroIDs_.GetHashCode();
      hash ^= skills_.GetHashCode();
      hash ^= weapons_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Key);
      }
      heroIDs_.WriteTo(output, _repeated_heroIDs_codec);
      skills_.WriteTo(output, _repeated_skills_codec);
      weapons_.WriteTo(output, _repeated_weapons_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key);
      }
      size += heroIDs_.CalculateSize(_repeated_heroIDs_codec);
      size += skills_.CalculateSize(_repeated_skills_codec);
      size += weapons_.CalculateSize(_repeated_weapons_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillExtensionConfig other) {
      if (other == null) {
        return;
      }
      if (other.Key != 0) {
        Key = other.Key;
      }
      heroIDs_.Add(other.heroIDs_);
      skills_.Add(other.skills_);
      weapons_.Add(other.weapons_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Key = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            heroIDs_.AddEntriesFrom(input, _repeated_heroIDs_codec);
            break;
          }
          case 26:
          case 24: {
            skills_.AddEntriesFrom(input, _repeated_skills_codec);
            break;
          }
          case 34:
          case 32: {
            weapons_.AddEntriesFrom(input, _repeated_weapons_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///小地图-地图连接模式
  /// </summary>
  public sealed partial class MiniMap : pb::IMessage<MiniMap> {
    private static readonly pb::MessageParser<MiniMap> _parser = new pb::MessageParser<MiniMap>(() => new MiniMap());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MiniMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniMap(MiniMap other) : this() {
      xPos_ = other.xPos_;
      yPos_ = other.yPos_;
      roomID_ = other.roomID_;
      roomType_ = other.roomType_;
      tPLst_ = other.tPLst_.Clone();
      roomOffset_ = other.roomOffset_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniMap Clone() {
      return new MiniMap(this);
    }

    /// <summary>Field number for the "XPos" field.</summary>
    public const int XPosFieldNumber = 1;
    private int xPos_;
    /// <summary>
    /// 格子x
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int XPos {
      get { return xPos_; }
      set {
        xPos_ = value;
      }
    }

    /// <summary>Field number for the "YPos" field.</summary>
    public const int YPosFieldNumber = 2;
    private int yPos_;
    /// <summary>
    /// 格子y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int YPos {
      get { return yPos_; }
      set {
        yPos_ = value;
      }
    }

    /// <summary>Field number for the "RoomID" field.</summary>
    public const int RoomIDFieldNumber = 3;
    private int roomID_;
    /// <summary>
    /// 房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "RoomType" field.</summary>
    public const int RoomTypeFieldNumber = 4;
    private global::Pbe.RoomType roomType_ = 0;
    /// <summary>
    /// 房间类型 起始、Boss、深渊
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.RoomType RoomType {
      get { return roomType_; }
      set {
        roomType_ = value;
      }
    }

    /// <summary>Field number for the "TPLst" field.</summary>
    public const int TPLstFieldNumber = 5;
    private static readonly pb::FieldCodec<bool> _repeated_tPLst_codec
        = pb::FieldCodec.ForBool(42);
    private readonly pbc::RepeatedField<bool> tPLst_ = new pbc::RepeatedField<bool>();
    /// <summary>
    /// 传送信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> TPLst {
      get { return tPLst_; }
    }

    /// <summary>Field number for the "RoomOffset" field.</summary>
    public const int RoomOffsetFieldNumber = 6;
    private float roomOffset_;
    /// <summary>
    /// 房间偏移
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RoomOffset {
      get { return roomOffset_; }
      set {
        roomOffset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MiniMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MiniMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (XPos != other.XPos) return false;
      if (YPos != other.YPos) return false;
      if (RoomID != other.RoomID) return false;
      if (RoomType != other.RoomType) return false;
      if(!tPLst_.Equals(other.tPLst_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RoomOffset, other.RoomOffset)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (XPos != 0) hash ^= XPos.GetHashCode();
      if (YPos != 0) hash ^= YPos.GetHashCode();
      if (RoomID != 0) hash ^= RoomID.GetHashCode();
      if (RoomType != 0) hash ^= RoomType.GetHashCode();
      hash ^= tPLst_.GetHashCode();
      if (RoomOffset != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RoomOffset);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (XPos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(XPos);
      }
      if (YPos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(YPos);
      }
      if (RoomID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RoomID);
      }
      if (RoomType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) RoomType);
      }
      tPLst_.WriteTo(output, _repeated_tPLst_codec);
      if (RoomOffset != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(RoomOffset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (XPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(XPos);
      }
      if (YPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(YPos);
      }
      if (RoomID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
      }
      if (RoomType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RoomType);
      }
      size += tPLst_.CalculateSize(_repeated_tPLst_codec);
      if (RoomOffset != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MiniMap other) {
      if (other == null) {
        return;
      }
      if (other.XPos != 0) {
        XPos = other.XPos;
      }
      if (other.YPos != 0) {
        YPos = other.YPos;
      }
      if (other.RoomID != 0) {
        RoomID = other.RoomID;
      }
      if (other.RoomType != 0) {
        RoomType = other.RoomType;
      }
      tPLst_.Add(other.tPLst_);
      if (other.RoomOffset != 0F) {
        RoomOffset = other.RoomOffset;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            XPos = input.ReadInt32();
            break;
          }
          case 16: {
            YPos = input.ReadInt32();
            break;
          }
          case 24: {
            RoomID = input.ReadInt32();
            break;
          }
          case 32: {
            roomType_ = (global::Pbe.RoomType) input.ReadEnum();
            break;
          }
          case 42:
          case 40: {
            tPLst_.AddEntriesFrom(input, _repeated_tPLst_codec);
            break;
          }
          case 53: {
            RoomOffset = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///房间
  /// </summary>
  public sealed partial class RoomData : pb::IMessage<RoomData> {
    private static readonly pb::MessageParser<RoomData> _parser = new pb::MessageParser<RoomData>(() => new RoomData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomData(RoomData other) : this() {
      sceneName_ = other.sceneName_;
      roomID_ = other.roomID_;
      battleMode_ = other.battleMode_;
      canMoveArea_ = other.canMoveArea_ != null ? other.canMoveArea_.Clone() : null;
      vPlayerBirthPos_ = other.vPlayerBirthPos_.Clone();
      vEnemies_ = other.vEnemies_.Clone();
      vNpcs_ = other.vNpcs_.Clone();
      vDestructible_ = other.vDestructible_.Clone();
      vTransferDoor_ = other.vTransferDoor_.Clone();
      vTriggers_ = other.vTriggers_.Clone();
      vTerrainDecorator_ = other.vTerrainDecorator_.Clone();
      vMapDecorator_ = other.vMapDecorator_.Clone();
      vTerrainIndex_ = other.vTerrainIndex_.Clone();
      key_ = other.key_;
      soundID_ = other.soundID_;
      soundIntervalTime_ = other.soundIntervalTime_;
      soundPlayProbability_ = other.soundPlayProbability_;
      cameraboundary_ = other.cameraboundary_ != null ? other.cameraboundary_.Clone() : null;
      roomMaxUID_ = other.roomMaxUID_;
      vCreateMonsterPoints_ = other.vCreateMonsterPoints_.Clone();
      vCreateRandomMonsterPoints_ = other.vCreateRandomMonsterPoints_.Clone();
      roomAI_ = other.roomAI_;
      vAbyssPoints_ = other.vAbyssPoints_.Clone();
      vAbyssCreateMonsterGroupPoints_ = other.vAbyssCreateMonsterGroupPoints_.Clone();
      vTerrainType_ = other.vTerrainType_.Clone();
      cameraOffsetX_ = other.cameraOffsetX_;
      cameraOffsetZ_ = other.cameraOffsetZ_;
      layerAnimationSpeedList_ = other.layerAnimationSpeedList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomData Clone() {
      return new RoomData(this);
    }

    /// <summary>Field number for the "SceneName" field.</summary>
    public const int SceneNameFieldNumber = 1;
    private string sceneName_ = "";
    /// <summary>
    /// 场景资源
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SceneName {
      get { return sceneName_; }
      set {
        sceneName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RoomID" field.</summary>
    public const int RoomIDFieldNumber = 2;
    private int roomID_;
    /// <summary>
    /// 房间id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "BattleMode" field.</summary>
    public const int BattleModeFieldNumber = 3;
    private int battleMode_;
    /// <summary>
    /// 战斗模式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleMode {
      get { return battleMode_; }
      set {
        battleMode_ = value;
      }
    }

    /// <summary>Field number for the "CanMoveArea" field.</summary>
    public const int CanMoveAreaFieldNumber = 4;
    private global::Pbe.SceneAreaRect canMoveArea_;
    /// <summary>
    /// 场景可移动区域
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.SceneAreaRect CanMoveArea {
      get { return canMoveArea_; }
      set {
        canMoveArea_ = value;
      }
    }

    /// <summary>Field number for the "VPlayerBirthPos" field.</summary>
    public const int VPlayerBirthPosFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Pbe.PlayerBirthPosition> _repeated_vPlayerBirthPos_codec
        = pb::FieldCodec.ForMessage(42, global::Pbe.PlayerBirthPosition.Parser);
    private readonly pbc::RepeatedField<global::Pbe.PlayerBirthPosition> vPlayerBirthPos_ = new pbc::RepeatedField<global::Pbe.PlayerBirthPosition>();
    /// <summary>
    /// 玩家出生点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.PlayerBirthPosition> VPlayerBirthPos {
      get { return vPlayerBirthPos_; }
    }

    /// <summary>Field number for the "VEnemies" field.</summary>
    public const int VEnemiesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Pbe.CellEnemy> _repeated_vEnemies_codec
        = pb::FieldCodec.ForMessage(50, global::Pbe.CellEnemy.Parser);
    private readonly pbc::RepeatedField<global::Pbe.CellEnemy> vEnemies_ = new pbc::RepeatedField<global::Pbe.CellEnemy>();
    /// <summary>
    /// 敌兵
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.CellEnemy> VEnemies {
      get { return vEnemies_; }
    }

    /// <summary>Field number for the "VNpcs" field.</summary>
    public const int VNpcsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Pbe.CellNPC> _repeated_vNpcs_codec
        = pb::FieldCodec.ForMessage(58, global::Pbe.CellNPC.Parser);
    private readonly pbc::RepeatedField<global::Pbe.CellNPC> vNpcs_ = new pbc::RepeatedField<global::Pbe.CellNPC>();
    /// <summary>
    /// NPC
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.CellNPC> VNpcs {
      get { return vNpcs_; }
    }

    /// <summary>Field number for the "VDestructible" field.</summary>
    public const int VDestructibleFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Pbe.CellDestructible> _repeated_vDestructible_codec
        = pb::FieldCodec.ForMessage(66, global::Pbe.CellDestructible.Parser);
    private readonly pbc::RepeatedField<global::Pbe.CellDestructible> vDestructible_ = new pbc::RepeatedField<global::Pbe.CellDestructible>();
    /// <summary>
    /// 可破坏物
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.CellDestructible> VDestructible {
      get { return vDestructible_; }
    }

    /// <summary>Field number for the "VTransferDoor" field.</summary>
    public const int VTransferDoorFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Pbe.CellTransferDoor> _repeated_vTransferDoor_codec
        = pb::FieldCodec.ForMessage(74, global::Pbe.CellTransferDoor.Parser);
    private readonly pbc::RepeatedField<global::Pbe.CellTransferDoor> vTransferDoor_ = new pbc::RepeatedField<global::Pbe.CellTransferDoor>();
    /// <summary>
    /// 传送门
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.CellTransferDoor> VTransferDoor {
      get { return vTransferDoor_; }
    }

    /// <summary>Field number for the "VTriggers" field.</summary>
    public const int VTriggersFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Pbe.CellTrigger> _repeated_vTriggers_codec
        = pb::FieldCodec.ForMessage(82, global::Pbe.CellTrigger.Parser);
    private readonly pbc::RepeatedField<global::Pbe.CellTrigger> vTriggers_ = new pbc::RepeatedField<global::Pbe.CellTrigger>();
    /// <summary>
    /// 触发器
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.CellTrigger> VTriggers {
      get { return vTriggers_; }
    }

    /// <summary>Field number for the "VTerrainDecorator" field.</summary>
    public const int VTerrainDecoratorFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Pbe.TerrainDecorator> _repeated_vTerrainDecorator_codec
        = pb::FieldCodec.ForMessage(90, global::Pbe.TerrainDecorator.Parser);
    private readonly pbc::RepeatedField<global::Pbe.TerrainDecorator> vTerrainDecorator_ = new pbc::RepeatedField<global::Pbe.TerrainDecorator>();
    /// <summary>
    /// 地表装饰物
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.TerrainDecorator> VTerrainDecorator {
      get { return vTerrainDecorator_; }
    }

    /// <summary>Field number for the "VMapDecorator" field.</summary>
    public const int VMapDecoratorFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Pbe.MapDecorator> _repeated_vMapDecorator_codec
        = pb::FieldCodec.ForMessage(98, global::Pbe.MapDecorator.Parser);
    private readonly pbc::RepeatedField<global::Pbe.MapDecorator> vMapDecorator_ = new pbc::RepeatedField<global::Pbe.MapDecorator>();
    /// <summary>
    /// 地图装饰物
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.MapDecorator> VMapDecorator {
      get { return vMapDecorator_; }
    }

    /// <summary>Field number for the "VTerrainIndex" field.</summary>
    public const int VTerrainIndexFieldNumber = 13;
    private static readonly pb::FieldCodec<int> _repeated_vTerrainIndex_codec
        = pb::FieldCodec.ForInt32(106);
    private readonly pbc::RepeatedField<int> vTerrainIndex_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 地形层索引
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> VTerrainIndex {
      get { return vTerrainIndex_; }
    }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 14;
    private int key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "SoundID" field.</summary>
    public const int SoundIDFieldNumber = 15;
    private int soundID_;
    /// <summary>
    ///环境音效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SoundID {
      get { return soundID_; }
      set {
        soundID_ = value;
      }
    }

    /// <summary>Field number for the "SoundIntervalTime" field.</summary>
    public const int SoundIntervalTimeFieldNumber = 16;
    private float soundIntervalTime_;
    /// <summary>
    ///播放间隔时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SoundIntervalTime {
      get { return soundIntervalTime_; }
      set {
        soundIntervalTime_ = value;
      }
    }

    /// <summary>Field number for the "SoundPlayProbability" field.</summary>
    public const int SoundPlayProbabilityFieldNumber = 17;
    private int soundPlayProbability_;
    /// <summary>
    ///播放概率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SoundPlayProbability {
      get { return soundPlayProbability_; }
      set {
        soundPlayProbability_ = value;
      }
    }

    /// <summary>Field number for the "Cameraboundary" field.</summary>
    public const int CameraboundaryFieldNumber = 18;
    private global::Pbe.CameraboundaryRect cameraboundary_;
    /// <summary>
    ///摄像机边界
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.CameraboundaryRect Cameraboundary {
      get { return cameraboundary_; }
      set {
        cameraboundary_ = value;
      }
    }

    /// <summary>Field number for the "RoomMaxUID" field.</summary>
    public const int RoomMaxUIDFieldNumber = 19;
    private int roomMaxUID_;
    /// <summary>
    ///房间内最大UID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomMaxUID {
      get { return roomMaxUID_; }
      set {
        roomMaxUID_ = value;
      }
    }

    /// <summary>Field number for the "VCreateMonsterPoints" field.</summary>
    public const int VCreateMonsterPointsFieldNumber = 20;
    private static readonly pb::FieldCodec<global::Pbe.CellCreateMonsterPoint> _repeated_vCreateMonsterPoints_codec
        = pb::FieldCodec.ForMessage(162, global::Pbe.CellCreateMonsterPoint.Parser);
    private readonly pbc::RepeatedField<global::Pbe.CellCreateMonsterPoint> vCreateMonsterPoints_ = new pbc::RepeatedField<global::Pbe.CellCreateMonsterPoint>();
    /// <summary>
    ///刷怪点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.CellCreateMonsterPoint> VCreateMonsterPoints {
      get { return vCreateMonsterPoints_; }
    }

    /// <summary>Field number for the "VCreateRandomMonsterPoints" field.</summary>
    public const int VCreateRandomMonsterPointsFieldNumber = 21;
    private static readonly pb::FieldCodec<global::Pbe.CellCreateRandomMonsterPoint> _repeated_vCreateRandomMonsterPoints_codec
        = pb::FieldCodec.ForMessage(170, global::Pbe.CellCreateRandomMonsterPoint.Parser);
    private readonly pbc::RepeatedField<global::Pbe.CellCreateRandomMonsterPoint> vCreateRandomMonsterPoints_ = new pbc::RepeatedField<global::Pbe.CellCreateRandomMonsterPoint>();
    /// <summary>
    ///随机刷怪点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.CellCreateRandomMonsterPoint> VCreateRandomMonsterPoints {
      get { return vCreateRandomMonsterPoints_; }
    }

    /// <summary>Field number for the "RoomAI" field.</summary>
    public const int RoomAIFieldNumber = 22;
    private int roomAI_;
    /// <summary>
    ///房间AI
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomAI {
      get { return roomAI_; }
      set {
        roomAI_ = value;
      }
    }

    /// <summary>Field number for the "VAbyssPoints" field.</summary>
    public const int VAbyssPointsFieldNumber = 23;
    private static readonly pb::FieldCodec<global::Pbe.CellAbyssPoint> _repeated_vAbyssPoints_codec
        = pb::FieldCodec.ForMessage(186, global::Pbe.CellAbyssPoint.Parser);
    private readonly pbc::RepeatedField<global::Pbe.CellAbyssPoint> vAbyssPoints_ = new pbc::RepeatedField<global::Pbe.CellAbyssPoint>();
    /// <summary>
    ///深渊柱刷新点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.CellAbyssPoint> VAbyssPoints {
      get { return vAbyssPoints_; }
    }

    /// <summary>Field number for the "VAbyssCreateMonsterGroupPoints" field.</summary>
    public const int VAbyssCreateMonsterGroupPointsFieldNumber = 24;
    private static readonly pb::FieldCodec<global::Pbe.CellAbyssCreateMonsterGroupPoint> _repeated_vAbyssCreateMonsterGroupPoints_codec
        = pb::FieldCodec.ForMessage(194, global::Pbe.CellAbyssCreateMonsterGroupPoint.Parser);
    private readonly pbc::RepeatedField<global::Pbe.CellAbyssCreateMonsterGroupPoint> vAbyssCreateMonsterGroupPoints_ = new pbc::RepeatedField<global::Pbe.CellAbyssCreateMonsterGroupPoint>();
    /// <summary>
    ///深渊柱刷新怪物组中心点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.CellAbyssCreateMonsterGroupPoint> VAbyssCreateMonsterGroupPoints {
      get { return vAbyssCreateMonsterGroupPoints_; }
    }

    /// <summary>Field number for the "VTerrainType" field.</summary>
    public const int VTerrainTypeFieldNumber = 25;
    private static readonly pb::FieldCodec<int> _repeated_vTerrainType_codec
        = pb::FieldCodec.ForInt32(202);
    private readonly pbc::RepeatedField<int> vTerrainType_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 地形层数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> VTerrainType {
      get { return vTerrainType_; }
    }

    /// <summary>Field number for the "CameraOffsetX" field.</summary>
    public const int CameraOffsetXFieldNumber = 26;
    private float cameraOffsetX_;
    /// <summary>
    ///摄像机偏移X
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CameraOffsetX {
      get { return cameraOffsetX_; }
      set {
        cameraOffsetX_ = value;
      }
    }

    /// <summary>Field number for the "CameraOffsetZ" field.</summary>
    public const int CameraOffsetZFieldNumber = 27;
    private float cameraOffsetZ_;
    /// <summary>
    ///摄像机偏移Z
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CameraOffsetZ {
      get { return cameraOffsetZ_; }
      set {
        cameraOffsetZ_ = value;
      }
    }

    /// <summary>Field number for the "LayerAnimationSpeedList" field.</summary>
    public const int LayerAnimationSpeedListFieldNumber = 28;
    private static readonly pb::FieldCodec<float> _repeated_layerAnimationSpeedList_codec
        = pb::FieldCodec.ForFloat(226);
    private readonly pbc::RepeatedField<float> layerAnimationSpeedList_ = new pbc::RepeatedField<float>();
    /// <summary>
    ///层级移动速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> LayerAnimationSpeedList {
      get { return layerAnimationSpeedList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SceneName != other.SceneName) return false;
      if (RoomID != other.RoomID) return false;
      if (BattleMode != other.BattleMode) return false;
      if (!object.Equals(CanMoveArea, other.CanMoveArea)) return false;
      if(!vPlayerBirthPos_.Equals(other.vPlayerBirthPos_)) return false;
      if(!vEnemies_.Equals(other.vEnemies_)) return false;
      if(!vNpcs_.Equals(other.vNpcs_)) return false;
      if(!vDestructible_.Equals(other.vDestructible_)) return false;
      if(!vTransferDoor_.Equals(other.vTransferDoor_)) return false;
      if(!vTriggers_.Equals(other.vTriggers_)) return false;
      if(!vTerrainDecorator_.Equals(other.vTerrainDecorator_)) return false;
      if(!vMapDecorator_.Equals(other.vMapDecorator_)) return false;
      if(!vTerrainIndex_.Equals(other.vTerrainIndex_)) return false;
      if (Key != other.Key) return false;
      if (SoundID != other.SoundID) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SoundIntervalTime, other.SoundIntervalTime)) return false;
      if (SoundPlayProbability != other.SoundPlayProbability) return false;
      if (!object.Equals(Cameraboundary, other.Cameraboundary)) return false;
      if (RoomMaxUID != other.RoomMaxUID) return false;
      if(!vCreateMonsterPoints_.Equals(other.vCreateMonsterPoints_)) return false;
      if(!vCreateRandomMonsterPoints_.Equals(other.vCreateRandomMonsterPoints_)) return false;
      if (RoomAI != other.RoomAI) return false;
      if(!vAbyssPoints_.Equals(other.vAbyssPoints_)) return false;
      if(!vAbyssCreateMonsterGroupPoints_.Equals(other.vAbyssCreateMonsterGroupPoints_)) return false;
      if(!vTerrainType_.Equals(other.vTerrainType_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CameraOffsetX, other.CameraOffsetX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CameraOffsetZ, other.CameraOffsetZ)) return false;
      if(!layerAnimationSpeedList_.Equals(other.layerAnimationSpeedList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SceneName.Length != 0) hash ^= SceneName.GetHashCode();
      if (RoomID != 0) hash ^= RoomID.GetHashCode();
      if (BattleMode != 0) hash ^= BattleMode.GetHashCode();
      if (canMoveArea_ != null) hash ^= CanMoveArea.GetHashCode();
      hash ^= vPlayerBirthPos_.GetHashCode();
      hash ^= vEnemies_.GetHashCode();
      hash ^= vNpcs_.GetHashCode();
      hash ^= vDestructible_.GetHashCode();
      hash ^= vTransferDoor_.GetHashCode();
      hash ^= vTriggers_.GetHashCode();
      hash ^= vTerrainDecorator_.GetHashCode();
      hash ^= vMapDecorator_.GetHashCode();
      hash ^= vTerrainIndex_.GetHashCode();
      if (Key != 0) hash ^= Key.GetHashCode();
      if (SoundID != 0) hash ^= SoundID.GetHashCode();
      if (SoundIntervalTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SoundIntervalTime);
      if (SoundPlayProbability != 0) hash ^= SoundPlayProbability.GetHashCode();
      if (cameraboundary_ != null) hash ^= Cameraboundary.GetHashCode();
      if (RoomMaxUID != 0) hash ^= RoomMaxUID.GetHashCode();
      hash ^= vCreateMonsterPoints_.GetHashCode();
      hash ^= vCreateRandomMonsterPoints_.GetHashCode();
      if (RoomAI != 0) hash ^= RoomAI.GetHashCode();
      hash ^= vAbyssPoints_.GetHashCode();
      hash ^= vAbyssCreateMonsterGroupPoints_.GetHashCode();
      hash ^= vTerrainType_.GetHashCode();
      if (CameraOffsetX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CameraOffsetX);
      if (CameraOffsetZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CameraOffsetZ);
      hash ^= layerAnimationSpeedList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SceneName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SceneName);
      }
      if (RoomID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomID);
      }
      if (BattleMode != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BattleMode);
      }
      if (canMoveArea_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CanMoveArea);
      }
      vPlayerBirthPos_.WriteTo(output, _repeated_vPlayerBirthPos_codec);
      vEnemies_.WriteTo(output, _repeated_vEnemies_codec);
      vNpcs_.WriteTo(output, _repeated_vNpcs_codec);
      vDestructible_.WriteTo(output, _repeated_vDestructible_codec);
      vTransferDoor_.WriteTo(output, _repeated_vTransferDoor_codec);
      vTriggers_.WriteTo(output, _repeated_vTriggers_codec);
      vTerrainDecorator_.WriteTo(output, _repeated_vTerrainDecorator_codec);
      vMapDecorator_.WriteTo(output, _repeated_vMapDecorator_codec);
      vTerrainIndex_.WriteTo(output, _repeated_vTerrainIndex_codec);
      if (Key != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Key);
      }
      if (SoundID != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(SoundID);
      }
      if (SoundIntervalTime != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(SoundIntervalTime);
      }
      if (SoundPlayProbability != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(SoundPlayProbability);
      }
      if (cameraboundary_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(Cameraboundary);
      }
      if (RoomMaxUID != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(RoomMaxUID);
      }
      vCreateMonsterPoints_.WriteTo(output, _repeated_vCreateMonsterPoints_codec);
      vCreateRandomMonsterPoints_.WriteTo(output, _repeated_vCreateRandomMonsterPoints_codec);
      if (RoomAI != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(RoomAI);
      }
      vAbyssPoints_.WriteTo(output, _repeated_vAbyssPoints_codec);
      vAbyssCreateMonsterGroupPoints_.WriteTo(output, _repeated_vAbyssCreateMonsterGroupPoints_codec);
      vTerrainType_.WriteTo(output, _repeated_vTerrainType_codec);
      if (CameraOffsetX != 0F) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(CameraOffsetX);
      }
      if (CameraOffsetZ != 0F) {
        output.WriteRawTag(221, 1);
        output.WriteFloat(CameraOffsetZ);
      }
      layerAnimationSpeedList_.WriteTo(output, _repeated_layerAnimationSpeedList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SceneName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SceneName);
      }
      if (RoomID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
      }
      if (BattleMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleMode);
      }
      if (canMoveArea_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CanMoveArea);
      }
      size += vPlayerBirthPos_.CalculateSize(_repeated_vPlayerBirthPos_codec);
      size += vEnemies_.CalculateSize(_repeated_vEnemies_codec);
      size += vNpcs_.CalculateSize(_repeated_vNpcs_codec);
      size += vDestructible_.CalculateSize(_repeated_vDestructible_codec);
      size += vTransferDoor_.CalculateSize(_repeated_vTransferDoor_codec);
      size += vTriggers_.CalculateSize(_repeated_vTriggers_codec);
      size += vTerrainDecorator_.CalculateSize(_repeated_vTerrainDecorator_codec);
      size += vMapDecorator_.CalculateSize(_repeated_vMapDecorator_codec);
      size += vTerrainIndex_.CalculateSize(_repeated_vTerrainIndex_codec);
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key);
      }
      if (SoundID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SoundID);
      }
      if (SoundIntervalTime != 0F) {
        size += 2 + 4;
      }
      if (SoundPlayProbability != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SoundPlayProbability);
      }
      if (cameraboundary_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Cameraboundary);
      }
      if (RoomMaxUID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RoomMaxUID);
      }
      size += vCreateMonsterPoints_.CalculateSize(_repeated_vCreateMonsterPoints_codec);
      size += vCreateRandomMonsterPoints_.CalculateSize(_repeated_vCreateRandomMonsterPoints_codec);
      if (RoomAI != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RoomAI);
      }
      size += vAbyssPoints_.CalculateSize(_repeated_vAbyssPoints_codec);
      size += vAbyssCreateMonsterGroupPoints_.CalculateSize(_repeated_vAbyssCreateMonsterGroupPoints_codec);
      size += vTerrainType_.CalculateSize(_repeated_vTerrainType_codec);
      if (CameraOffsetX != 0F) {
        size += 2 + 4;
      }
      if (CameraOffsetZ != 0F) {
        size += 2 + 4;
      }
      size += layerAnimationSpeedList_.CalculateSize(_repeated_layerAnimationSpeedList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomData other) {
      if (other == null) {
        return;
      }
      if (other.SceneName.Length != 0) {
        SceneName = other.SceneName;
      }
      if (other.RoomID != 0) {
        RoomID = other.RoomID;
      }
      if (other.BattleMode != 0) {
        BattleMode = other.BattleMode;
      }
      if (other.canMoveArea_ != null) {
        if (canMoveArea_ == null) {
          canMoveArea_ = new global::Pbe.SceneAreaRect();
        }
        CanMoveArea.MergeFrom(other.CanMoveArea);
      }
      vPlayerBirthPos_.Add(other.vPlayerBirthPos_);
      vEnemies_.Add(other.vEnemies_);
      vNpcs_.Add(other.vNpcs_);
      vDestructible_.Add(other.vDestructible_);
      vTransferDoor_.Add(other.vTransferDoor_);
      vTriggers_.Add(other.vTriggers_);
      vTerrainDecorator_.Add(other.vTerrainDecorator_);
      vMapDecorator_.Add(other.vMapDecorator_);
      vTerrainIndex_.Add(other.vTerrainIndex_);
      if (other.Key != 0) {
        Key = other.Key;
      }
      if (other.SoundID != 0) {
        SoundID = other.SoundID;
      }
      if (other.SoundIntervalTime != 0F) {
        SoundIntervalTime = other.SoundIntervalTime;
      }
      if (other.SoundPlayProbability != 0) {
        SoundPlayProbability = other.SoundPlayProbability;
      }
      if (other.cameraboundary_ != null) {
        if (cameraboundary_ == null) {
          cameraboundary_ = new global::Pbe.CameraboundaryRect();
        }
        Cameraboundary.MergeFrom(other.Cameraboundary);
      }
      if (other.RoomMaxUID != 0) {
        RoomMaxUID = other.RoomMaxUID;
      }
      vCreateMonsterPoints_.Add(other.vCreateMonsterPoints_);
      vCreateRandomMonsterPoints_.Add(other.vCreateRandomMonsterPoints_);
      if (other.RoomAI != 0) {
        RoomAI = other.RoomAI;
      }
      vAbyssPoints_.Add(other.vAbyssPoints_);
      vAbyssCreateMonsterGroupPoints_.Add(other.vAbyssCreateMonsterGroupPoints_);
      vTerrainType_.Add(other.vTerrainType_);
      if (other.CameraOffsetX != 0F) {
        CameraOffsetX = other.CameraOffsetX;
      }
      if (other.CameraOffsetZ != 0F) {
        CameraOffsetZ = other.CameraOffsetZ;
      }
      layerAnimationSpeedList_.Add(other.layerAnimationSpeedList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SceneName = input.ReadString();
            break;
          }
          case 16: {
            RoomID = input.ReadInt32();
            break;
          }
          case 24: {
            BattleMode = input.ReadInt32();
            break;
          }
          case 34: {
            if (canMoveArea_ == null) {
              canMoveArea_ = new global::Pbe.SceneAreaRect();
            }
            input.ReadMessage(canMoveArea_);
            break;
          }
          case 42: {
            vPlayerBirthPos_.AddEntriesFrom(input, _repeated_vPlayerBirthPos_codec);
            break;
          }
          case 50: {
            vEnemies_.AddEntriesFrom(input, _repeated_vEnemies_codec);
            break;
          }
          case 58: {
            vNpcs_.AddEntriesFrom(input, _repeated_vNpcs_codec);
            break;
          }
          case 66: {
            vDestructible_.AddEntriesFrom(input, _repeated_vDestructible_codec);
            break;
          }
          case 74: {
            vTransferDoor_.AddEntriesFrom(input, _repeated_vTransferDoor_codec);
            break;
          }
          case 82: {
            vTriggers_.AddEntriesFrom(input, _repeated_vTriggers_codec);
            break;
          }
          case 90: {
            vTerrainDecorator_.AddEntriesFrom(input, _repeated_vTerrainDecorator_codec);
            break;
          }
          case 98: {
            vMapDecorator_.AddEntriesFrom(input, _repeated_vMapDecorator_codec);
            break;
          }
          case 106:
          case 104: {
            vTerrainIndex_.AddEntriesFrom(input, _repeated_vTerrainIndex_codec);
            break;
          }
          case 112: {
            Key = input.ReadInt32();
            break;
          }
          case 120: {
            SoundID = input.ReadInt32();
            break;
          }
          case 133: {
            SoundIntervalTime = input.ReadFloat();
            break;
          }
          case 136: {
            SoundPlayProbability = input.ReadInt32();
            break;
          }
          case 146: {
            if (cameraboundary_ == null) {
              cameraboundary_ = new global::Pbe.CameraboundaryRect();
            }
            input.ReadMessage(cameraboundary_);
            break;
          }
          case 152: {
            RoomMaxUID = input.ReadInt32();
            break;
          }
          case 162: {
            vCreateMonsterPoints_.AddEntriesFrom(input, _repeated_vCreateMonsterPoints_codec);
            break;
          }
          case 170: {
            vCreateRandomMonsterPoints_.AddEntriesFrom(input, _repeated_vCreateRandomMonsterPoints_codec);
            break;
          }
          case 176: {
            RoomAI = input.ReadInt32();
            break;
          }
          case 186: {
            vAbyssPoints_.AddEntriesFrom(input, _repeated_vAbyssPoints_codec);
            break;
          }
          case 194: {
            vAbyssCreateMonsterGroupPoints_.AddEntriesFrom(input, _repeated_vAbyssCreateMonsterGroupPoints_codec);
            break;
          }
          case 202:
          case 200: {
            vTerrainType_.AddEntriesFrom(input, _repeated_vTerrainType_codec);
            break;
          }
          case 213: {
            CameraOffsetX = input.ReadFloat();
            break;
          }
          case 221: {
            CameraOffsetZ = input.ReadFloat();
            break;
          }
          case 226:
          case 229: {
            layerAnimationSpeedList_.AddEntriesFrom(input, _repeated_layerAnimationSpeedList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///场景信息
  /// </summary>
  public sealed partial class RoomSceneData : pb::IMessage<RoomSceneData> {
    private static readonly pb::MessageParser<RoomSceneData> _parser = new pb::MessageParser<RoomSceneData>(() => new RoomSceneData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomSceneData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomSceneData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomSceneData(RoomSceneData other) : this() {
      roomID_ = other.roomID_;
      vMapDecorators_ = other.vMapDecorators_.Clone();
      vMapElements_ = other.vMapElements_.Clone();
      key_ = other.key_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomSceneData Clone() {
      return new RoomSceneData(this);
    }

    /// <summary>Field number for the "RoomID" field.</summary>
    public const int RoomIDFieldNumber = 1;
    private int roomID_;
    /// <summary>
    /// 房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "VMapDecorators" field.</summary>
    public const int VMapDecoratorsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Pbe.MapDecorators> _repeated_vMapDecorators_codec
        = pb::FieldCodec.ForMessage(18, global::Pbe.MapDecorators.Parser);
    private readonly pbc::RepeatedField<global::Pbe.MapDecorators> vMapDecorators_ = new pbc::RepeatedField<global::Pbe.MapDecorators>();
    /// <summary>
    /// 新地图装饰物
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.MapDecorators> VMapDecorators {
      get { return vMapDecorators_; }
    }

    /// <summary>Field number for the "VMapElements" field.</summary>
    public const int VMapElementsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Pbe.MapDecorators> _repeated_vMapElements_codec
        = pb::FieldCodec.ForMessage(26, global::Pbe.MapDecorators.Parser);
    private readonly pbc::RepeatedField<global::Pbe.MapDecorators> vMapElements_ = new pbc::RepeatedField<global::Pbe.MapDecorators>();
    /// <summary>
    /// 新地图图素
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.MapDecorators> VMapElements {
      get { return vMapElements_; }
    }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 4;
    private int key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomSceneData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomSceneData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomID != other.RoomID) return false;
      if(!vMapDecorators_.Equals(other.vMapDecorators_)) return false;
      if(!vMapElements_.Equals(other.vMapElements_)) return false;
      if (Key != other.Key) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomID != 0) hash ^= RoomID.GetHashCode();
      hash ^= vMapDecorators_.GetHashCode();
      hash ^= vMapElements_.GetHashCode();
      if (Key != 0) hash ^= Key.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoomID);
      }
      vMapDecorators_.WriteTo(output, _repeated_vMapDecorators_codec);
      vMapElements_.WriteTo(output, _repeated_vMapElements_codec);
      if (Key != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Key);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
      }
      size += vMapDecorators_.CalculateSize(_repeated_vMapDecorators_codec);
      size += vMapElements_.CalculateSize(_repeated_vMapElements_codec);
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomSceneData other) {
      if (other == null) {
        return;
      }
      if (other.RoomID != 0) {
        RoomID = other.RoomID;
      }
      vMapDecorators_.Add(other.vMapDecorators_);
      vMapElements_.Add(other.vMapElements_);
      if (other.Key != 0) {
        Key = other.Key;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoomID = input.ReadInt32();
            break;
          }
          case 18: {
            vMapDecorators_.AddEntriesFrom(input, _repeated_vMapDecorators_codec);
            break;
          }
          case 26: {
            vMapElements_.AddEntriesFrom(input, _repeated_vMapElements_codec);
            break;
          }
          case 32: {
            Key = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///场景区域
  /// </summary>
  public sealed partial class SceneAreaRect : pb::IMessage<SceneAreaRect> {
    private static readonly pb::MessageParser<SceneAreaRect> _parser = new pb::MessageParser<SceneAreaRect>(() => new SceneAreaRect());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SceneAreaRect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneAreaRect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneAreaRect(SceneAreaRect other) : this() {
      xSizeMin_ = other.xSizeMin_;
      xSizeMax_ = other.xSizeMax_;
      ySizeMin_ = other.ySizeMin_;
      ySizeMax_ = other.ySizeMax_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneAreaRect Clone() {
      return new SceneAreaRect(this);
    }

    /// <summary>Field number for the "XSizeMin" field.</summary>
    public const int XSizeMinFieldNumber = 1;
    private float xSizeMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float XSizeMin {
      get { return xSizeMin_; }
      set {
        xSizeMin_ = value;
      }
    }

    /// <summary>Field number for the "XSizeMax" field.</summary>
    public const int XSizeMaxFieldNumber = 2;
    private float xSizeMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float XSizeMax {
      get { return xSizeMax_; }
      set {
        xSizeMax_ = value;
      }
    }

    /// <summary>Field number for the "YSizeMin" field.</summary>
    public const int YSizeMinFieldNumber = 3;
    private float ySizeMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float YSizeMin {
      get { return ySizeMin_; }
      set {
        ySizeMin_ = value;
      }
    }

    /// <summary>Field number for the "YSizeMax" field.</summary>
    public const int YSizeMaxFieldNumber = 4;
    private float ySizeMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float YSizeMax {
      get { return ySizeMax_; }
      set {
        ySizeMax_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SceneAreaRect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SceneAreaRect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(XSizeMin, other.XSizeMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(XSizeMax, other.XSizeMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(YSizeMin, other.YSizeMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(YSizeMax, other.YSizeMax)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (XSizeMin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(XSizeMin);
      if (XSizeMax != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(XSizeMax);
      if (YSizeMin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(YSizeMin);
      if (YSizeMax != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(YSizeMax);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (XSizeMin != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(XSizeMin);
      }
      if (XSizeMax != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(XSizeMax);
      }
      if (YSizeMin != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(YSizeMin);
      }
      if (YSizeMax != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(YSizeMax);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (XSizeMin != 0F) {
        size += 1 + 4;
      }
      if (XSizeMax != 0F) {
        size += 1 + 4;
      }
      if (YSizeMin != 0F) {
        size += 1 + 4;
      }
      if (YSizeMax != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SceneAreaRect other) {
      if (other == null) {
        return;
      }
      if (other.XSizeMin != 0F) {
        XSizeMin = other.XSizeMin;
      }
      if (other.XSizeMax != 0F) {
        XSizeMax = other.XSizeMax;
      }
      if (other.YSizeMin != 0F) {
        YSizeMin = other.YSizeMin;
      }
      if (other.YSizeMax != 0F) {
        YSizeMax = other.YSizeMax;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            XSizeMin = input.ReadFloat();
            break;
          }
          case 21: {
            XSizeMax = input.ReadFloat();
            break;
          }
          case 29: {
            YSizeMin = input.ReadFloat();
            break;
          }
          case 37: {
            YSizeMax = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///摄像机区域
  /// </summary>
  public sealed partial class CameraboundaryRect : pb::IMessage<CameraboundaryRect> {
    private static readonly pb::MessageParser<CameraboundaryRect> _parser = new pb::MessageParser<CameraboundaryRect>(() => new CameraboundaryRect());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CameraboundaryRect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraboundaryRect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraboundaryRect(CameraboundaryRect other) : this() {
      xSizeMin_ = other.xSizeMin_;
      xSizeMax_ = other.xSizeMax_;
      zSizeMin_ = other.zSizeMin_;
      zSizeMax_ = other.zSizeMax_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraboundaryRect Clone() {
      return new CameraboundaryRect(this);
    }

    /// <summary>Field number for the "XSizeMin" field.</summary>
    public const int XSizeMinFieldNumber = 1;
    private float xSizeMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float XSizeMin {
      get { return xSizeMin_; }
      set {
        xSizeMin_ = value;
      }
    }

    /// <summary>Field number for the "XSizeMax" field.</summary>
    public const int XSizeMaxFieldNumber = 2;
    private float xSizeMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float XSizeMax {
      get { return xSizeMax_; }
      set {
        xSizeMax_ = value;
      }
    }

    /// <summary>Field number for the "ZSizeMin" field.</summary>
    public const int ZSizeMinFieldNumber = 3;
    private float zSizeMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ZSizeMin {
      get { return zSizeMin_; }
      set {
        zSizeMin_ = value;
      }
    }

    /// <summary>Field number for the "ZSizeMax" field.</summary>
    public const int ZSizeMaxFieldNumber = 4;
    private float zSizeMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ZSizeMax {
      get { return zSizeMax_; }
      set {
        zSizeMax_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CameraboundaryRect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CameraboundaryRect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(XSizeMin, other.XSizeMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(XSizeMax, other.XSizeMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ZSizeMin, other.ZSizeMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ZSizeMax, other.ZSizeMax)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (XSizeMin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(XSizeMin);
      if (XSizeMax != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(XSizeMax);
      if (ZSizeMin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ZSizeMin);
      if (ZSizeMax != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ZSizeMax);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (XSizeMin != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(XSizeMin);
      }
      if (XSizeMax != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(XSizeMax);
      }
      if (ZSizeMin != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(ZSizeMin);
      }
      if (ZSizeMax != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(ZSizeMax);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (XSizeMin != 0F) {
        size += 1 + 4;
      }
      if (XSizeMax != 0F) {
        size += 1 + 4;
      }
      if (ZSizeMin != 0F) {
        size += 1 + 4;
      }
      if (ZSizeMax != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CameraboundaryRect other) {
      if (other == null) {
        return;
      }
      if (other.XSizeMin != 0F) {
        XSizeMin = other.XSizeMin;
      }
      if (other.XSizeMax != 0F) {
        XSizeMax = other.XSizeMax;
      }
      if (other.ZSizeMin != 0F) {
        ZSizeMin = other.ZSizeMin;
      }
      if (other.ZSizeMax != 0F) {
        ZSizeMax = other.ZSizeMax;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            XSizeMin = input.ReadFloat();
            break;
          }
          case 21: {
            XSizeMax = input.ReadFloat();
            break;
          }
          case 29: {
            ZSizeMin = input.ReadFloat();
            break;
          }
          case 37: {
            ZSizeMax = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///出生位置
  /// </summary>
  public sealed partial class PlayerBirthPosition : pb::IMessage<PlayerBirthPosition> {
    private static readonly pb::MessageParser<PlayerBirthPosition> _parser = new pb::MessageParser<PlayerBirthPosition>(() => new PlayerBirthPosition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerBirthPosition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerBirthPosition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerBirthPosition(PlayerBirthPosition other) : this() {
      seatID_ = other.seatID_;
      teamID_ = other.teamID_;
      positionX_ = other.positionX_;
      positionY_ = other.positionY_;
      positionZ_ = other.positionZ_;
      scaleX_ = other.scaleX_;
      scaleY_ = other.scaleY_;
      scaleZ_ = other.scaleZ_;
      face_ = other.face_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerBirthPosition Clone() {
      return new PlayerBirthPosition(this);
    }

    /// <summary>Field number for the "SeatID" field.</summary>
    public const int SeatIDFieldNumber = 1;
    private int seatID_;
    /// <summary>
    /// 所在位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeatID {
      get { return seatID_; }
      set {
        seatID_ = value;
      }
    }

    /// <summary>Field number for the "TeamID" field.</summary>
    public const int TeamIDFieldNumber = 2;
    private int teamID_;
    /// <summary>
    /// 队伍
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeamID {
      get { return teamID_; }
      set {
        teamID_ = value;
      }
    }

    /// <summary>Field number for the "PositionX" field.</summary>
    public const int PositionXFieldNumber = 3;
    private float positionX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PositionX {
      get { return positionX_; }
      set {
        positionX_ = value;
      }
    }

    /// <summary>Field number for the "PositionY" field.</summary>
    public const int PositionYFieldNumber = 4;
    private float positionY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PositionY {
      get { return positionY_; }
      set {
        positionY_ = value;
      }
    }

    /// <summary>Field number for the "PositionZ" field.</summary>
    public const int PositionZFieldNumber = 5;
    private float positionZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PositionZ {
      get { return positionZ_; }
      set {
        positionZ_ = value;
      }
    }

    /// <summary>Field number for the "ScaleX" field.</summary>
    public const int ScaleXFieldNumber = 6;
    private float scaleX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ScaleX {
      get { return scaleX_; }
      set {
        scaleX_ = value;
      }
    }

    /// <summary>Field number for the "ScaleY" field.</summary>
    public const int ScaleYFieldNumber = 7;
    private float scaleY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ScaleY {
      get { return scaleY_; }
      set {
        scaleY_ = value;
      }
    }

    /// <summary>Field number for the "ScaleZ" field.</summary>
    public const int ScaleZFieldNumber = 8;
    private float scaleZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ScaleZ {
      get { return scaleZ_; }
      set {
        scaleZ_ = value;
      }
    }

    /// <summary>Field number for the "Face" field.</summary>
    public const int FaceFieldNumber = 9;
    private int face_;
    /// <summary>
    /// 玩家朝向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Face {
      get { return face_; }
      set {
        face_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerBirthPosition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerBirthPosition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SeatID != other.SeatID) return false;
      if (TeamID != other.TeamID) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionX, other.PositionX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionY, other.PositionY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionZ, other.PositionZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ScaleX, other.ScaleX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ScaleY, other.ScaleY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ScaleZ, other.ScaleZ)) return false;
      if (Face != other.Face) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SeatID != 0) hash ^= SeatID.GetHashCode();
      if (TeamID != 0) hash ^= TeamID.GetHashCode();
      if (PositionX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionX);
      if (PositionY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionY);
      if (PositionZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionZ);
      if (ScaleX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ScaleX);
      if (ScaleY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ScaleY);
      if (ScaleZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ScaleZ);
      if (Face != 0) hash ^= Face.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatID);
      }
      if (TeamID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TeamID);
      }
      if (PositionX != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PositionX);
      }
      if (PositionY != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(PositionY);
      }
      if (PositionZ != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(PositionZ);
      }
      if (ScaleX != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(ScaleX);
      }
      if (ScaleY != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(ScaleY);
      }
      if (ScaleZ != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(ScaleZ);
      }
      if (Face != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Face);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SeatID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatID);
      }
      if (TeamID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamID);
      }
      if (PositionX != 0F) {
        size += 1 + 4;
      }
      if (PositionY != 0F) {
        size += 1 + 4;
      }
      if (PositionZ != 0F) {
        size += 1 + 4;
      }
      if (ScaleX != 0F) {
        size += 1 + 4;
      }
      if (ScaleY != 0F) {
        size += 1 + 4;
      }
      if (ScaleZ != 0F) {
        size += 1 + 4;
      }
      if (Face != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Face);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerBirthPosition other) {
      if (other == null) {
        return;
      }
      if (other.SeatID != 0) {
        SeatID = other.SeatID;
      }
      if (other.TeamID != 0) {
        TeamID = other.TeamID;
      }
      if (other.PositionX != 0F) {
        PositionX = other.PositionX;
      }
      if (other.PositionY != 0F) {
        PositionY = other.PositionY;
      }
      if (other.PositionZ != 0F) {
        PositionZ = other.PositionZ;
      }
      if (other.ScaleX != 0F) {
        ScaleX = other.ScaleX;
      }
      if (other.ScaleY != 0F) {
        ScaleY = other.ScaleY;
      }
      if (other.ScaleZ != 0F) {
        ScaleZ = other.ScaleZ;
      }
      if (other.Face != 0) {
        Face = other.Face;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SeatID = input.ReadInt32();
            break;
          }
          case 16: {
            TeamID = input.ReadInt32();
            break;
          }
          case 29: {
            PositionX = input.ReadFloat();
            break;
          }
          case 37: {
            PositionY = input.ReadFloat();
            break;
          }
          case 45: {
            PositionZ = input.ReadFloat();
            break;
          }
          case 53: {
            ScaleX = input.ReadFloat();
            break;
          }
          case 61: {
            ScaleY = input.ReadFloat();
            break;
          }
          case 69: {
            ScaleZ = input.ReadFloat();
            break;
          }
          case 72: {
            Face = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///房间 地表装饰物
  /// </summary>
  public sealed partial class TerrainDecorator : pb::IMessage<TerrainDecorator> {
    private static readonly pb::MessageParser<TerrainDecorator> _parser = new pb::MessageParser<TerrainDecorator>(() => new TerrainDecorator());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TerrainDecorator> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TerrainDecorator() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TerrainDecorator(TerrainDecorator other) : this() {
      resName_ = other.resName_;
      positionX_ = other.positionX_;
      positionZ_ = other.positionZ_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TerrainDecorator Clone() {
      return new TerrainDecorator(this);
    }

    /// <summary>Field number for the "ResName" field.</summary>
    public const int ResNameFieldNumber = 1;
    private string resName_ = "";
    /// <summary>
    ///资源名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResName {
      get { return resName_; }
      set {
        resName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PositionX" field.</summary>
    public const int PositionXFieldNumber = 2;
    private float positionX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PositionX {
      get { return positionX_; }
      set {
        positionX_ = value;
      }
    }

    /// <summary>Field number for the "PositionZ" field.</summary>
    public const int PositionZFieldNumber = 3;
    private float positionZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PositionZ {
      get { return positionZ_; }
      set {
        positionZ_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TerrainDecorator);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TerrainDecorator other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResName != other.ResName) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionX, other.PositionX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionZ, other.PositionZ)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResName.Length != 0) hash ^= ResName.GetHashCode();
      if (PositionX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionX);
      if (PositionZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionZ);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ResName);
      }
      if (PositionX != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(PositionX);
      }
      if (PositionZ != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PositionZ);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResName);
      }
      if (PositionX != 0F) {
        size += 1 + 4;
      }
      if (PositionZ != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TerrainDecorator other) {
      if (other == null) {
        return;
      }
      if (other.ResName.Length != 0) {
        ResName = other.ResName;
      }
      if (other.PositionX != 0F) {
        PositionX = other.PositionX;
      }
      if (other.PositionZ != 0F) {
        PositionZ = other.PositionZ;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ResName = input.ReadString();
            break;
          }
          case 21: {
            PositionX = input.ReadFloat();
            break;
          }
          case 29: {
            PositionZ = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///房间 地图装饰物
  /// </summary>
  public sealed partial class MapDecorator : pb::IMessage<MapDecorator> {
    private static readonly pb::MessageParser<MapDecorator> _parser = new pb::MessageParser<MapDecorator>(() => new MapDecorator());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapDecorator> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapDecorator() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapDecorator(MapDecorator other) : this() {
      resName_ = other.resName_;
      localPositionX_ = other.localPositionX_;
      localPositionY_ = other.localPositionY_;
      sceneLayer_ = other.sceneLayer_;
      layerOrder_ = other.layerOrder_;
      localPositionZ_ = other.localPositionZ_;
      localScaleX_ = other.localScaleX_;
      localScaleY_ = other.localScaleY_;
      localScaleZ_ = other.localScaleZ_;
      localRotationX_ = other.localRotationX_;
      localRotationY_ = other.localRotationY_;
      localRotationZ_ = other.localRotationZ_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapDecorator Clone() {
      return new MapDecorator(this);
    }

    /// <summary>Field number for the "ResName" field.</summary>
    public const int ResNameFieldNumber = 1;
    private string resName_ = "";
    /// <summary>
    ///资源名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResName {
      get { return resName_; }
      set {
        resName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LocalPositionX" field.</summary>
    public const int LocalPositionXFieldNumber = 2;
    private float localPositionX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LocalPositionX {
      get { return localPositionX_; }
      set {
        localPositionX_ = value;
      }
    }

    /// <summary>Field number for the "LocalPositionY" field.</summary>
    public const int LocalPositionYFieldNumber = 3;
    private float localPositionY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LocalPositionY {
      get { return localPositionY_; }
      set {
        localPositionY_ = value;
      }
    }

    /// <summary>Field number for the "SceneLayer" field.</summary>
    public const int SceneLayerFieldNumber = 4;
    private int sceneLayer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SceneLayer {
      get { return sceneLayer_; }
      set {
        sceneLayer_ = value;
      }
    }

    /// <summary>Field number for the "LayerOrder" field.</summary>
    public const int LayerOrderFieldNumber = 5;
    private int layerOrder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LayerOrder {
      get { return layerOrder_; }
      set {
        layerOrder_ = value;
      }
    }

    /// <summary>Field number for the "LocalPositionZ" field.</summary>
    public const int LocalPositionZFieldNumber = 6;
    private float localPositionZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LocalPositionZ {
      get { return localPositionZ_; }
      set {
        localPositionZ_ = value;
      }
    }

    /// <summary>Field number for the "LocalScaleX" field.</summary>
    public const int LocalScaleXFieldNumber = 7;
    private float localScaleX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LocalScaleX {
      get { return localScaleX_; }
      set {
        localScaleX_ = value;
      }
    }

    /// <summary>Field number for the "LocalScaleY" field.</summary>
    public const int LocalScaleYFieldNumber = 8;
    private float localScaleY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LocalScaleY {
      get { return localScaleY_; }
      set {
        localScaleY_ = value;
      }
    }

    /// <summary>Field number for the "LocalScaleZ" field.</summary>
    public const int LocalScaleZFieldNumber = 9;
    private float localScaleZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LocalScaleZ {
      get { return localScaleZ_; }
      set {
        localScaleZ_ = value;
      }
    }

    /// <summary>Field number for the "LocalRotationX" field.</summary>
    public const int LocalRotationXFieldNumber = 10;
    private float localRotationX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LocalRotationX {
      get { return localRotationX_; }
      set {
        localRotationX_ = value;
      }
    }

    /// <summary>Field number for the "LocalRotationY" field.</summary>
    public const int LocalRotationYFieldNumber = 11;
    private float localRotationY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LocalRotationY {
      get { return localRotationY_; }
      set {
        localRotationY_ = value;
      }
    }

    /// <summary>Field number for the "LocalRotationZ" field.</summary>
    public const int LocalRotationZFieldNumber = 12;
    private float localRotationZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LocalRotationZ {
      get { return localRotationZ_; }
      set {
        localRotationZ_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapDecorator);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapDecorator other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResName != other.ResName) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LocalPositionX, other.LocalPositionX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LocalPositionY, other.LocalPositionY)) return false;
      if (SceneLayer != other.SceneLayer) return false;
      if (LayerOrder != other.LayerOrder) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LocalPositionZ, other.LocalPositionZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LocalScaleX, other.LocalScaleX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LocalScaleY, other.LocalScaleY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LocalScaleZ, other.LocalScaleZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LocalRotationX, other.LocalRotationX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LocalRotationY, other.LocalRotationY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LocalRotationZ, other.LocalRotationZ)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResName.Length != 0) hash ^= ResName.GetHashCode();
      if (LocalPositionX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LocalPositionX);
      if (LocalPositionY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LocalPositionY);
      if (SceneLayer != 0) hash ^= SceneLayer.GetHashCode();
      if (LayerOrder != 0) hash ^= LayerOrder.GetHashCode();
      if (LocalPositionZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LocalPositionZ);
      if (LocalScaleX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LocalScaleX);
      if (LocalScaleY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LocalScaleY);
      if (LocalScaleZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LocalScaleZ);
      if (LocalRotationX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LocalRotationX);
      if (LocalRotationY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LocalRotationY);
      if (LocalRotationZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LocalRotationZ);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ResName);
      }
      if (LocalPositionX != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(LocalPositionX);
      }
      if (LocalPositionY != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(LocalPositionY);
      }
      if (SceneLayer != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SceneLayer);
      }
      if (LayerOrder != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LayerOrder);
      }
      if (LocalPositionZ != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(LocalPositionZ);
      }
      if (LocalScaleX != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(LocalScaleX);
      }
      if (LocalScaleY != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(LocalScaleY);
      }
      if (LocalScaleZ != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(LocalScaleZ);
      }
      if (LocalRotationX != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(LocalRotationX);
      }
      if (LocalRotationY != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(LocalRotationY);
      }
      if (LocalRotationZ != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(LocalRotationZ);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResName);
      }
      if (LocalPositionX != 0F) {
        size += 1 + 4;
      }
      if (LocalPositionY != 0F) {
        size += 1 + 4;
      }
      if (SceneLayer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SceneLayer);
      }
      if (LayerOrder != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LayerOrder);
      }
      if (LocalPositionZ != 0F) {
        size += 1 + 4;
      }
      if (LocalScaleX != 0F) {
        size += 1 + 4;
      }
      if (LocalScaleY != 0F) {
        size += 1 + 4;
      }
      if (LocalScaleZ != 0F) {
        size += 1 + 4;
      }
      if (LocalRotationX != 0F) {
        size += 1 + 4;
      }
      if (LocalRotationY != 0F) {
        size += 1 + 4;
      }
      if (LocalRotationZ != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapDecorator other) {
      if (other == null) {
        return;
      }
      if (other.ResName.Length != 0) {
        ResName = other.ResName;
      }
      if (other.LocalPositionX != 0F) {
        LocalPositionX = other.LocalPositionX;
      }
      if (other.LocalPositionY != 0F) {
        LocalPositionY = other.LocalPositionY;
      }
      if (other.SceneLayer != 0) {
        SceneLayer = other.SceneLayer;
      }
      if (other.LayerOrder != 0) {
        LayerOrder = other.LayerOrder;
      }
      if (other.LocalPositionZ != 0F) {
        LocalPositionZ = other.LocalPositionZ;
      }
      if (other.LocalScaleX != 0F) {
        LocalScaleX = other.LocalScaleX;
      }
      if (other.LocalScaleY != 0F) {
        LocalScaleY = other.LocalScaleY;
      }
      if (other.LocalScaleZ != 0F) {
        LocalScaleZ = other.LocalScaleZ;
      }
      if (other.LocalRotationX != 0F) {
        LocalRotationX = other.LocalRotationX;
      }
      if (other.LocalRotationY != 0F) {
        LocalRotationY = other.LocalRotationY;
      }
      if (other.LocalRotationZ != 0F) {
        LocalRotationZ = other.LocalRotationZ;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ResName = input.ReadString();
            break;
          }
          case 21: {
            LocalPositionX = input.ReadFloat();
            break;
          }
          case 29: {
            LocalPositionY = input.ReadFloat();
            break;
          }
          case 32: {
            SceneLayer = input.ReadInt32();
            break;
          }
          case 40: {
            LayerOrder = input.ReadInt32();
            break;
          }
          case 53: {
            LocalPositionZ = input.ReadFloat();
            break;
          }
          case 61: {
            LocalScaleX = input.ReadFloat();
            break;
          }
          case 69: {
            LocalScaleY = input.ReadFloat();
            break;
          }
          case 77: {
            LocalScaleZ = input.ReadFloat();
            break;
          }
          case 85: {
            LocalRotationX = input.ReadFloat();
            break;
          }
          case 93: {
            LocalRotationY = input.ReadFloat();
            break;
          }
          case 101: {
            LocalRotationZ = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///房间 新地图装饰物
  /// </summary>
  public sealed partial class MapDecorators : pb::IMessage<MapDecorators> {
    private static readonly pb::MessageParser<MapDecorators> _parser = new pb::MessageParser<MapDecorators>(() => new MapDecorators());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapDecorators> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapDecorators() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapDecorators(MapDecorators other) : this() {
      resName_ = other.resName_;
      localPositionX_ = other.localPositionX_;
      localPositionY_ = other.localPositionY_;
      localPositionZ_ = other.localPositionZ_;
      layerOrder_ = other.layerOrder_;
      localScaleX_ = other.localScaleX_;
      localScaleY_ = other.localScaleY_;
      localScaleZ_ = other.localScaleZ_;
      localEulerX_ = other.localEulerX_;
      localEulerY_ = other.localEulerY_;
      localEulerZ_ = other.localEulerZ_;
      balanceValueX_ = other.balanceValueX_;
      balanceValueY_ = other.balanceValueY_;
      balanceValueZ_ = other.balanceValueZ_;
      hue_ = other.hue_;
      saturation_ = other.saturation_;
      intensity_ = other.intensity_;
      brightness_ = other.brightness_;
      contrast_ = other.contrast_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapDecorators Clone() {
      return new MapDecorators(this);
    }

    /// <summary>Field number for the "ResName" field.</summary>
    public const int ResNameFieldNumber = 1;
    private string resName_ = "";
    /// <summary>
    ///资源名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResName {
      get { return resName_; }
      set {
        resName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LocalPositionX" field.</summary>
    public const int LocalPositionXFieldNumber = 2;
    private float localPositionX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LocalPositionX {
      get { return localPositionX_; }
      set {
        localPositionX_ = value;
      }
    }

    /// <summary>Field number for the "LocalPositionY" field.</summary>
    public const int LocalPositionYFieldNumber = 3;
    private float localPositionY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LocalPositionY {
      get { return localPositionY_; }
      set {
        localPositionY_ = value;
      }
    }

    /// <summary>Field number for the "LocalPositionZ" field.</summary>
    public const int LocalPositionZFieldNumber = 4;
    private float localPositionZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LocalPositionZ {
      get { return localPositionZ_; }
      set {
        localPositionZ_ = value;
      }
    }

    /// <summary>Field number for the "LayerOrder" field.</summary>
    public const int LayerOrderFieldNumber = 5;
    private int layerOrder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LayerOrder {
      get { return layerOrder_; }
      set {
        layerOrder_ = value;
      }
    }

    /// <summary>Field number for the "LocalScaleX" field.</summary>
    public const int LocalScaleXFieldNumber = 6;
    private float localScaleX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LocalScaleX {
      get { return localScaleX_; }
      set {
        localScaleX_ = value;
      }
    }

    /// <summary>Field number for the "LocalScaleY" field.</summary>
    public const int LocalScaleYFieldNumber = 7;
    private float localScaleY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LocalScaleY {
      get { return localScaleY_; }
      set {
        localScaleY_ = value;
      }
    }

    /// <summary>Field number for the "LocalScaleZ" field.</summary>
    public const int LocalScaleZFieldNumber = 8;
    private float localScaleZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LocalScaleZ {
      get { return localScaleZ_; }
      set {
        localScaleZ_ = value;
      }
    }

    /// <summary>Field number for the "LocalEulerX" field.</summary>
    public const int LocalEulerXFieldNumber = 9;
    private float localEulerX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LocalEulerX {
      get { return localEulerX_; }
      set {
        localEulerX_ = value;
      }
    }

    /// <summary>Field number for the "LocalEulerY" field.</summary>
    public const int LocalEulerYFieldNumber = 10;
    private float localEulerY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LocalEulerY {
      get { return localEulerY_; }
      set {
        localEulerY_ = value;
      }
    }

    /// <summary>Field number for the "LocalEulerZ" field.</summary>
    public const int LocalEulerZFieldNumber = 11;
    private float localEulerZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LocalEulerZ {
      get { return localEulerZ_; }
      set {
        localEulerZ_ = value;
      }
    }

    /// <summary>Field number for the "BalanceValueX" field.</summary>
    public const int BalanceValueXFieldNumber = 12;
    private float balanceValueX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BalanceValueX {
      get { return balanceValueX_; }
      set {
        balanceValueX_ = value;
      }
    }

    /// <summary>Field number for the "BalanceValueY" field.</summary>
    public const int BalanceValueYFieldNumber = 13;
    private float balanceValueY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BalanceValueY {
      get { return balanceValueY_; }
      set {
        balanceValueY_ = value;
      }
    }

    /// <summary>Field number for the "BalanceValueZ" field.</summary>
    public const int BalanceValueZFieldNumber = 14;
    private float balanceValueZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BalanceValueZ {
      get { return balanceValueZ_; }
      set {
        balanceValueZ_ = value;
      }
    }

    /// <summary>Field number for the "Hue" field.</summary>
    public const int HueFieldNumber = 15;
    private float hue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Hue {
      get { return hue_; }
      set {
        hue_ = value;
      }
    }

    /// <summary>Field number for the "Saturation" field.</summary>
    public const int SaturationFieldNumber = 16;
    private float saturation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Saturation {
      get { return saturation_; }
      set {
        saturation_ = value;
      }
    }

    /// <summary>Field number for the "Intensity" field.</summary>
    public const int IntensityFieldNumber = 17;
    private float intensity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Intensity {
      get { return intensity_; }
      set {
        intensity_ = value;
      }
    }

    /// <summary>Field number for the "Brightness" field.</summary>
    public const int BrightnessFieldNumber = 18;
    private float brightness_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Brightness {
      get { return brightness_; }
      set {
        brightness_ = value;
      }
    }

    /// <summary>Field number for the "Contrast" field.</summary>
    public const int ContrastFieldNumber = 19;
    private float contrast_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Contrast {
      get { return contrast_; }
      set {
        contrast_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapDecorators);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapDecorators other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResName != other.ResName) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LocalPositionX, other.LocalPositionX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LocalPositionY, other.LocalPositionY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LocalPositionZ, other.LocalPositionZ)) return false;
      if (LayerOrder != other.LayerOrder) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LocalScaleX, other.LocalScaleX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LocalScaleY, other.LocalScaleY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LocalScaleZ, other.LocalScaleZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LocalEulerX, other.LocalEulerX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LocalEulerY, other.LocalEulerY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LocalEulerZ, other.LocalEulerZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BalanceValueX, other.BalanceValueX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BalanceValueY, other.BalanceValueY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BalanceValueZ, other.BalanceValueZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Hue, other.Hue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Saturation, other.Saturation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Intensity, other.Intensity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Brightness, other.Brightness)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Contrast, other.Contrast)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResName.Length != 0) hash ^= ResName.GetHashCode();
      if (LocalPositionX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LocalPositionX);
      if (LocalPositionY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LocalPositionY);
      if (LocalPositionZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LocalPositionZ);
      if (LayerOrder != 0) hash ^= LayerOrder.GetHashCode();
      if (LocalScaleX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LocalScaleX);
      if (LocalScaleY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LocalScaleY);
      if (LocalScaleZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LocalScaleZ);
      if (LocalEulerX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LocalEulerX);
      if (LocalEulerY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LocalEulerY);
      if (LocalEulerZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LocalEulerZ);
      if (BalanceValueX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BalanceValueX);
      if (BalanceValueY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BalanceValueY);
      if (BalanceValueZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BalanceValueZ);
      if (Hue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Hue);
      if (Saturation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Saturation);
      if (Intensity != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Intensity);
      if (Brightness != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Brightness);
      if (Contrast != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Contrast);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ResName);
      }
      if (LocalPositionX != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(LocalPositionX);
      }
      if (LocalPositionY != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(LocalPositionY);
      }
      if (LocalPositionZ != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(LocalPositionZ);
      }
      if (LayerOrder != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LayerOrder);
      }
      if (LocalScaleX != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(LocalScaleX);
      }
      if (LocalScaleY != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(LocalScaleY);
      }
      if (LocalScaleZ != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(LocalScaleZ);
      }
      if (LocalEulerX != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(LocalEulerX);
      }
      if (LocalEulerY != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(LocalEulerY);
      }
      if (LocalEulerZ != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(LocalEulerZ);
      }
      if (BalanceValueX != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(BalanceValueX);
      }
      if (BalanceValueY != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(BalanceValueY);
      }
      if (BalanceValueZ != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(BalanceValueZ);
      }
      if (Hue != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(Hue);
      }
      if (Saturation != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(Saturation);
      }
      if (Intensity != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(Intensity);
      }
      if (Brightness != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(Brightness);
      }
      if (Contrast != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(Contrast);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResName);
      }
      if (LocalPositionX != 0F) {
        size += 1 + 4;
      }
      if (LocalPositionY != 0F) {
        size += 1 + 4;
      }
      if (LocalPositionZ != 0F) {
        size += 1 + 4;
      }
      if (LayerOrder != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LayerOrder);
      }
      if (LocalScaleX != 0F) {
        size += 1 + 4;
      }
      if (LocalScaleY != 0F) {
        size += 1 + 4;
      }
      if (LocalScaleZ != 0F) {
        size += 1 + 4;
      }
      if (LocalEulerX != 0F) {
        size += 1 + 4;
      }
      if (LocalEulerY != 0F) {
        size += 1 + 4;
      }
      if (LocalEulerZ != 0F) {
        size += 1 + 4;
      }
      if (BalanceValueX != 0F) {
        size += 1 + 4;
      }
      if (BalanceValueY != 0F) {
        size += 1 + 4;
      }
      if (BalanceValueZ != 0F) {
        size += 1 + 4;
      }
      if (Hue != 0F) {
        size += 1 + 4;
      }
      if (Saturation != 0F) {
        size += 2 + 4;
      }
      if (Intensity != 0F) {
        size += 2 + 4;
      }
      if (Brightness != 0F) {
        size += 2 + 4;
      }
      if (Contrast != 0F) {
        size += 2 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapDecorators other) {
      if (other == null) {
        return;
      }
      if (other.ResName.Length != 0) {
        ResName = other.ResName;
      }
      if (other.LocalPositionX != 0F) {
        LocalPositionX = other.LocalPositionX;
      }
      if (other.LocalPositionY != 0F) {
        LocalPositionY = other.LocalPositionY;
      }
      if (other.LocalPositionZ != 0F) {
        LocalPositionZ = other.LocalPositionZ;
      }
      if (other.LayerOrder != 0) {
        LayerOrder = other.LayerOrder;
      }
      if (other.LocalScaleX != 0F) {
        LocalScaleX = other.LocalScaleX;
      }
      if (other.LocalScaleY != 0F) {
        LocalScaleY = other.LocalScaleY;
      }
      if (other.LocalScaleZ != 0F) {
        LocalScaleZ = other.LocalScaleZ;
      }
      if (other.LocalEulerX != 0F) {
        LocalEulerX = other.LocalEulerX;
      }
      if (other.LocalEulerY != 0F) {
        LocalEulerY = other.LocalEulerY;
      }
      if (other.LocalEulerZ != 0F) {
        LocalEulerZ = other.LocalEulerZ;
      }
      if (other.BalanceValueX != 0F) {
        BalanceValueX = other.BalanceValueX;
      }
      if (other.BalanceValueY != 0F) {
        BalanceValueY = other.BalanceValueY;
      }
      if (other.BalanceValueZ != 0F) {
        BalanceValueZ = other.BalanceValueZ;
      }
      if (other.Hue != 0F) {
        Hue = other.Hue;
      }
      if (other.Saturation != 0F) {
        Saturation = other.Saturation;
      }
      if (other.Intensity != 0F) {
        Intensity = other.Intensity;
      }
      if (other.Brightness != 0F) {
        Brightness = other.Brightness;
      }
      if (other.Contrast != 0F) {
        Contrast = other.Contrast;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ResName = input.ReadString();
            break;
          }
          case 21: {
            LocalPositionX = input.ReadFloat();
            break;
          }
          case 29: {
            LocalPositionY = input.ReadFloat();
            break;
          }
          case 37: {
            LocalPositionZ = input.ReadFloat();
            break;
          }
          case 40: {
            LayerOrder = input.ReadInt32();
            break;
          }
          case 53: {
            LocalScaleX = input.ReadFloat();
            break;
          }
          case 61: {
            LocalScaleY = input.ReadFloat();
            break;
          }
          case 69: {
            LocalScaleZ = input.ReadFloat();
            break;
          }
          case 77: {
            LocalEulerX = input.ReadFloat();
            break;
          }
          case 85: {
            LocalEulerY = input.ReadFloat();
            break;
          }
          case 93: {
            LocalEulerZ = input.ReadFloat();
            break;
          }
          case 101: {
            BalanceValueX = input.ReadFloat();
            break;
          }
          case 109: {
            BalanceValueY = input.ReadFloat();
            break;
          }
          case 117: {
            BalanceValueZ = input.ReadFloat();
            break;
          }
          case 125: {
            Hue = input.ReadFloat();
            break;
          }
          case 133: {
            Saturation = input.ReadFloat();
            break;
          }
          case 141: {
            Intensity = input.ReadFloat();
            break;
          }
          case 149: {
            Brightness = input.ReadFloat();
            break;
          }
          case 157: {
            Contrast = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///房间 刷怪点
  /// </summary>
  public sealed partial class CellCreateMonsterPoint : pb::IMessage<CellCreateMonsterPoint> {
    private static readonly pb::MessageParser<CellCreateMonsterPoint> _parser = new pb::MessageParser<CellCreateMonsterPoint>(() => new CellCreateMonsterPoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CellCreateMonsterPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellCreateMonsterPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellCreateMonsterPoint(CellCreateMonsterPoint other) : this() {
      uniqueID_ = other.uniqueID_;
      vEnemy_ = other.vEnemy_ != null ? other.vEnemy_.Clone() : null;
      sectionUniqueID_ = other.sectionUniqueID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellCreateMonsterPoint Clone() {
      return new CellCreateMonsterPoint(this);
    }

    /// <summary>Field number for the "UniqueID" field.</summary>
    public const int UniqueIDFieldNumber = 1;
    private int uniqueID_;
    /// <summary>
    /// 唯一识别ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UniqueID {
      get { return uniqueID_; }
      set {
        uniqueID_ = value;
      }
    }

    /// <summary>Field number for the "VEnemy" field.</summary>
    public const int VEnemyFieldNumber = 2;
    private global::Pbe.CellEnemy vEnemy_;
    /// <summary>
    /// 怪物信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.CellEnemy VEnemy {
      get { return vEnemy_; }
      set {
        vEnemy_ = value;
      }
    }

    /// <summary>Field number for the "SectionUniqueID" field.</summary>
    public const int SectionUniqueIDFieldNumber = 3;
    private int sectionUniqueID_;
    /// <summary>
    /// 关卡内唯一识别ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SectionUniqueID {
      get { return sectionUniqueID_; }
      set {
        sectionUniqueID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CellCreateMonsterPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CellCreateMonsterPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UniqueID != other.UniqueID) return false;
      if (!object.Equals(VEnemy, other.VEnemy)) return false;
      if (SectionUniqueID != other.SectionUniqueID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UniqueID != 0) hash ^= UniqueID.GetHashCode();
      if (vEnemy_ != null) hash ^= VEnemy.GetHashCode();
      if (SectionUniqueID != 0) hash ^= SectionUniqueID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UniqueID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UniqueID);
      }
      if (vEnemy_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(VEnemy);
      }
      if (SectionUniqueID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SectionUniqueID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UniqueID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UniqueID);
      }
      if (vEnemy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VEnemy);
      }
      if (SectionUniqueID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SectionUniqueID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CellCreateMonsterPoint other) {
      if (other == null) {
        return;
      }
      if (other.UniqueID != 0) {
        UniqueID = other.UniqueID;
      }
      if (other.vEnemy_ != null) {
        if (vEnemy_ == null) {
          vEnemy_ = new global::Pbe.CellEnemy();
        }
        VEnemy.MergeFrom(other.VEnemy);
      }
      if (other.SectionUniqueID != 0) {
        SectionUniqueID = other.SectionUniqueID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UniqueID = input.ReadInt32();
            break;
          }
          case 18: {
            if (vEnemy_ == null) {
              vEnemy_ = new global::Pbe.CellEnemy();
            }
            input.ReadMessage(vEnemy_);
            break;
          }
          case 24: {
            SectionUniqueID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///房间 随机刷怪点
  /// </summary>
  public sealed partial class CellCreateRandomMonsterPoint : pb::IMessage<CellCreateRandomMonsterPoint> {
    private static readonly pb::MessageParser<CellCreateRandomMonsterPoint> _parser = new pb::MessageParser<CellCreateRandomMonsterPoint>(() => new CellCreateRandomMonsterPoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CellCreateRandomMonsterPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellCreateRandomMonsterPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellCreateRandomMonsterPoint(CellCreateRandomMonsterPoint other) : this() {
      uniqueID_ = other.uniqueID_;
      vRandomEnemy_ = other.vRandomEnemy_.Clone();
      sectionUniqueID_ = other.sectionUniqueID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellCreateRandomMonsterPoint Clone() {
      return new CellCreateRandomMonsterPoint(this);
    }

    /// <summary>Field number for the "UniqueID" field.</summary>
    public const int UniqueIDFieldNumber = 1;
    private int uniqueID_;
    /// <summary>
    /// 唯一识别ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UniqueID {
      get { return uniqueID_; }
      set {
        uniqueID_ = value;
      }
    }

    /// <summary>Field number for the "VRandomEnemy" field.</summary>
    public const int VRandomEnemyFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Pbe.CellRandomEnemy> _repeated_vRandomEnemy_codec
        = pb::FieldCodec.ForMessage(18, global::Pbe.CellRandomEnemy.Parser);
    private readonly pbc::RepeatedField<global::Pbe.CellRandomEnemy> vRandomEnemy_ = new pbc::RepeatedField<global::Pbe.CellRandomEnemy>();
    /// <summary>
    /// 随机怪物信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.CellRandomEnemy> VRandomEnemy {
      get { return vRandomEnemy_; }
    }

    /// <summary>Field number for the "SectionUniqueID" field.</summary>
    public const int SectionUniqueIDFieldNumber = 3;
    private int sectionUniqueID_;
    /// <summary>
    /// 关卡内唯一识别ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SectionUniqueID {
      get { return sectionUniqueID_; }
      set {
        sectionUniqueID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CellCreateRandomMonsterPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CellCreateRandomMonsterPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UniqueID != other.UniqueID) return false;
      if(!vRandomEnemy_.Equals(other.vRandomEnemy_)) return false;
      if (SectionUniqueID != other.SectionUniqueID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UniqueID != 0) hash ^= UniqueID.GetHashCode();
      hash ^= vRandomEnemy_.GetHashCode();
      if (SectionUniqueID != 0) hash ^= SectionUniqueID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UniqueID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UniqueID);
      }
      vRandomEnemy_.WriteTo(output, _repeated_vRandomEnemy_codec);
      if (SectionUniqueID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SectionUniqueID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UniqueID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UniqueID);
      }
      size += vRandomEnemy_.CalculateSize(_repeated_vRandomEnemy_codec);
      if (SectionUniqueID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SectionUniqueID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CellCreateRandomMonsterPoint other) {
      if (other == null) {
        return;
      }
      if (other.UniqueID != 0) {
        UniqueID = other.UniqueID;
      }
      vRandomEnemy_.Add(other.vRandomEnemy_);
      if (other.SectionUniqueID != 0) {
        SectionUniqueID = other.SectionUniqueID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UniqueID = input.ReadInt32();
            break;
          }
          case 18: {
            vRandomEnemy_.AddEntriesFrom(input, _repeated_vRandomEnemy_codec);
            break;
          }
          case 24: {
            SectionUniqueID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///房间 随机怪物
  /// </summary>
  public sealed partial class CellRandomEnemy : pb::IMessage<CellRandomEnemy> {
    private static readonly pb::MessageParser<CellRandomEnemy> _parser = new pb::MessageParser<CellRandomEnemy>(() => new CellRandomEnemy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CellRandomEnemy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellRandomEnemy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellRandomEnemy(CellRandomEnemy other) : this() {
      weight_ = other.weight_;
      vEnemy_ = other.vEnemy_ != null ? other.vEnemy_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellRandomEnemy Clone() {
      return new CellRandomEnemy(this);
    }

    /// <summary>Field number for the "Weight" field.</summary>
    public const int WeightFieldNumber = 1;
    private int weight_;
    /// <summary>
    /// 随机权重
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Weight {
      get { return weight_; }
      set {
        weight_ = value;
      }
    }

    /// <summary>Field number for the "VEnemy" field.</summary>
    public const int VEnemyFieldNumber = 2;
    private global::Pbe.CellEnemy vEnemy_;
    /// <summary>
    /// 怪物信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.CellEnemy VEnemy {
      get { return vEnemy_; }
      set {
        vEnemy_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CellRandomEnemy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CellRandomEnemy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Weight != other.Weight) return false;
      if (!object.Equals(VEnemy, other.VEnemy)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Weight != 0) hash ^= Weight.GetHashCode();
      if (vEnemy_ != null) hash ^= VEnemy.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Weight != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Weight);
      }
      if (vEnemy_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(VEnemy);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Weight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Weight);
      }
      if (vEnemy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VEnemy);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CellRandomEnemy other) {
      if (other == null) {
        return;
      }
      if (other.Weight != 0) {
        Weight = other.Weight;
      }
      if (other.vEnemy_ != null) {
        if (vEnemy_ == null) {
          vEnemy_ = new global::Pbe.CellEnemy();
        }
        VEnemy.MergeFrom(other.VEnemy);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Weight = input.ReadInt32();
            break;
          }
          case 18: {
            if (vEnemy_ == null) {
              vEnemy_ = new global::Pbe.CellEnemy();
            }
            input.ReadMessage(vEnemy_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///深渊柱刷新点
  /// </summary>
  public sealed partial class CellAbyssPoint : pb::IMessage<CellAbyssPoint> {
    private static readonly pb::MessageParser<CellAbyssPoint> _parser = new pb::MessageParser<CellAbyssPoint>(() => new CellAbyssPoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CellAbyssPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellAbyssPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellAbyssPoint(CellAbyssPoint other) : this() {
      uniqueID_ = other.uniqueID_;
      positionX_ = other.positionX_;
      positionZ_ = other.positionZ_;
      sectionUniqueID_ = other.sectionUniqueID_;
      firstWaveMonsterLevel_ = other.firstWaveMonsterLevel_;
      firstWaveMonsterTeam_ = other.firstWaveMonsterTeam_;
      secondWaveMonsterLevel_ = other.secondWaveMonsterLevel_;
      secondWaveMonsterTeam_ = other.secondWaveMonsterTeam_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellAbyssPoint Clone() {
      return new CellAbyssPoint(this);
    }

    /// <summary>Field number for the "UniqueID" field.</summary>
    public const int UniqueIDFieldNumber = 1;
    private int uniqueID_;
    /// <summary>
    /// 唯一识别ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UniqueID {
      get { return uniqueID_; }
      set {
        uniqueID_ = value;
      }
    }

    /// <summary>Field number for the "PositionX" field.</summary>
    public const int PositionXFieldNumber = 2;
    private float positionX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PositionX {
      get { return positionX_; }
      set {
        positionX_ = value;
      }
    }

    /// <summary>Field number for the "PositionZ" field.</summary>
    public const int PositionZFieldNumber = 3;
    private float positionZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PositionZ {
      get { return positionZ_; }
      set {
        positionZ_ = value;
      }
    }

    /// <summary>Field number for the "SectionUniqueID" field.</summary>
    public const int SectionUniqueIDFieldNumber = 4;
    private int sectionUniqueID_;
    /// <summary>
    /// 关卡内唯一识别ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SectionUniqueID {
      get { return sectionUniqueID_; }
      set {
        sectionUniqueID_ = value;
      }
    }

    /// <summary>Field number for the "FirstWaveMonsterLevel" field.</summary>
    public const int FirstWaveMonsterLevelFieldNumber = 5;
    private int firstWaveMonsterLevel_;
    /// <summary>
    ///第一波怪等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FirstWaveMonsterLevel {
      get { return firstWaveMonsterLevel_; }
      set {
        firstWaveMonsterLevel_ = value;
      }
    }

    /// <summary>Field number for the "FirstWaveMonsterTeam" field.</summary>
    public const int FirstWaveMonsterTeamFieldNumber = 6;
    private int firstWaveMonsterTeam_;
    /// <summary>
    ///第一波怪阵营
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FirstWaveMonsterTeam {
      get { return firstWaveMonsterTeam_; }
      set {
        firstWaveMonsterTeam_ = value;
      }
    }

    /// <summary>Field number for the "SecondWaveMonsterLevel" field.</summary>
    public const int SecondWaveMonsterLevelFieldNumber = 7;
    private int secondWaveMonsterLevel_;
    /// <summary>
    ///第二波怪等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SecondWaveMonsterLevel {
      get { return secondWaveMonsterLevel_; }
      set {
        secondWaveMonsterLevel_ = value;
      }
    }

    /// <summary>Field number for the "SecondWaveMonsterTeam" field.</summary>
    public const int SecondWaveMonsterTeamFieldNumber = 8;
    private int secondWaveMonsterTeam_;
    /// <summary>
    ///第二波怪阵营
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SecondWaveMonsterTeam {
      get { return secondWaveMonsterTeam_; }
      set {
        secondWaveMonsterTeam_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CellAbyssPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CellAbyssPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UniqueID != other.UniqueID) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionX, other.PositionX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionZ, other.PositionZ)) return false;
      if (SectionUniqueID != other.SectionUniqueID) return false;
      if (FirstWaveMonsterLevel != other.FirstWaveMonsterLevel) return false;
      if (FirstWaveMonsterTeam != other.FirstWaveMonsterTeam) return false;
      if (SecondWaveMonsterLevel != other.SecondWaveMonsterLevel) return false;
      if (SecondWaveMonsterTeam != other.SecondWaveMonsterTeam) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UniqueID != 0) hash ^= UniqueID.GetHashCode();
      if (PositionX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionX);
      if (PositionZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionZ);
      if (SectionUniqueID != 0) hash ^= SectionUniqueID.GetHashCode();
      if (FirstWaveMonsterLevel != 0) hash ^= FirstWaveMonsterLevel.GetHashCode();
      if (FirstWaveMonsterTeam != 0) hash ^= FirstWaveMonsterTeam.GetHashCode();
      if (SecondWaveMonsterLevel != 0) hash ^= SecondWaveMonsterLevel.GetHashCode();
      if (SecondWaveMonsterTeam != 0) hash ^= SecondWaveMonsterTeam.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UniqueID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UniqueID);
      }
      if (PositionX != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(PositionX);
      }
      if (PositionZ != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PositionZ);
      }
      if (SectionUniqueID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SectionUniqueID);
      }
      if (FirstWaveMonsterLevel != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FirstWaveMonsterLevel);
      }
      if (FirstWaveMonsterTeam != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FirstWaveMonsterTeam);
      }
      if (SecondWaveMonsterLevel != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(SecondWaveMonsterLevel);
      }
      if (SecondWaveMonsterTeam != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(SecondWaveMonsterTeam);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UniqueID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UniqueID);
      }
      if (PositionX != 0F) {
        size += 1 + 4;
      }
      if (PositionZ != 0F) {
        size += 1 + 4;
      }
      if (SectionUniqueID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SectionUniqueID);
      }
      if (FirstWaveMonsterLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FirstWaveMonsterLevel);
      }
      if (FirstWaveMonsterTeam != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FirstWaveMonsterTeam);
      }
      if (SecondWaveMonsterLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SecondWaveMonsterLevel);
      }
      if (SecondWaveMonsterTeam != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SecondWaveMonsterTeam);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CellAbyssPoint other) {
      if (other == null) {
        return;
      }
      if (other.UniqueID != 0) {
        UniqueID = other.UniqueID;
      }
      if (other.PositionX != 0F) {
        PositionX = other.PositionX;
      }
      if (other.PositionZ != 0F) {
        PositionZ = other.PositionZ;
      }
      if (other.SectionUniqueID != 0) {
        SectionUniqueID = other.SectionUniqueID;
      }
      if (other.FirstWaveMonsterLevel != 0) {
        FirstWaveMonsterLevel = other.FirstWaveMonsterLevel;
      }
      if (other.FirstWaveMonsterTeam != 0) {
        FirstWaveMonsterTeam = other.FirstWaveMonsterTeam;
      }
      if (other.SecondWaveMonsterLevel != 0) {
        SecondWaveMonsterLevel = other.SecondWaveMonsterLevel;
      }
      if (other.SecondWaveMonsterTeam != 0) {
        SecondWaveMonsterTeam = other.SecondWaveMonsterTeam;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UniqueID = input.ReadInt32();
            break;
          }
          case 21: {
            PositionX = input.ReadFloat();
            break;
          }
          case 29: {
            PositionZ = input.ReadFloat();
            break;
          }
          case 32: {
            SectionUniqueID = input.ReadInt32();
            break;
          }
          case 40: {
            FirstWaveMonsterLevel = input.ReadInt32();
            break;
          }
          case 48: {
            FirstWaveMonsterTeam = input.ReadInt32();
            break;
          }
          case 56: {
            SecondWaveMonsterLevel = input.ReadInt32();
            break;
          }
          case 64: {
            SecondWaveMonsterTeam = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///深渊柱刷新怪物组中心点
  /// </summary>
  public sealed partial class CellAbyssCreateMonsterGroupPoint : pb::IMessage<CellAbyssCreateMonsterGroupPoint> {
    private static readonly pb::MessageParser<CellAbyssCreateMonsterGroupPoint> _parser = new pb::MessageParser<CellAbyssCreateMonsterGroupPoint>(() => new CellAbyssCreateMonsterGroupPoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CellAbyssCreateMonsterGroupPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellAbyssCreateMonsterGroupPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellAbyssCreateMonsterGroupPoint(CellAbyssCreateMonsterGroupPoint other) : this() {
      uniqueID_ = other.uniqueID_;
      positionX_ = other.positionX_;
      positionZ_ = other.positionZ_;
      monsterGroupLevel_ = other.monsterGroupLevel_;
      monsterGroupPointID_ = other.monsterGroupPointID_;
      sectionUniqueID_ = other.sectionUniqueID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellAbyssCreateMonsterGroupPoint Clone() {
      return new CellAbyssCreateMonsterGroupPoint(this);
    }

    /// <summary>Field number for the "UniqueID" field.</summary>
    public const int UniqueIDFieldNumber = 1;
    private int uniqueID_;
    /// <summary>
    /// 唯一识别ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UniqueID {
      get { return uniqueID_; }
      set {
        uniqueID_ = value;
      }
    }

    /// <summary>Field number for the "PositionX" field.</summary>
    public const int PositionXFieldNumber = 2;
    private float positionX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PositionX {
      get { return positionX_; }
      set {
        positionX_ = value;
      }
    }

    /// <summary>Field number for the "PositionZ" field.</summary>
    public const int PositionZFieldNumber = 3;
    private float positionZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PositionZ {
      get { return positionZ_; }
      set {
        positionZ_ = value;
      }
    }

    /// <summary>Field number for the "MonsterGroupLevel" field.</summary>
    public const int MonsterGroupLevelFieldNumber = 4;
    private int monsterGroupLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MonsterGroupLevel {
      get { return monsterGroupLevel_; }
      set {
        monsterGroupLevel_ = value;
      }
    }

    /// <summary>Field number for the "MonsterGroupPointID" field.</summary>
    public const int MonsterGroupPointIDFieldNumber = 5;
    private int monsterGroupPointID_;
    /// <summary>
    ///怪物组刷怪点ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MonsterGroupPointID {
      get { return monsterGroupPointID_; }
      set {
        monsterGroupPointID_ = value;
      }
    }

    /// <summary>Field number for the "SectionUniqueID" field.</summary>
    public const int SectionUniqueIDFieldNumber = 6;
    private int sectionUniqueID_;
    /// <summary>
    /// 关卡内唯一识别ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SectionUniqueID {
      get { return sectionUniqueID_; }
      set {
        sectionUniqueID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CellAbyssCreateMonsterGroupPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CellAbyssCreateMonsterGroupPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UniqueID != other.UniqueID) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionX, other.PositionX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionZ, other.PositionZ)) return false;
      if (MonsterGroupLevel != other.MonsterGroupLevel) return false;
      if (MonsterGroupPointID != other.MonsterGroupPointID) return false;
      if (SectionUniqueID != other.SectionUniqueID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UniqueID != 0) hash ^= UniqueID.GetHashCode();
      if (PositionX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionX);
      if (PositionZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionZ);
      if (MonsterGroupLevel != 0) hash ^= MonsterGroupLevel.GetHashCode();
      if (MonsterGroupPointID != 0) hash ^= MonsterGroupPointID.GetHashCode();
      if (SectionUniqueID != 0) hash ^= SectionUniqueID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UniqueID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UniqueID);
      }
      if (PositionX != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(PositionX);
      }
      if (PositionZ != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PositionZ);
      }
      if (MonsterGroupLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MonsterGroupLevel);
      }
      if (MonsterGroupPointID != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MonsterGroupPointID);
      }
      if (SectionUniqueID != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(SectionUniqueID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UniqueID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UniqueID);
      }
      if (PositionX != 0F) {
        size += 1 + 4;
      }
      if (PositionZ != 0F) {
        size += 1 + 4;
      }
      if (MonsterGroupLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterGroupLevel);
      }
      if (MonsterGroupPointID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterGroupPointID);
      }
      if (SectionUniqueID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SectionUniqueID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CellAbyssCreateMonsterGroupPoint other) {
      if (other == null) {
        return;
      }
      if (other.UniqueID != 0) {
        UniqueID = other.UniqueID;
      }
      if (other.PositionX != 0F) {
        PositionX = other.PositionX;
      }
      if (other.PositionZ != 0F) {
        PositionZ = other.PositionZ;
      }
      if (other.MonsterGroupLevel != 0) {
        MonsterGroupLevel = other.MonsterGroupLevel;
      }
      if (other.MonsterGroupPointID != 0) {
        MonsterGroupPointID = other.MonsterGroupPointID;
      }
      if (other.SectionUniqueID != 0) {
        SectionUniqueID = other.SectionUniqueID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UniqueID = input.ReadInt32();
            break;
          }
          case 21: {
            PositionX = input.ReadFloat();
            break;
          }
          case 29: {
            PositionZ = input.ReadFloat();
            break;
          }
          case 32: {
            MonsterGroupLevel = input.ReadInt32();
            break;
          }
          case 40: {
            MonsterGroupPointID = input.ReadInt32();
            break;
          }
          case 48: {
            SectionUniqueID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///房间 怪物
  /// </summary>
  public sealed partial class CellEnemy : pb::IMessage<CellEnemy> {
    private static readonly pb::MessageParser<CellEnemy> _parser = new pb::MessageParser<CellEnemy>(() => new CellEnemy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CellEnemy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellEnemy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellEnemy(CellEnemy other) : this() {
      uniqueID_ = other.uniqueID_;
      monsterID_ = other.monsterID_;
      akaName_ = other.akaName_;
      level_ = other.level_;
      direction_ = other.direction_;
      positionX_ = other.positionX_;
      positionZ_ = other.positionZ_;
      groupID_ = other.groupID_;
      storyID_ = other.storyID_;
      sectionUniqueID_ = other.sectionUniqueID_;
      teamID_ = other.teamID_;
      aISight_ = other.aISight_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellEnemy Clone() {
      return new CellEnemy(this);
    }

    /// <summary>Field number for the "UniqueID" field.</summary>
    public const int UniqueIDFieldNumber = 1;
    private int uniqueID_;
    /// <summary>
    /// 唯一识别ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UniqueID {
      get { return uniqueID_; }
      set {
        uniqueID_ = value;
      }
    }

    /// <summary>Field number for the "MonsterID" field.</summary>
    public const int MonsterIDFieldNumber = 2;
    private int monsterID_;
    /// <summary>
    /// 怪物ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MonsterID {
      get { return monsterID_; }
      set {
        monsterID_ = value;
      }
    }

    /// <summary>Field number for the "AkaName" field.</summary>
    public const int AkaNameFieldNumber = 3;
    private string akaName_ = "";
    /// <summary>
    /// 别名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AkaName {
      get { return akaName_; }
      set {
        akaName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 4;
    private int level_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "Direction" field.</summary>
    public const int DirectionFieldNumber = 5;
    private int direction_;
    /// <summary>
    /// 朝向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "PositionX" field.</summary>
    public const int PositionXFieldNumber = 6;
    private float positionX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PositionX {
      get { return positionX_; }
      set {
        positionX_ = value;
      }
    }

    /// <summary>Field number for the "PositionZ" field.</summary>
    public const int PositionZFieldNumber = 7;
    private float positionZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PositionZ {
      get { return positionZ_; }
      set {
        positionZ_ = value;
      }
    }

    /// <summary>Field number for the "GroupID" field.</summary>
    public const int GroupIDFieldNumber = 8;
    private int groupID_;
    /// <summary>
    /// 所属组ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GroupID {
      get { return groupID_; }
      set {
        groupID_ = value;
      }
    }

    /// <summary>Field number for the "StoryID" field.</summary>
    public const int StoryIDFieldNumber = 9;
    private int storyID_;
    /// <summary>
    /// 剧情ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoryID {
      get { return storyID_; }
      set {
        storyID_ = value;
      }
    }

    /// <summary>Field number for the "SectionUniqueID" field.</summary>
    public const int SectionUniqueIDFieldNumber = 10;
    private int sectionUniqueID_;
    /// <summary>
    /// 关卡内唯一识别ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SectionUniqueID {
      get { return sectionUniqueID_; }
      set {
        sectionUniqueID_ = value;
      }
    }

    /// <summary>Field number for the "TeamID" field.</summary>
    public const int TeamIDFieldNumber = 11;
    private int teamID_;
    /// <summary>
    /// 队伍ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeamID {
      get { return teamID_; }
      set {
        teamID_ = value;
      }
    }

    /// <summary>Field number for the "AISight" field.</summary>
    public const int AISightFieldNumber = 12;
    private int aISight_;
    /// <summary>
    /// 怪物视野
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AISight {
      get { return aISight_; }
      set {
        aISight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CellEnemy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CellEnemy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UniqueID != other.UniqueID) return false;
      if (MonsterID != other.MonsterID) return false;
      if (AkaName != other.AkaName) return false;
      if (Level != other.Level) return false;
      if (Direction != other.Direction) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionX, other.PositionX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionZ, other.PositionZ)) return false;
      if (GroupID != other.GroupID) return false;
      if (StoryID != other.StoryID) return false;
      if (SectionUniqueID != other.SectionUniqueID) return false;
      if (TeamID != other.TeamID) return false;
      if (AISight != other.AISight) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UniqueID != 0) hash ^= UniqueID.GetHashCode();
      if (MonsterID != 0) hash ^= MonsterID.GetHashCode();
      if (AkaName.Length != 0) hash ^= AkaName.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Direction != 0) hash ^= Direction.GetHashCode();
      if (PositionX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionX);
      if (PositionZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionZ);
      if (GroupID != 0) hash ^= GroupID.GetHashCode();
      if (StoryID != 0) hash ^= StoryID.GetHashCode();
      if (SectionUniqueID != 0) hash ^= SectionUniqueID.GetHashCode();
      if (TeamID != 0) hash ^= TeamID.GetHashCode();
      if (AISight != 0) hash ^= AISight.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UniqueID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UniqueID);
      }
      if (MonsterID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MonsterID);
      }
      if (AkaName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AkaName);
      }
      if (Level != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Level);
      }
      if (Direction != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Direction);
      }
      if (PositionX != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(PositionX);
      }
      if (PositionZ != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(PositionZ);
      }
      if (GroupID != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(GroupID);
      }
      if (StoryID != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(StoryID);
      }
      if (SectionUniqueID != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(SectionUniqueID);
      }
      if (TeamID != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(TeamID);
      }
      if (AISight != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(AISight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UniqueID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UniqueID);
      }
      if (MonsterID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterID);
      }
      if (AkaName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AkaName);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Direction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Direction);
      }
      if (PositionX != 0F) {
        size += 1 + 4;
      }
      if (PositionZ != 0F) {
        size += 1 + 4;
      }
      if (GroupID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupID);
      }
      if (StoryID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoryID);
      }
      if (SectionUniqueID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SectionUniqueID);
      }
      if (TeamID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamID);
      }
      if (AISight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AISight);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CellEnemy other) {
      if (other == null) {
        return;
      }
      if (other.UniqueID != 0) {
        UniqueID = other.UniqueID;
      }
      if (other.MonsterID != 0) {
        MonsterID = other.MonsterID;
      }
      if (other.AkaName.Length != 0) {
        AkaName = other.AkaName;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Direction != 0) {
        Direction = other.Direction;
      }
      if (other.PositionX != 0F) {
        PositionX = other.PositionX;
      }
      if (other.PositionZ != 0F) {
        PositionZ = other.PositionZ;
      }
      if (other.GroupID != 0) {
        GroupID = other.GroupID;
      }
      if (other.StoryID != 0) {
        StoryID = other.StoryID;
      }
      if (other.SectionUniqueID != 0) {
        SectionUniqueID = other.SectionUniqueID;
      }
      if (other.TeamID != 0) {
        TeamID = other.TeamID;
      }
      if (other.AISight != 0) {
        AISight = other.AISight;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UniqueID = input.ReadInt32();
            break;
          }
          case 16: {
            MonsterID = input.ReadInt32();
            break;
          }
          case 26: {
            AkaName = input.ReadString();
            break;
          }
          case 32: {
            Level = input.ReadInt32();
            break;
          }
          case 40: {
            Direction = input.ReadInt32();
            break;
          }
          case 53: {
            PositionX = input.ReadFloat();
            break;
          }
          case 61: {
            PositionZ = input.ReadFloat();
            break;
          }
          case 64: {
            GroupID = input.ReadInt32();
            break;
          }
          case 72: {
            StoryID = input.ReadInt32();
            break;
          }
          case 80: {
            SectionUniqueID = input.ReadInt32();
            break;
          }
          case 88: {
            TeamID = input.ReadInt32();
            break;
          }
          case 96: {
            AISight = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///房间 NPC
  /// </summary>
  public sealed partial class CellNPC : pb::IMessage<CellNPC> {
    private static readonly pb::MessageParser<CellNPC> _parser = new pb::MessageParser<CellNPC>(() => new CellNPC());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CellNPC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellNPC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellNPC(CellNPC other) : this() {
      uniqueID_ = other.uniqueID_;
      nPCID_ = other.nPCID_;
      akaName_ = other.akaName_;
      direction_ = other.direction_;
      positionX_ = other.positionX_;
      positionZ_ = other.positionZ_;
      storyID_ = other.storyID_;
      teamID_ = other.teamID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellNPC Clone() {
      return new CellNPC(this);
    }

    /// <summary>Field number for the "UniqueID" field.</summary>
    public const int UniqueIDFieldNumber = 1;
    private int uniqueID_;
    /// <summary>
    /// 唯一识别ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UniqueID {
      get { return uniqueID_; }
      set {
        uniqueID_ = value;
      }
    }

    /// <summary>Field number for the "NPCID" field.</summary>
    public const int NPCIDFieldNumber = 2;
    private int nPCID_;
    /// <summary>
    /// NPC ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NPCID {
      get { return nPCID_; }
      set {
        nPCID_ = value;
      }
    }

    /// <summary>Field number for the "AkaName" field.</summary>
    public const int AkaNameFieldNumber = 3;
    private string akaName_ = "";
    /// <summary>
    /// 别名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AkaName {
      get { return akaName_; }
      set {
        akaName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Direction" field.</summary>
    public const int DirectionFieldNumber = 4;
    private int direction_;
    /// <summary>
    /// 朝向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "PositionX" field.</summary>
    public const int PositionXFieldNumber = 5;
    private float positionX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PositionX {
      get { return positionX_; }
      set {
        positionX_ = value;
      }
    }

    /// <summary>Field number for the "PositionZ" field.</summary>
    public const int PositionZFieldNumber = 6;
    private float positionZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PositionZ {
      get { return positionZ_; }
      set {
        positionZ_ = value;
      }
    }

    /// <summary>Field number for the "StoryID" field.</summary>
    public const int StoryIDFieldNumber = 7;
    private int storyID_;
    /// <summary>
    /// 剧情ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoryID {
      get { return storyID_; }
      set {
        storyID_ = value;
      }
    }

    /// <summary>Field number for the "TeamID" field.</summary>
    public const int TeamIDFieldNumber = 8;
    private int teamID_;
    /// <summary>
    ///队伍ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeamID {
      get { return teamID_; }
      set {
        teamID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CellNPC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CellNPC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UniqueID != other.UniqueID) return false;
      if (NPCID != other.NPCID) return false;
      if (AkaName != other.AkaName) return false;
      if (Direction != other.Direction) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionX, other.PositionX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionZ, other.PositionZ)) return false;
      if (StoryID != other.StoryID) return false;
      if (TeamID != other.TeamID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UniqueID != 0) hash ^= UniqueID.GetHashCode();
      if (NPCID != 0) hash ^= NPCID.GetHashCode();
      if (AkaName.Length != 0) hash ^= AkaName.GetHashCode();
      if (Direction != 0) hash ^= Direction.GetHashCode();
      if (PositionX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionX);
      if (PositionZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionZ);
      if (StoryID != 0) hash ^= StoryID.GetHashCode();
      if (TeamID != 0) hash ^= TeamID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UniqueID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UniqueID);
      }
      if (NPCID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NPCID);
      }
      if (AkaName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AkaName);
      }
      if (Direction != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Direction);
      }
      if (PositionX != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(PositionX);
      }
      if (PositionZ != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(PositionZ);
      }
      if (StoryID != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(StoryID);
      }
      if (TeamID != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(TeamID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UniqueID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UniqueID);
      }
      if (NPCID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NPCID);
      }
      if (AkaName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AkaName);
      }
      if (Direction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Direction);
      }
      if (PositionX != 0F) {
        size += 1 + 4;
      }
      if (PositionZ != 0F) {
        size += 1 + 4;
      }
      if (StoryID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoryID);
      }
      if (TeamID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CellNPC other) {
      if (other == null) {
        return;
      }
      if (other.UniqueID != 0) {
        UniqueID = other.UniqueID;
      }
      if (other.NPCID != 0) {
        NPCID = other.NPCID;
      }
      if (other.AkaName.Length != 0) {
        AkaName = other.AkaName;
      }
      if (other.Direction != 0) {
        Direction = other.Direction;
      }
      if (other.PositionX != 0F) {
        PositionX = other.PositionX;
      }
      if (other.PositionZ != 0F) {
        PositionZ = other.PositionZ;
      }
      if (other.StoryID != 0) {
        StoryID = other.StoryID;
      }
      if (other.TeamID != 0) {
        TeamID = other.TeamID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UniqueID = input.ReadInt32();
            break;
          }
          case 16: {
            NPCID = input.ReadInt32();
            break;
          }
          case 26: {
            AkaName = input.ReadString();
            break;
          }
          case 32: {
            Direction = input.ReadInt32();
            break;
          }
          case 45: {
            PositionX = input.ReadFloat();
            break;
          }
          case 53: {
            PositionZ = input.ReadFloat();
            break;
          }
          case 56: {
            StoryID = input.ReadInt32();
            break;
          }
          case 64: {
            TeamID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///房间 可破坏物
  /// </summary>
  public sealed partial class CellDestructible : pb::IMessage<CellDestructible> {
    private static readonly pb::MessageParser<CellDestructible> _parser = new pb::MessageParser<CellDestructible>(() => new CellDestructible());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CellDestructible> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellDestructible() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellDestructible(CellDestructible other) : this() {
      uniqueID_ = other.uniqueID_;
      destructibleID_ = other.destructibleID_;
      akaName_ = other.akaName_;
      positionX_ = other.positionX_;
      positionZ_ = other.positionZ_;
      gridWidth_ = other.gridWidth_;
      gridHeight_ = other.gridHeight_;
      terrainIndex_ = other.terrainIndex_.Clone();
      stateId_ = other.stateId_;
      teamID_ = other.teamID_;
      sectionUniqueID_ = other.sectionUniqueID_;
      terrainType_ = other.terrainType_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellDestructible Clone() {
      return new CellDestructible(this);
    }

    /// <summary>Field number for the "UniqueID" field.</summary>
    public const int UniqueIDFieldNumber = 1;
    private int uniqueID_;
    /// <summary>
    /// 唯一识别 ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UniqueID {
      get { return uniqueID_; }
      set {
        uniqueID_ = value;
      }
    }

    /// <summary>Field number for the "DestructibleID" field.</summary>
    public const int DestructibleIDFieldNumber = 2;
    private int destructibleID_;
    /// <summary>
    /// 可破坏物 ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DestructibleID {
      get { return destructibleID_; }
      set {
        destructibleID_ = value;
      }
    }

    /// <summary>Field number for the "AkaName" field.</summary>
    public const int AkaNameFieldNumber = 4;
    private string akaName_ = "";
    /// <summary>
    /// 别名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AkaName {
      get { return akaName_; }
      set {
        akaName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PositionX" field.</summary>
    public const int PositionXFieldNumber = 5;
    private float positionX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PositionX {
      get { return positionX_; }
      set {
        positionX_ = value;
      }
    }

    /// <summary>Field number for the "PositionZ" field.</summary>
    public const int PositionZFieldNumber = 6;
    private float positionZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PositionZ {
      get { return positionZ_; }
      set {
        positionZ_ = value;
      }
    }

    /// <summary>Field number for the "GridWidth" field.</summary>
    public const int GridWidthFieldNumber = 7;
    private int gridWidth_;
    /// <summary>
    ///网格宽度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GridWidth {
      get { return gridWidth_; }
      set {
        gridWidth_ = value;
      }
    }

    /// <summary>Field number for the "GridHeight" field.</summary>
    public const int GridHeightFieldNumber = 8;
    private int gridHeight_;
    /// <summary>
    ///网格高度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GridHeight {
      get { return gridHeight_; }
      set {
        gridHeight_ = value;
      }
    }

    /// <summary>Field number for the "TerrainIndex" field.</summary>
    public const int TerrainIndexFieldNumber = 9;
    private static readonly pb::FieldCodec<int> _repeated_terrainIndex_codec
        = pb::FieldCodec.ForInt32(74);
    private readonly pbc::RepeatedField<int> terrainIndex_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///网格索引
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TerrainIndex {
      get { return terrainIndex_; }
    }

    /// <summary>Field number for the "StateId" field.</summary>
    public const int StateIdFieldNumber = 10;
    private int stateId_;
    /// <summary>
    ///状态机id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StateId {
      get { return stateId_; }
      set {
        stateId_ = value;
      }
    }

    /// <summary>Field number for the "TeamID" field.</summary>
    public const int TeamIDFieldNumber = 11;
    private int teamID_;
    /// <summary>
    ///队伍ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeamID {
      get { return teamID_; }
      set {
        teamID_ = value;
      }
    }

    /// <summary>Field number for the "SectionUniqueID" field.</summary>
    public const int SectionUniqueIDFieldNumber = 12;
    private int sectionUniqueID_;
    /// <summary>
    /// 关卡内唯一识别ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SectionUniqueID {
      get { return sectionUniqueID_; }
      set {
        sectionUniqueID_ = value;
      }
    }

    /// <summary>Field number for the "TerrainType" field.</summary>
    public const int TerrainTypeFieldNumber = 13;
    private static readonly pb::FieldCodec<int> _repeated_terrainType_codec
        = pb::FieldCodec.ForInt32(106);
    private readonly pbc::RepeatedField<int> terrainType_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///网格数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TerrainType {
      get { return terrainType_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CellDestructible);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CellDestructible other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UniqueID != other.UniqueID) return false;
      if (DestructibleID != other.DestructibleID) return false;
      if (AkaName != other.AkaName) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionX, other.PositionX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionZ, other.PositionZ)) return false;
      if (GridWidth != other.GridWidth) return false;
      if (GridHeight != other.GridHeight) return false;
      if(!terrainIndex_.Equals(other.terrainIndex_)) return false;
      if (StateId != other.StateId) return false;
      if (TeamID != other.TeamID) return false;
      if (SectionUniqueID != other.SectionUniqueID) return false;
      if(!terrainType_.Equals(other.terrainType_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UniqueID != 0) hash ^= UniqueID.GetHashCode();
      if (DestructibleID != 0) hash ^= DestructibleID.GetHashCode();
      if (AkaName.Length != 0) hash ^= AkaName.GetHashCode();
      if (PositionX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionX);
      if (PositionZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionZ);
      if (GridWidth != 0) hash ^= GridWidth.GetHashCode();
      if (GridHeight != 0) hash ^= GridHeight.GetHashCode();
      hash ^= terrainIndex_.GetHashCode();
      if (StateId != 0) hash ^= StateId.GetHashCode();
      if (TeamID != 0) hash ^= TeamID.GetHashCode();
      if (SectionUniqueID != 0) hash ^= SectionUniqueID.GetHashCode();
      hash ^= terrainType_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UniqueID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UniqueID);
      }
      if (DestructibleID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DestructibleID);
      }
      if (AkaName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AkaName);
      }
      if (PositionX != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(PositionX);
      }
      if (PositionZ != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(PositionZ);
      }
      if (GridWidth != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(GridWidth);
      }
      if (GridHeight != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(GridHeight);
      }
      terrainIndex_.WriteTo(output, _repeated_terrainIndex_codec);
      if (StateId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(StateId);
      }
      if (TeamID != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(TeamID);
      }
      if (SectionUniqueID != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(SectionUniqueID);
      }
      terrainType_.WriteTo(output, _repeated_terrainType_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UniqueID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UniqueID);
      }
      if (DestructibleID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DestructibleID);
      }
      if (AkaName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AkaName);
      }
      if (PositionX != 0F) {
        size += 1 + 4;
      }
      if (PositionZ != 0F) {
        size += 1 + 4;
      }
      if (GridWidth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GridWidth);
      }
      if (GridHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GridHeight);
      }
      size += terrainIndex_.CalculateSize(_repeated_terrainIndex_codec);
      if (StateId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StateId);
      }
      if (TeamID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamID);
      }
      if (SectionUniqueID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SectionUniqueID);
      }
      size += terrainType_.CalculateSize(_repeated_terrainType_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CellDestructible other) {
      if (other == null) {
        return;
      }
      if (other.UniqueID != 0) {
        UniqueID = other.UniqueID;
      }
      if (other.DestructibleID != 0) {
        DestructibleID = other.DestructibleID;
      }
      if (other.AkaName.Length != 0) {
        AkaName = other.AkaName;
      }
      if (other.PositionX != 0F) {
        PositionX = other.PositionX;
      }
      if (other.PositionZ != 0F) {
        PositionZ = other.PositionZ;
      }
      if (other.GridWidth != 0) {
        GridWidth = other.GridWidth;
      }
      if (other.GridHeight != 0) {
        GridHeight = other.GridHeight;
      }
      terrainIndex_.Add(other.terrainIndex_);
      if (other.StateId != 0) {
        StateId = other.StateId;
      }
      if (other.TeamID != 0) {
        TeamID = other.TeamID;
      }
      if (other.SectionUniqueID != 0) {
        SectionUniqueID = other.SectionUniqueID;
      }
      terrainType_.Add(other.terrainType_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UniqueID = input.ReadInt32();
            break;
          }
          case 16: {
            DestructibleID = input.ReadInt32();
            break;
          }
          case 34: {
            AkaName = input.ReadString();
            break;
          }
          case 45: {
            PositionX = input.ReadFloat();
            break;
          }
          case 53: {
            PositionZ = input.ReadFloat();
            break;
          }
          case 56: {
            GridWidth = input.ReadInt32();
            break;
          }
          case 64: {
            GridHeight = input.ReadInt32();
            break;
          }
          case 74:
          case 72: {
            terrainIndex_.AddEntriesFrom(input, _repeated_terrainIndex_codec);
            break;
          }
          case 80: {
            StateId = input.ReadInt32();
            break;
          }
          case 88: {
            TeamID = input.ReadInt32();
            break;
          }
          case 96: {
            SectionUniqueID = input.ReadInt32();
            break;
          }
          case 106:
          case 104: {
            terrainType_.AddEntriesFrom(input, _repeated_terrainType_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///房间 传送门
  /// </summary>
  public sealed partial class CellTransferDoor : pb::IMessage<CellTransferDoor> {
    private static readonly pb::MessageParser<CellTransferDoor> _parser = new pb::MessageParser<CellTransferDoor>(() => new CellTransferDoor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CellTransferDoor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTransferDoor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTransferDoor(CellTransferDoor other) : this() {
      uniqueID_ = other.uniqueID_;
      transferDoorName_ = other.transferDoorName_;
      resID_ = other.resID_;
      akaName_ = other.akaName_;
      touchRangeX_ = other.touchRangeX_;
      touchRangeZ_ = other.touchRangeZ_;
      positionX_ = other.positionX_;
      positionZ_ = other.positionZ_;
      positionXOffset_ = other.positionXOffset_;
      positionZOffset_ = other.positionZOffset_;
      transferPointXOffset_ = other.transferPointXOffset_;
      transferPointZOffset_ = other.transferPointZOffset_;
      direction_ = other.direction_;
      stateId_ = other.stateId_;
      teamID_ = other.teamID_;
      sectionUniqueID_ = other.sectionUniqueID_;
      face_ = other.face_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTransferDoor Clone() {
      return new CellTransferDoor(this);
    }

    /// <summary>Field number for the "UniqueID" field.</summary>
    public const int UniqueIDFieldNumber = 1;
    private int uniqueID_;
    /// <summary>
    /// 唯一识别 ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UniqueID {
      get { return uniqueID_; }
      set {
        uniqueID_ = value;
      }
    }

    /// <summary>Field number for the "TransferDoorName" field.</summary>
    public const int TransferDoorNameFieldNumber = 2;
    private string transferDoorName_ = "";
    /// <summary>
    /// 传送门名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TransferDoorName {
      get { return transferDoorName_; }
      set {
        transferDoorName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ResID" field.</summary>
    public const int ResIDFieldNumber = 3;
    private int resID_;
    /// <summary>
    /// 资源名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResID {
      get { return resID_; }
      set {
        resID_ = value;
      }
    }

    /// <summary>Field number for the "AkaName" field.</summary>
    public const int AkaNameFieldNumber = 4;
    private string akaName_ = "";
    /// <summary>
    /// 别名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AkaName {
      get { return akaName_; }
      set {
        akaName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TouchRangeX" field.</summary>
    public const int TouchRangeXFieldNumber = 5;
    private float touchRangeX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TouchRangeX {
      get { return touchRangeX_; }
      set {
        touchRangeX_ = value;
      }
    }

    /// <summary>Field number for the "TouchRangeZ" field.</summary>
    public const int TouchRangeZFieldNumber = 6;
    private float touchRangeZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TouchRangeZ {
      get { return touchRangeZ_; }
      set {
        touchRangeZ_ = value;
      }
    }

    /// <summary>Field number for the "PositionX" field.</summary>
    public const int PositionXFieldNumber = 7;
    private float positionX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PositionX {
      get { return positionX_; }
      set {
        positionX_ = value;
      }
    }

    /// <summary>Field number for the "PositionZ" field.</summary>
    public const int PositionZFieldNumber = 8;
    private float positionZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PositionZ {
      get { return positionZ_; }
      set {
        positionZ_ = value;
      }
    }

    /// <summary>Field number for the "PositionXOffset" field.</summary>
    public const int PositionXOffsetFieldNumber = 9;
    private float positionXOffset_;
    /// <summary>
    ///传送区域X偏移量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PositionXOffset {
      get { return positionXOffset_; }
      set {
        positionXOffset_ = value;
      }
    }

    /// <summary>Field number for the "PositionZOffset" field.</summary>
    public const int PositionZOffsetFieldNumber = 10;
    private float positionZOffset_;
    /// <summary>
    ///传送区域Z偏移量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PositionZOffset {
      get { return positionZOffset_; }
      set {
        positionZOffset_ = value;
      }
    }

    /// <summary>Field number for the "TransferPointXOffset" field.</summary>
    public const int TransferPointXOffsetFieldNumber = 11;
    private float transferPointXOffset_;
    /// <summary>
    ///传送点相对原点X偏移量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TransferPointXOffset {
      get { return transferPointXOffset_; }
      set {
        transferPointXOffset_ = value;
      }
    }

    /// <summary>Field number for the "TransferPointZOffset" field.</summary>
    public const int TransferPointZOffsetFieldNumber = 12;
    private float transferPointZOffset_;
    /// <summary>
    ///传送点相对原点Z偏移量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TransferPointZOffset {
      get { return transferPointZOffset_; }
      set {
        transferPointZOffset_ = value;
      }
    }

    /// <summary>Field number for the "Direction" field.</summary>
    public const int DirectionFieldNumber = 13;
    private global::Pbe.EnumTransferDirection direction_ = 0;
    /// <summary>
    ///传送方向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.EnumTransferDirection Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "StateId" field.</summary>
    public const int StateIdFieldNumber = 14;
    private int stateId_;
    /// <summary>
    ///状态机id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StateId {
      get { return stateId_; }
      set {
        stateId_ = value;
      }
    }

    /// <summary>Field number for the "TeamID" field.</summary>
    public const int TeamIDFieldNumber = 15;
    private int teamID_;
    /// <summary>
    ///队伍ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeamID {
      get { return teamID_; }
      set {
        teamID_ = value;
      }
    }

    /// <summary>Field number for the "SectionUniqueID" field.</summary>
    public const int SectionUniqueIDFieldNumber = 16;
    private int sectionUniqueID_;
    /// <summary>
    /// 关卡内唯一识别ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SectionUniqueID {
      get { return sectionUniqueID_; }
      set {
        sectionUniqueID_ = value;
      }
    }

    /// <summary>Field number for the "Face" field.</summary>
    public const int FaceFieldNumber = 17;
    private int face_;
    /// <summary>
    ///玩家朝向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Face {
      get { return face_; }
      set {
        face_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CellTransferDoor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CellTransferDoor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UniqueID != other.UniqueID) return false;
      if (TransferDoorName != other.TransferDoorName) return false;
      if (ResID != other.ResID) return false;
      if (AkaName != other.AkaName) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TouchRangeX, other.TouchRangeX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TouchRangeZ, other.TouchRangeZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionX, other.PositionX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionZ, other.PositionZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionXOffset, other.PositionXOffset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionZOffset, other.PositionZOffset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TransferPointXOffset, other.TransferPointXOffset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TransferPointZOffset, other.TransferPointZOffset)) return false;
      if (Direction != other.Direction) return false;
      if (StateId != other.StateId) return false;
      if (TeamID != other.TeamID) return false;
      if (SectionUniqueID != other.SectionUniqueID) return false;
      if (Face != other.Face) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UniqueID != 0) hash ^= UniqueID.GetHashCode();
      if (TransferDoorName.Length != 0) hash ^= TransferDoorName.GetHashCode();
      if (ResID != 0) hash ^= ResID.GetHashCode();
      if (AkaName.Length != 0) hash ^= AkaName.GetHashCode();
      if (TouchRangeX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TouchRangeX);
      if (TouchRangeZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TouchRangeZ);
      if (PositionX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionX);
      if (PositionZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionZ);
      if (PositionXOffset != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionXOffset);
      if (PositionZOffset != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionZOffset);
      if (TransferPointXOffset != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TransferPointXOffset);
      if (TransferPointZOffset != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TransferPointZOffset);
      if (Direction != 0) hash ^= Direction.GetHashCode();
      if (StateId != 0) hash ^= StateId.GetHashCode();
      if (TeamID != 0) hash ^= TeamID.GetHashCode();
      if (SectionUniqueID != 0) hash ^= SectionUniqueID.GetHashCode();
      if (Face != 0) hash ^= Face.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UniqueID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UniqueID);
      }
      if (TransferDoorName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TransferDoorName);
      }
      if (ResID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ResID);
      }
      if (AkaName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AkaName);
      }
      if (TouchRangeX != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(TouchRangeX);
      }
      if (TouchRangeZ != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(TouchRangeZ);
      }
      if (PositionX != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(PositionX);
      }
      if (PositionZ != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(PositionZ);
      }
      if (PositionXOffset != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(PositionXOffset);
      }
      if (PositionZOffset != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(PositionZOffset);
      }
      if (TransferPointXOffset != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(TransferPointXOffset);
      }
      if (TransferPointZOffset != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(TransferPointZOffset);
      }
      if (Direction != 0) {
        output.WriteRawTag(104);
        output.WriteEnum((int) Direction);
      }
      if (StateId != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(StateId);
      }
      if (TeamID != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(TeamID);
      }
      if (SectionUniqueID != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(SectionUniqueID);
      }
      if (Face != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Face);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UniqueID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UniqueID);
      }
      if (TransferDoorName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TransferDoorName);
      }
      if (ResID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResID);
      }
      if (AkaName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AkaName);
      }
      if (TouchRangeX != 0F) {
        size += 1 + 4;
      }
      if (TouchRangeZ != 0F) {
        size += 1 + 4;
      }
      if (PositionX != 0F) {
        size += 1 + 4;
      }
      if (PositionZ != 0F) {
        size += 1 + 4;
      }
      if (PositionXOffset != 0F) {
        size += 1 + 4;
      }
      if (PositionZOffset != 0F) {
        size += 1 + 4;
      }
      if (TransferPointXOffset != 0F) {
        size += 1 + 4;
      }
      if (TransferPointZOffset != 0F) {
        size += 1 + 4;
      }
      if (Direction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Direction);
      }
      if (StateId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StateId);
      }
      if (TeamID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamID);
      }
      if (SectionUniqueID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SectionUniqueID);
      }
      if (Face != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Face);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CellTransferDoor other) {
      if (other == null) {
        return;
      }
      if (other.UniqueID != 0) {
        UniqueID = other.UniqueID;
      }
      if (other.TransferDoorName.Length != 0) {
        TransferDoorName = other.TransferDoorName;
      }
      if (other.ResID != 0) {
        ResID = other.ResID;
      }
      if (other.AkaName.Length != 0) {
        AkaName = other.AkaName;
      }
      if (other.TouchRangeX != 0F) {
        TouchRangeX = other.TouchRangeX;
      }
      if (other.TouchRangeZ != 0F) {
        TouchRangeZ = other.TouchRangeZ;
      }
      if (other.PositionX != 0F) {
        PositionX = other.PositionX;
      }
      if (other.PositionZ != 0F) {
        PositionZ = other.PositionZ;
      }
      if (other.PositionXOffset != 0F) {
        PositionXOffset = other.PositionXOffset;
      }
      if (other.PositionZOffset != 0F) {
        PositionZOffset = other.PositionZOffset;
      }
      if (other.TransferPointXOffset != 0F) {
        TransferPointXOffset = other.TransferPointXOffset;
      }
      if (other.TransferPointZOffset != 0F) {
        TransferPointZOffset = other.TransferPointZOffset;
      }
      if (other.Direction != 0) {
        Direction = other.Direction;
      }
      if (other.StateId != 0) {
        StateId = other.StateId;
      }
      if (other.TeamID != 0) {
        TeamID = other.TeamID;
      }
      if (other.SectionUniqueID != 0) {
        SectionUniqueID = other.SectionUniqueID;
      }
      if (other.Face != 0) {
        Face = other.Face;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UniqueID = input.ReadInt32();
            break;
          }
          case 18: {
            TransferDoorName = input.ReadString();
            break;
          }
          case 24: {
            ResID = input.ReadInt32();
            break;
          }
          case 34: {
            AkaName = input.ReadString();
            break;
          }
          case 45: {
            TouchRangeX = input.ReadFloat();
            break;
          }
          case 53: {
            TouchRangeZ = input.ReadFloat();
            break;
          }
          case 61: {
            PositionX = input.ReadFloat();
            break;
          }
          case 69: {
            PositionZ = input.ReadFloat();
            break;
          }
          case 77: {
            PositionXOffset = input.ReadFloat();
            break;
          }
          case 85: {
            PositionZOffset = input.ReadFloat();
            break;
          }
          case 93: {
            TransferPointXOffset = input.ReadFloat();
            break;
          }
          case 101: {
            TransferPointZOffset = input.ReadFloat();
            break;
          }
          case 104: {
            direction_ = (global::Pbe.EnumTransferDirection) input.ReadEnum();
            break;
          }
          case 112: {
            StateId = input.ReadInt32();
            break;
          }
          case 120: {
            TeamID = input.ReadInt32();
            break;
          }
          case 128: {
            SectionUniqueID = input.ReadInt32();
            break;
          }
          case 136: {
            Face = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///触发器
  /// </summary>
  public sealed partial class CellTrigger : pb::IMessage<CellTrigger> {
    private static readonly pb::MessageParser<CellTrigger> _parser = new pb::MessageParser<CellTrigger>(() => new CellTrigger());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CellTrigger> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTrigger() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTrigger(CellTrigger other) : this() {
      triggerBase_ = other.triggerBase_ != null ? other.triggerBase_.Clone() : null;
      triggerCondition_ = other.triggerCondition_ != null ? other.triggerCondition_.Clone() : null;
      triggerResult_ = other.triggerResult_ != null ? other.triggerResult_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellTrigger Clone() {
      return new CellTrigger(this);
    }

    /// <summary>Field number for the "TriggerBase" field.</summary>
    public const int TriggerBaseFieldNumber = 1;
    private global::Pbe.TriggerBaseDataCfg triggerBase_;
    /// <summary>
    /// 触发器基础数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.TriggerBaseDataCfg TriggerBase {
      get { return triggerBase_; }
      set {
        triggerBase_ = value;
      }
    }

    /// <summary>Field number for the "TriggerCondition" field.</summary>
    public const int TriggerConditionFieldNumber = 2;
    private global::Pbe.TriggerConditionCfg triggerCondition_;
    /// <summary>
    /// 触发条件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.TriggerConditionCfg TriggerCondition {
      get { return triggerCondition_; }
      set {
        triggerCondition_ = value;
      }
    }

    /// <summary>Field number for the "TriggerResult" field.</summary>
    public const int TriggerResultFieldNumber = 3;
    private global::Pbe.TriggerResultCfg triggerResult_;
    /// <summary>
    /// 触发结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.TriggerResultCfg TriggerResult {
      get { return triggerResult_; }
      set {
        triggerResult_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CellTrigger);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CellTrigger other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TriggerBase, other.TriggerBase)) return false;
      if (!object.Equals(TriggerCondition, other.TriggerCondition)) return false;
      if (!object.Equals(TriggerResult, other.TriggerResult)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (triggerBase_ != null) hash ^= TriggerBase.GetHashCode();
      if (triggerCondition_ != null) hash ^= TriggerCondition.GetHashCode();
      if (triggerResult_ != null) hash ^= TriggerResult.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (triggerBase_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TriggerBase);
      }
      if (triggerCondition_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TriggerCondition);
      }
      if (triggerResult_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TriggerResult);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (triggerBase_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TriggerBase);
      }
      if (triggerCondition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TriggerCondition);
      }
      if (triggerResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TriggerResult);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CellTrigger other) {
      if (other == null) {
        return;
      }
      if (other.triggerBase_ != null) {
        if (triggerBase_ == null) {
          triggerBase_ = new global::Pbe.TriggerBaseDataCfg();
        }
        TriggerBase.MergeFrom(other.TriggerBase);
      }
      if (other.triggerCondition_ != null) {
        if (triggerCondition_ == null) {
          triggerCondition_ = new global::Pbe.TriggerConditionCfg();
        }
        TriggerCondition.MergeFrom(other.TriggerCondition);
      }
      if (other.triggerResult_ != null) {
        if (triggerResult_ == null) {
          triggerResult_ = new global::Pbe.TriggerResultCfg();
        }
        TriggerResult.MergeFrom(other.TriggerResult);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (triggerBase_ == null) {
              triggerBase_ = new global::Pbe.TriggerBaseDataCfg();
            }
            input.ReadMessage(triggerBase_);
            break;
          }
          case 18: {
            if (triggerCondition_ == null) {
              triggerCondition_ = new global::Pbe.TriggerConditionCfg();
            }
            input.ReadMessage(triggerCondition_);
            break;
          }
          case 26: {
            if (triggerResult_ == null) {
              triggerResult_ = new global::Pbe.TriggerResultCfg();
            }
            input.ReadMessage(triggerResult_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///触发器基本数据
  /// </summary>
  public sealed partial class TriggerBaseDataCfg : pb::IMessage<TriggerBaseDataCfg> {
    private static readonly pb::MessageParser<TriggerBaseDataCfg> _parser = new pb::MessageParser<TriggerBaseDataCfg>(() => new TriggerBaseDataCfg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TriggerBaseDataCfg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerBaseDataCfg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerBaseDataCfg(TriggerBaseDataCfg other) : this() {
      uniqueID_ = other.uniqueID_;
      beTriggeredType_ = other.beTriggeredType_;
      maxTriggerCount_ = other.maxTriggerCount_;
      nextTriggerIDs_ = other.nextTriggerIDs_.Clone();
      intervalFrame_ = other.intervalFrame_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerBaseDataCfg Clone() {
      return new TriggerBaseDataCfg(this);
    }

    /// <summary>Field number for the "UniqueID" field.</summary>
    public const int UniqueIDFieldNumber = 1;
    private int uniqueID_;
    /// <summary>
    /// 唯一识别ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UniqueID {
      get { return uniqueID_; }
      set {
        uniqueID_ = value;
      }
    }

    /// <summary>Field number for the "BeTriggeredType" field.</summary>
    public const int BeTriggeredTypeFieldNumber = 2;
    private global::Pbe.CellBeTriggeredType beTriggeredType_ = 0;
    /// <summary>
    /// 被触发方式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.CellBeTriggeredType BeTriggeredType {
      get { return beTriggeredType_; }
      set {
        beTriggeredType_ = value;
      }
    }

    /// <summary>Field number for the "MaxTriggerCount" field.</summary>
    public const int MaxTriggerCountFieldNumber = 3;
    private int maxTriggerCount_;
    /// <summary>
    /// 最大触发次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxTriggerCount {
      get { return maxTriggerCount_; }
      set {
        maxTriggerCount_ = value;
      }
    }

    /// <summary>Field number for the "NextTriggerIDs" field.</summary>
    public const int NextTriggerIDsFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_nextTriggerIDs_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> nextTriggerIDs_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 下一个触发器ID列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> NextTriggerIDs {
      get { return nextTriggerIDs_; }
    }

    /// <summary>Field number for the "IntervalFrame" field.</summary>
    public const int IntervalFrameFieldNumber = 5;
    private int intervalFrame_;
    /// <summary>
    /// 间隔执行帧数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IntervalFrame {
      get { return intervalFrame_; }
      set {
        intervalFrame_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TriggerBaseDataCfg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TriggerBaseDataCfg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UniqueID != other.UniqueID) return false;
      if (BeTriggeredType != other.BeTriggeredType) return false;
      if (MaxTriggerCount != other.MaxTriggerCount) return false;
      if(!nextTriggerIDs_.Equals(other.nextTriggerIDs_)) return false;
      if (IntervalFrame != other.IntervalFrame) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UniqueID != 0) hash ^= UniqueID.GetHashCode();
      if (BeTriggeredType != 0) hash ^= BeTriggeredType.GetHashCode();
      if (MaxTriggerCount != 0) hash ^= MaxTriggerCount.GetHashCode();
      hash ^= nextTriggerIDs_.GetHashCode();
      if (IntervalFrame != 0) hash ^= IntervalFrame.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UniqueID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UniqueID);
      }
      if (BeTriggeredType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) BeTriggeredType);
      }
      if (MaxTriggerCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxTriggerCount);
      }
      nextTriggerIDs_.WriteTo(output, _repeated_nextTriggerIDs_codec);
      if (IntervalFrame != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(IntervalFrame);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UniqueID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UniqueID);
      }
      if (BeTriggeredType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BeTriggeredType);
      }
      if (MaxTriggerCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxTriggerCount);
      }
      size += nextTriggerIDs_.CalculateSize(_repeated_nextTriggerIDs_codec);
      if (IntervalFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IntervalFrame);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TriggerBaseDataCfg other) {
      if (other == null) {
        return;
      }
      if (other.UniqueID != 0) {
        UniqueID = other.UniqueID;
      }
      if (other.BeTriggeredType != 0) {
        BeTriggeredType = other.BeTriggeredType;
      }
      if (other.MaxTriggerCount != 0) {
        MaxTriggerCount = other.MaxTriggerCount;
      }
      nextTriggerIDs_.Add(other.nextTriggerIDs_);
      if (other.IntervalFrame != 0) {
        IntervalFrame = other.IntervalFrame;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UniqueID = input.ReadInt32();
            break;
          }
          case 16: {
            beTriggeredType_ = (global::Pbe.CellBeTriggeredType) input.ReadEnum();
            break;
          }
          case 24: {
            MaxTriggerCount = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            nextTriggerIDs_.AddEntriesFrom(input, _repeated_nextTriggerIDs_codec);
            break;
          }
          case 40: {
            IntervalFrame = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///触发器条件配置
  /// </summary>
  public sealed partial class TriggerConditionCfg : pb::IMessage<TriggerConditionCfg> {
    private static readonly pb::MessageParser<TriggerConditionCfg> _parser = new pb::MessageParser<TriggerConditionCfg>(() => new TriggerConditionCfg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TriggerConditionCfg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerConditionCfg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerConditionCfg(TriggerConditionCfg other) : this() {
      conditionType_ = other.conditionType_;
      cHPPercent_ = other.cHPPercent_ != null ? other.cHPPercent_.Clone() : null;
      cTouched_ = other.cTouched_ != null ? other.cTouched_.Clone() : null;
      cDead_ = other.cDead_ != null ? other.cDead_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerConditionCfg Clone() {
      return new TriggerConditionCfg(this);
    }

    /// <summary>Field number for the "ConditionType" field.</summary>
    public const int ConditionTypeFieldNumber = 1;
    private global::Pbe.TriggerConditionType conditionType_ = 0;
    /// <summary>
    ///触发器条件类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.TriggerConditionType ConditionType {
      get { return conditionType_; }
      set {
        conditionType_ = value;
      }
    }

    /// <summary>Field number for the "CHPPercent" field.</summary>
    public const int CHPPercentFieldNumber = 2;
    private global::Pbe.TriggerConditonHPPercentCfg cHPPercent_;
    /// <summary>
    /// 血量百分比触发器
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.TriggerConditonHPPercentCfg CHPPercent {
      get { return cHPPercent_; }
      set {
        cHPPercent_ = value;
      }
    }

    /// <summary>Field number for the "CTouched" field.</summary>
    public const int CTouchedFieldNumber = 3;
    private global::Pbe.TriggerConditonTouchedCfg cTouched_;
    /// <summary>
    /// 触碰触发器
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.TriggerConditonTouchedCfg CTouched {
      get { return cTouched_; }
      set {
        cTouched_ = value;
      }
    }

    /// <summary>Field number for the "CDead" field.</summary>
    public const int CDeadFieldNumber = 4;
    private global::Pbe.TriggerConditonDeadCfg cDead_;
    /// <summary>
    /// 死亡触发器
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.TriggerConditonDeadCfg CDead {
      get { return cDead_; }
      set {
        cDead_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TriggerConditionCfg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TriggerConditionCfg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConditionType != other.ConditionType) return false;
      if (!object.Equals(CHPPercent, other.CHPPercent)) return false;
      if (!object.Equals(CTouched, other.CTouched)) return false;
      if (!object.Equals(CDead, other.CDead)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConditionType != 0) hash ^= ConditionType.GetHashCode();
      if (cHPPercent_ != null) hash ^= CHPPercent.GetHashCode();
      if (cTouched_ != null) hash ^= CTouched.GetHashCode();
      if (cDead_ != null) hash ^= CDead.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConditionType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ConditionType);
      }
      if (cHPPercent_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CHPPercent);
      }
      if (cTouched_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CTouched);
      }
      if (cDead_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CDead);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConditionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ConditionType);
      }
      if (cHPPercent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CHPPercent);
      }
      if (cTouched_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CTouched);
      }
      if (cDead_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CDead);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TriggerConditionCfg other) {
      if (other == null) {
        return;
      }
      if (other.ConditionType != 0) {
        ConditionType = other.ConditionType;
      }
      if (other.cHPPercent_ != null) {
        if (cHPPercent_ == null) {
          cHPPercent_ = new global::Pbe.TriggerConditonHPPercentCfg();
        }
        CHPPercent.MergeFrom(other.CHPPercent);
      }
      if (other.cTouched_ != null) {
        if (cTouched_ == null) {
          cTouched_ = new global::Pbe.TriggerConditonTouchedCfg();
        }
        CTouched.MergeFrom(other.CTouched);
      }
      if (other.cDead_ != null) {
        if (cDead_ == null) {
          cDead_ = new global::Pbe.TriggerConditonDeadCfg();
        }
        CDead.MergeFrom(other.CDead);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            conditionType_ = (global::Pbe.TriggerConditionType) input.ReadEnum();
            break;
          }
          case 18: {
            if (cHPPercent_ == null) {
              cHPPercent_ = new global::Pbe.TriggerConditonHPPercentCfg();
            }
            input.ReadMessage(cHPPercent_);
            break;
          }
          case 26: {
            if (cTouched_ == null) {
              cTouched_ = new global::Pbe.TriggerConditonTouchedCfg();
            }
            input.ReadMessage(cTouched_);
            break;
          }
          case 34: {
            if (cDead_ == null) {
              cDead_ = new global::Pbe.TriggerConditonDeadCfg();
            }
            input.ReadMessage(cDead_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///触发器结果配置
  /// </summary>
  public sealed partial class TriggerResultCfg : pb::IMessage<TriggerResultCfg> {
    private static readonly pb::MessageParser<TriggerResultCfg> _parser = new pb::MessageParser<TriggerResultCfg>(() => new TriggerResultCfg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TriggerResultCfg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerResultCfg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerResultCfg(TriggerResultCfg other) : this() {
      resultType_ = other.resultType_;
      rTransfer_ = other.rTransfer_ != null ? other.rTransfer_.Clone() : null;
      rMechanism_ = other.rMechanism_ != null ? other.rMechanism_.Clone() : null;
      rChangeAbility_ = other.rChangeAbility_ != null ? other.rChangeAbility_.Clone() : null;
      rChangeSkill_ = other.rChangeSkill_ != null ? other.rChangeSkill_.Clone() : null;
      rBuff_ = other.rBuff_ != null ? other.rBuff_.Clone() : null;
      rDestroy_ = other.rDestroy_ != null ? other.rDestroy_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerResultCfg Clone() {
      return new TriggerResultCfg(this);
    }

    /// <summary>Field number for the "ResultType" field.</summary>
    public const int ResultTypeFieldNumber = 1;
    private global::Pbe.TriggerResultType resultType_ = 0;
    /// <summary>
    /// 触发器结果类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.TriggerResultType ResultType {
      get { return resultType_; }
      set {
        resultType_ = value;
      }
    }

    /// <summary>Field number for the "RTransfer" field.</summary>
    public const int RTransferFieldNumber = 2;
    private global::Pbe.TriggerResultTransferCfg rTransfer_;
    /// <summary>
    /// 传送
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.TriggerResultTransferCfg RTransfer {
      get { return rTransfer_; }
      set {
        rTransfer_ = value;
      }
    }

    /// <summary>Field number for the "RMechanism" field.</summary>
    public const int RMechanismFieldNumber = 3;
    private global::Pbe.TriggerResultActiveMechanism rMechanism_;
    /// <summary>
    /// 激活机制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.TriggerResultActiveMechanism RMechanism {
      get { return rMechanism_; }
      set {
        rMechanism_ = value;
      }
    }

    /// <summary>Field number for the "RChangeAbility" field.</summary>
    public const int RChangeAbilityFieldNumber = 4;
    private global::Pbe.TriggerResultChangeAbility rChangeAbility_;
    /// <summary>
    /// 修改能力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.TriggerResultChangeAbility RChangeAbility {
      get { return rChangeAbility_; }
      set {
        rChangeAbility_ = value;
      }
    }

    /// <summary>Field number for the "RChangeSkill" field.</summary>
    public const int RChangeSkillFieldNumber = 5;
    private global::Pbe.TriggerResultChangeSkill rChangeSkill_;
    /// <summary>
    /// 释放技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.TriggerResultChangeSkill RChangeSkill {
      get { return rChangeSkill_; }
      set {
        rChangeSkill_ = value;
      }
    }

    /// <summary>Field number for the "RBuff" field.</summary>
    public const int RBuffFieldNumber = 6;
    private global::Pbe.TriggerResultBuffCfg rBuff_;
    /// <summary>
    /// 触发buff
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.TriggerResultBuffCfg RBuff {
      get { return rBuff_; }
      set {
        rBuff_ = value;
      }
    }

    /// <summary>Field number for the "RDestroy" field.</summary>
    public const int RDestroyFieldNumber = 7;
    private global::Pbe.TriggerResultDestroyTrigger rDestroy_;
    /// <summary>
    /// 销毁触发器
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.TriggerResultDestroyTrigger RDestroy {
      get { return rDestroy_; }
      set {
        rDestroy_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TriggerResultCfg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TriggerResultCfg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResultType != other.ResultType) return false;
      if (!object.Equals(RTransfer, other.RTransfer)) return false;
      if (!object.Equals(RMechanism, other.RMechanism)) return false;
      if (!object.Equals(RChangeAbility, other.RChangeAbility)) return false;
      if (!object.Equals(RChangeSkill, other.RChangeSkill)) return false;
      if (!object.Equals(RBuff, other.RBuff)) return false;
      if (!object.Equals(RDestroy, other.RDestroy)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResultType != 0) hash ^= ResultType.GetHashCode();
      if (rTransfer_ != null) hash ^= RTransfer.GetHashCode();
      if (rMechanism_ != null) hash ^= RMechanism.GetHashCode();
      if (rChangeAbility_ != null) hash ^= RChangeAbility.GetHashCode();
      if (rChangeSkill_ != null) hash ^= RChangeSkill.GetHashCode();
      if (rBuff_ != null) hash ^= RBuff.GetHashCode();
      if (rDestroy_ != null) hash ^= RDestroy.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResultType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ResultType);
      }
      if (rTransfer_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RTransfer);
      }
      if (rMechanism_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RMechanism);
      }
      if (rChangeAbility_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RChangeAbility);
      }
      if (rChangeSkill_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(RChangeSkill);
      }
      if (rBuff_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(RBuff);
      }
      if (rDestroy_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(RDestroy);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResultType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ResultType);
      }
      if (rTransfer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RTransfer);
      }
      if (rMechanism_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RMechanism);
      }
      if (rChangeAbility_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RChangeAbility);
      }
      if (rChangeSkill_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RChangeSkill);
      }
      if (rBuff_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RBuff);
      }
      if (rDestroy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RDestroy);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TriggerResultCfg other) {
      if (other == null) {
        return;
      }
      if (other.ResultType != 0) {
        ResultType = other.ResultType;
      }
      if (other.rTransfer_ != null) {
        if (rTransfer_ == null) {
          rTransfer_ = new global::Pbe.TriggerResultTransferCfg();
        }
        RTransfer.MergeFrom(other.RTransfer);
      }
      if (other.rMechanism_ != null) {
        if (rMechanism_ == null) {
          rMechanism_ = new global::Pbe.TriggerResultActiveMechanism();
        }
        RMechanism.MergeFrom(other.RMechanism);
      }
      if (other.rChangeAbility_ != null) {
        if (rChangeAbility_ == null) {
          rChangeAbility_ = new global::Pbe.TriggerResultChangeAbility();
        }
        RChangeAbility.MergeFrom(other.RChangeAbility);
      }
      if (other.rChangeSkill_ != null) {
        if (rChangeSkill_ == null) {
          rChangeSkill_ = new global::Pbe.TriggerResultChangeSkill();
        }
        RChangeSkill.MergeFrom(other.RChangeSkill);
      }
      if (other.rBuff_ != null) {
        if (rBuff_ == null) {
          rBuff_ = new global::Pbe.TriggerResultBuffCfg();
        }
        RBuff.MergeFrom(other.RBuff);
      }
      if (other.rDestroy_ != null) {
        if (rDestroy_ == null) {
          rDestroy_ = new global::Pbe.TriggerResultDestroyTrigger();
        }
        RDestroy.MergeFrom(other.RDestroy);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            resultType_ = (global::Pbe.TriggerResultType) input.ReadEnum();
            break;
          }
          case 18: {
            if (rTransfer_ == null) {
              rTransfer_ = new global::Pbe.TriggerResultTransferCfg();
            }
            input.ReadMessage(rTransfer_);
            break;
          }
          case 26: {
            if (rMechanism_ == null) {
              rMechanism_ = new global::Pbe.TriggerResultActiveMechanism();
            }
            input.ReadMessage(rMechanism_);
            break;
          }
          case 34: {
            if (rChangeAbility_ == null) {
              rChangeAbility_ = new global::Pbe.TriggerResultChangeAbility();
            }
            input.ReadMessage(rChangeAbility_);
            break;
          }
          case 42: {
            if (rChangeSkill_ == null) {
              rChangeSkill_ = new global::Pbe.TriggerResultChangeSkill();
            }
            input.ReadMessage(rChangeSkill_);
            break;
          }
          case 50: {
            if (rBuff_ == null) {
              rBuff_ = new global::Pbe.TriggerResultBuffCfg();
            }
            input.ReadMessage(rBuff_);
            break;
          }
          case 58: {
            if (rDestroy_ == null) {
              rDestroy_ = new global::Pbe.TriggerResultDestroyTrigger();
            }
            input.ReadMessage(rDestroy_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///触发条件-血量百分比触发器
  /// </summary>
  public sealed partial class TriggerConditonHPPercentCfg : pb::IMessage<TriggerConditonHPPercentCfg> {
    private static readonly pb::MessageParser<TriggerConditonHPPercentCfg> _parser = new pb::MessageParser<TriggerConditonHPPercentCfg>(() => new TriggerConditonHPPercentCfg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TriggerConditonHPPercentCfg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerConditonHPPercentCfg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerConditonHPPercentCfg(TriggerConditonHPPercentCfg other) : this() {
      listenEnemyUID_ = other.listenEnemyUID_;
      listenEnemyEntityID_ = other.listenEnemyEntityID_;
      hpPercent_ = other.hpPercent_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerConditonHPPercentCfg Clone() {
      return new TriggerConditonHPPercentCfg(this);
    }

    /// <summary>Field number for the "ListenEnemyUID" field.</summary>
    public const int ListenEnemyUIDFieldNumber = 1;
    private int listenEnemyUID_;
    /// <summary>
    /// 监听的敌人UID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ListenEnemyUID {
      get { return listenEnemyUID_; }
      set {
        listenEnemyUID_ = value;
      }
    }

    /// <summary>Field number for the "ListenEnemyEntityID" field.</summary>
    public const int ListenEnemyEntityIDFieldNumber = 2;
    private int listenEnemyEntityID_;
    /// <summary>
    /// 监听的敌人EntityID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ListenEnemyEntityID {
      get { return listenEnemyEntityID_; }
      set {
        listenEnemyEntityID_ = value;
      }
    }

    /// <summary>Field number for the "HpPercent" field.</summary>
    public const int HpPercentFieldNumber = 3;
    private float hpPercent_;
    /// <summary>
    /// 血量低于百分比
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HpPercent {
      get { return hpPercent_; }
      set {
        hpPercent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TriggerConditonHPPercentCfg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TriggerConditonHPPercentCfg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ListenEnemyUID != other.ListenEnemyUID) return false;
      if (ListenEnemyEntityID != other.ListenEnemyEntityID) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HpPercent, other.HpPercent)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ListenEnemyUID != 0) hash ^= ListenEnemyUID.GetHashCode();
      if (ListenEnemyEntityID != 0) hash ^= ListenEnemyEntityID.GetHashCode();
      if (HpPercent != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HpPercent);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ListenEnemyUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ListenEnemyUID);
      }
      if (ListenEnemyEntityID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ListenEnemyEntityID);
      }
      if (HpPercent != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(HpPercent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ListenEnemyUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ListenEnemyUID);
      }
      if (ListenEnemyEntityID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ListenEnemyEntityID);
      }
      if (HpPercent != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TriggerConditonHPPercentCfg other) {
      if (other == null) {
        return;
      }
      if (other.ListenEnemyUID != 0) {
        ListenEnemyUID = other.ListenEnemyUID;
      }
      if (other.ListenEnemyEntityID != 0) {
        ListenEnemyEntityID = other.ListenEnemyEntityID;
      }
      if (other.HpPercent != 0F) {
        HpPercent = other.HpPercent;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ListenEnemyUID = input.ReadInt32();
            break;
          }
          case 16: {
            ListenEnemyEntityID = input.ReadInt32();
            break;
          }
          case 29: {
            HpPercent = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///触发条件-触碰触发器
  /// </summary>
  public sealed partial class TriggerConditonTouchedCfg : pb::IMessage<TriggerConditonTouchedCfg> {
    private static readonly pb::MessageParser<TriggerConditonTouchedCfg> _parser = new pb::MessageParser<TriggerConditonTouchedCfg>(() => new TriggerConditonTouchedCfg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TriggerConditonTouchedCfg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerConditonTouchedCfg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerConditonTouchedCfg(TriggerConditonTouchedCfg other) : this() {
      checkType_ = other.checkType_;
      touchRangeX_ = other.touchRangeX_;
      touchRangeZ_ = other.touchRangeZ_;
      positionX_ = other.positionX_;
      positionZ_ = other.positionZ_;
      touchPosX_ = other.touchPosX_;
      touchPosZ_ = other.touchPosZ_;
      transferPointPosX_ = other.transferPointPosX_;
      transferPointPosZ_ = other.transferPointPosZ_;
      prefabName_ = other.prefabName_;
      checkCount_ = other.checkCount_;
      isPer_ = other.isPer_;
      modelType_ = other.modelType_;
      direction_ = other.direction_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerConditonTouchedCfg Clone() {
      return new TriggerConditonTouchedCfg(this);
    }

    /// <summary>Field number for the "CheckType" field.</summary>
    public const int CheckTypeFieldNumber = 1;
    private int checkType_;
    /// <summary>
    /// 检测方式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CheckType {
      get { return checkType_; }
      set {
        checkType_ = value;
      }
    }

    /// <summary>Field number for the "TouchRangeX" field.</summary>
    public const int TouchRangeXFieldNumber = 2;
    private float touchRangeX_;
    /// <summary>
    /// 触碰范围X
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TouchRangeX {
      get { return touchRangeX_; }
      set {
        touchRangeX_ = value;
      }
    }

    /// <summary>Field number for the "TouchRangeZ" field.</summary>
    public const int TouchRangeZFieldNumber = 3;
    private float touchRangeZ_;
    /// <summary>
    /// 触碰范围Z
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TouchRangeZ {
      get { return touchRangeZ_; }
      set {
        touchRangeZ_ = value;
      }
    }

    /// <summary>Field number for the "PositionX" field.</summary>
    public const int PositionXFieldNumber = 4;
    private float positionX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PositionX {
      get { return positionX_; }
      set {
        positionX_ = value;
      }
    }

    /// <summary>Field number for the "PositionZ" field.</summary>
    public const int PositionZFieldNumber = 5;
    private float positionZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PositionZ {
      get { return positionZ_; }
      set {
        positionZ_ = value;
      }
    }

    /// <summary>Field number for the "TouchPosX" field.</summary>
    public const int TouchPosXFieldNumber = 6;
    private float touchPosX_;
    /// <summary>
    /// 触碰中心X
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TouchPosX {
      get { return touchPosX_; }
      set {
        touchPosX_ = value;
      }
    }

    /// <summary>Field number for the "TouchPosZ" field.</summary>
    public const int TouchPosZFieldNumber = 7;
    private float touchPosZ_;
    /// <summary>
    /// 触碰中心Y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TouchPosZ {
      get { return touchPosZ_; }
      set {
        touchPosZ_ = value;
      }
    }

    /// <summary>Field number for the "TransferPointPosX" field.</summary>
    public const int TransferPointPosXFieldNumber = 8;
    private float transferPointPosX_;
    /// <summary>
    /// 传送点X
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TransferPointPosX {
      get { return transferPointPosX_; }
      set {
        transferPointPosX_ = value;
      }
    }

    /// <summary>Field number for the "TransferPointPosZ" field.</summary>
    public const int TransferPointPosZFieldNumber = 9;
    private float transferPointPosZ_;
    /// <summary>
    /// 传送点Y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TransferPointPosZ {
      get { return transferPointPosZ_; }
      set {
        transferPointPosZ_ = value;
      }
    }

    /// <summary>Field number for the "PrefabName" field.</summary>
    public const int PrefabNameFieldNumber = 10;
    private string prefabName_ = "";
    /// <summary>
    /// 资源预制体名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrefabName {
      get { return prefabName_; }
      set {
        prefabName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CheckCount" field.</summary>
    public const int CheckCountFieldNumber = 11;
    private int checkCount_;
    /// <summary>
    /// 检查人数或百分比
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CheckCount {
      get { return checkCount_; }
      set {
        checkCount_ = value;
      }
    }

    /// <summary>Field number for the "IsPer" field.</summary>
    public const int IsPerFieldNumber = 12;
    private bool isPer_;
    /// <summary>
    /// 是否百分比
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPer {
      get { return isPer_; }
      set {
        isPer_ = value;
      }
    }

    /// <summary>Field number for the "ModelType" field.</summary>
    public const int ModelTypeFieldNumber = 13;
    private int modelType_;
    /// <summary>
    /// 模型类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ModelType {
      get { return modelType_; }
      set {
        modelType_ = value;
      }
    }

    /// <summary>Field number for the "Direction" field.</summary>
    public const int DirectionFieldNumber = 14;
    private int direction_;
    /// <summary>
    /// 朝向（考虑翻转的情况）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TriggerConditonTouchedCfg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TriggerConditonTouchedCfg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CheckType != other.CheckType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TouchRangeX, other.TouchRangeX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TouchRangeZ, other.TouchRangeZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionX, other.PositionX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionZ, other.PositionZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TouchPosX, other.TouchPosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TouchPosZ, other.TouchPosZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TransferPointPosX, other.TransferPointPosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TransferPointPosZ, other.TransferPointPosZ)) return false;
      if (PrefabName != other.PrefabName) return false;
      if (CheckCount != other.CheckCount) return false;
      if (IsPer != other.IsPer) return false;
      if (ModelType != other.ModelType) return false;
      if (Direction != other.Direction) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CheckType != 0) hash ^= CheckType.GetHashCode();
      if (TouchRangeX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TouchRangeX);
      if (TouchRangeZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TouchRangeZ);
      if (PositionX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionX);
      if (PositionZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionZ);
      if (TouchPosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TouchPosX);
      if (TouchPosZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TouchPosZ);
      if (TransferPointPosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TransferPointPosX);
      if (TransferPointPosZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TransferPointPosZ);
      if (PrefabName.Length != 0) hash ^= PrefabName.GetHashCode();
      if (CheckCount != 0) hash ^= CheckCount.GetHashCode();
      if (IsPer != false) hash ^= IsPer.GetHashCode();
      if (ModelType != 0) hash ^= ModelType.GetHashCode();
      if (Direction != 0) hash ^= Direction.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CheckType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CheckType);
      }
      if (TouchRangeX != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(TouchRangeX);
      }
      if (TouchRangeZ != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(TouchRangeZ);
      }
      if (PositionX != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(PositionX);
      }
      if (PositionZ != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(PositionZ);
      }
      if (TouchPosX != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(TouchPosX);
      }
      if (TouchPosZ != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(TouchPosZ);
      }
      if (TransferPointPosX != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(TransferPointPosX);
      }
      if (TransferPointPosZ != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(TransferPointPosZ);
      }
      if (PrefabName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(PrefabName);
      }
      if (CheckCount != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(CheckCount);
      }
      if (IsPer != false) {
        output.WriteRawTag(96);
        output.WriteBool(IsPer);
      }
      if (ModelType != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(ModelType);
      }
      if (Direction != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Direction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CheckType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CheckType);
      }
      if (TouchRangeX != 0F) {
        size += 1 + 4;
      }
      if (TouchRangeZ != 0F) {
        size += 1 + 4;
      }
      if (PositionX != 0F) {
        size += 1 + 4;
      }
      if (PositionZ != 0F) {
        size += 1 + 4;
      }
      if (TouchPosX != 0F) {
        size += 1 + 4;
      }
      if (TouchPosZ != 0F) {
        size += 1 + 4;
      }
      if (TransferPointPosX != 0F) {
        size += 1 + 4;
      }
      if (TransferPointPosZ != 0F) {
        size += 1 + 4;
      }
      if (PrefabName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrefabName);
      }
      if (CheckCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CheckCount);
      }
      if (IsPer != false) {
        size += 1 + 1;
      }
      if (ModelType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModelType);
      }
      if (Direction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Direction);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TriggerConditonTouchedCfg other) {
      if (other == null) {
        return;
      }
      if (other.CheckType != 0) {
        CheckType = other.CheckType;
      }
      if (other.TouchRangeX != 0F) {
        TouchRangeX = other.TouchRangeX;
      }
      if (other.TouchRangeZ != 0F) {
        TouchRangeZ = other.TouchRangeZ;
      }
      if (other.PositionX != 0F) {
        PositionX = other.PositionX;
      }
      if (other.PositionZ != 0F) {
        PositionZ = other.PositionZ;
      }
      if (other.TouchPosX != 0F) {
        TouchPosX = other.TouchPosX;
      }
      if (other.TouchPosZ != 0F) {
        TouchPosZ = other.TouchPosZ;
      }
      if (other.TransferPointPosX != 0F) {
        TransferPointPosX = other.TransferPointPosX;
      }
      if (other.TransferPointPosZ != 0F) {
        TransferPointPosZ = other.TransferPointPosZ;
      }
      if (other.PrefabName.Length != 0) {
        PrefabName = other.PrefabName;
      }
      if (other.CheckCount != 0) {
        CheckCount = other.CheckCount;
      }
      if (other.IsPer != false) {
        IsPer = other.IsPer;
      }
      if (other.ModelType != 0) {
        ModelType = other.ModelType;
      }
      if (other.Direction != 0) {
        Direction = other.Direction;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CheckType = input.ReadInt32();
            break;
          }
          case 21: {
            TouchRangeX = input.ReadFloat();
            break;
          }
          case 29: {
            TouchRangeZ = input.ReadFloat();
            break;
          }
          case 37: {
            PositionX = input.ReadFloat();
            break;
          }
          case 45: {
            PositionZ = input.ReadFloat();
            break;
          }
          case 53: {
            TouchPosX = input.ReadFloat();
            break;
          }
          case 61: {
            TouchPosZ = input.ReadFloat();
            break;
          }
          case 69: {
            TransferPointPosX = input.ReadFloat();
            break;
          }
          case 77: {
            TransferPointPosZ = input.ReadFloat();
            break;
          }
          case 82: {
            PrefabName = input.ReadString();
            break;
          }
          case 88: {
            CheckCount = input.ReadInt32();
            break;
          }
          case 96: {
            IsPer = input.ReadBool();
            break;
          }
          case 104: {
            ModelType = input.ReadInt32();
            break;
          }
          case 112: {
            Direction = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///触发条件-死亡触发器
  /// </summary>
  public sealed partial class TriggerConditonDeadCfg : pb::IMessage<TriggerConditonDeadCfg> {
    private static readonly pb::MessageParser<TriggerConditonDeadCfg> _parser = new pb::MessageParser<TriggerConditonDeadCfg>(() => new TriggerConditonDeadCfg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TriggerConditonDeadCfg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerConditonDeadCfg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerConditonDeadCfg(TriggerConditonDeadCfg other) : this() {
      listenEnemyUIDs_ = other.listenEnemyUIDs_.Clone();
      listenEnemyEntityIDs_ = other.listenEnemyEntityIDs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerConditonDeadCfg Clone() {
      return new TriggerConditonDeadCfg(this);
    }

    /// <summary>Field number for the "ListenEnemyUIDs" field.</summary>
    public const int ListenEnemyUIDsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_listenEnemyUIDs_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> listenEnemyUIDs_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 监听的敌人UID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ListenEnemyUIDs {
      get { return listenEnemyUIDs_; }
    }

    /// <summary>Field number for the "ListenEnemyEntityIDs" field.</summary>
    public const int ListenEnemyEntityIDsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_listenEnemyEntityIDs_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> listenEnemyEntityIDs_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 监听的敌人EntityID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ListenEnemyEntityIDs {
      get { return listenEnemyEntityIDs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TriggerConditonDeadCfg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TriggerConditonDeadCfg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!listenEnemyUIDs_.Equals(other.listenEnemyUIDs_)) return false;
      if(!listenEnemyEntityIDs_.Equals(other.listenEnemyEntityIDs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= listenEnemyUIDs_.GetHashCode();
      hash ^= listenEnemyEntityIDs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      listenEnemyUIDs_.WriteTo(output, _repeated_listenEnemyUIDs_codec);
      listenEnemyEntityIDs_.WriteTo(output, _repeated_listenEnemyEntityIDs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += listenEnemyUIDs_.CalculateSize(_repeated_listenEnemyUIDs_codec);
      size += listenEnemyEntityIDs_.CalculateSize(_repeated_listenEnemyEntityIDs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TriggerConditonDeadCfg other) {
      if (other == null) {
        return;
      }
      listenEnemyUIDs_.Add(other.listenEnemyUIDs_);
      listenEnemyEntityIDs_.Add(other.listenEnemyEntityIDs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            listenEnemyUIDs_.AddEntriesFrom(input, _repeated_listenEnemyUIDs_codec);
            break;
          }
          case 18:
          case 16: {
            listenEnemyEntityIDs_.AddEntriesFrom(input, _repeated_listenEnemyEntityIDs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///////////////////////////触发结果Begin/////////////////////////////////////////
  ///触发结果-传送
  /// </summary>
  public sealed partial class TriggerResultTransferCfg : pb::IMessage<TriggerResultTransferCfg> {
    private static readonly pb::MessageParser<TriggerResultTransferCfg> _parser = new pb::MessageParser<TriggerResultTransferCfg>(() => new TriggerResultTransferCfg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TriggerResultTransferCfg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerResultTransferCfg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerResultTransferCfg(TriggerResultTransferCfg other) : this() {
      transferType_ = other.transferType_;
      vTransferList_ = other.vTransferList_.Clone();
      positionX_ = other.positionX_;
      positionZ_ = other.positionZ_;
      listenRangeX_ = other.listenRangeX_;
      listenRangeZ_ = other.listenRangeZ_;
      tPIndex_ = other.tPIndex_;
      showAnimation_ = other.showAnimation_;
      transferTeamAll_ = other.transferTeamAll_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerResultTransferCfg Clone() {
      return new TriggerResultTransferCfg(this);
    }

    /// <summary>Field number for the "TransferType" field.</summary>
    public const int TransferTypeFieldNumber = 1;
    private int transferType_;
    /// <summary>
    /// 传送类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TransferType {
      get { return transferType_; }
      set {
        transferType_ = value;
      }
    }

    /// <summary>Field number for the "VTransferList" field.</summary>
    public const int VTransferListFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_vTransferList_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> vTransferList_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 传送单位列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> VTransferList {
      get { return vTransferList_; }
    }

    /// <summary>Field number for the "PositionX" field.</summary>
    public const int PositionXFieldNumber = 3;
    private float positionX_;
    /// <summary>
    /// 触发器位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PositionX {
      get { return positionX_; }
      set {
        positionX_ = value;
      }
    }

    /// <summary>Field number for the "PositionZ" field.</summary>
    public const int PositionZFieldNumber = 4;
    private float positionZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PositionZ {
      get { return positionZ_; }
      set {
        positionZ_ = value;
      }
    }

    /// <summary>Field number for the "ListenRangeX" field.</summary>
    public const int ListenRangeXFieldNumber = 5;
    private float listenRangeX_;
    /// <summary>
    /// 以自身为中心监听的范围X
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ListenRangeX {
      get { return listenRangeX_; }
      set {
        listenRangeX_ = value;
      }
    }

    /// <summary>Field number for the "ListenRangeZ" field.</summary>
    public const int ListenRangeZFieldNumber = 6;
    private float listenRangeZ_;
    /// <summary>
    /// 以自身为中心监听的范围Z
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ListenRangeZ {
      get { return listenRangeZ_; }
      set {
        listenRangeZ_ = value;
      }
    }

    /// <summary>Field number for the "TPIndex" field.</summary>
    public const int TPIndexFieldNumber = 7;
    private int tPIndex_;
    /// <summary>
    /// 传送点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TPIndex {
      get { return tPIndex_; }
      set {
        tPIndex_ = value;
      }
    }

    /// <summary>Field number for the "ShowAnimation" field.</summary>
    public const int ShowAnimationFieldNumber = 9;
    private bool showAnimation_;
    /// <summary>
    /// 是否显示传送过场遮罩
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowAnimation {
      get { return showAnimation_; }
      set {
        showAnimation_ = value;
      }
    }

    /// <summary>Field number for the "TransferTeamAll" field.</summary>
    public const int TransferTeamAllFieldNumber = 10;
    private bool transferTeamAll_;
    /// <summary>
    /// 是否传送所有人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TransferTeamAll {
      get { return transferTeamAll_; }
      set {
        transferTeamAll_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TriggerResultTransferCfg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TriggerResultTransferCfg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransferType != other.TransferType) return false;
      if(!vTransferList_.Equals(other.vTransferList_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionX, other.PositionX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionZ, other.PositionZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ListenRangeX, other.ListenRangeX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ListenRangeZ, other.ListenRangeZ)) return false;
      if (TPIndex != other.TPIndex) return false;
      if (ShowAnimation != other.ShowAnimation) return false;
      if (TransferTeamAll != other.TransferTeamAll) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransferType != 0) hash ^= TransferType.GetHashCode();
      hash ^= vTransferList_.GetHashCode();
      if (PositionX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionX);
      if (PositionZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionZ);
      if (ListenRangeX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ListenRangeX);
      if (ListenRangeZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ListenRangeZ);
      if (TPIndex != 0) hash ^= TPIndex.GetHashCode();
      if (ShowAnimation != false) hash ^= ShowAnimation.GetHashCode();
      if (TransferTeamAll != false) hash ^= TransferTeamAll.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransferType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TransferType);
      }
      vTransferList_.WriteTo(output, _repeated_vTransferList_codec);
      if (PositionX != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PositionX);
      }
      if (PositionZ != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(PositionZ);
      }
      if (ListenRangeX != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(ListenRangeX);
      }
      if (ListenRangeZ != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(ListenRangeZ);
      }
      if (TPIndex != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(TPIndex);
      }
      if (ShowAnimation != false) {
        output.WriteRawTag(72);
        output.WriteBool(ShowAnimation);
      }
      if (TransferTeamAll != false) {
        output.WriteRawTag(80);
        output.WriteBool(TransferTeamAll);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransferType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TransferType);
      }
      size += vTransferList_.CalculateSize(_repeated_vTransferList_codec);
      if (PositionX != 0F) {
        size += 1 + 4;
      }
      if (PositionZ != 0F) {
        size += 1 + 4;
      }
      if (ListenRangeX != 0F) {
        size += 1 + 4;
      }
      if (ListenRangeZ != 0F) {
        size += 1 + 4;
      }
      if (TPIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TPIndex);
      }
      if (ShowAnimation != false) {
        size += 1 + 1;
      }
      if (TransferTeamAll != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TriggerResultTransferCfg other) {
      if (other == null) {
        return;
      }
      if (other.TransferType != 0) {
        TransferType = other.TransferType;
      }
      vTransferList_.Add(other.vTransferList_);
      if (other.PositionX != 0F) {
        PositionX = other.PositionX;
      }
      if (other.PositionZ != 0F) {
        PositionZ = other.PositionZ;
      }
      if (other.ListenRangeX != 0F) {
        ListenRangeX = other.ListenRangeX;
      }
      if (other.ListenRangeZ != 0F) {
        ListenRangeZ = other.ListenRangeZ;
      }
      if (other.TPIndex != 0) {
        TPIndex = other.TPIndex;
      }
      if (other.ShowAnimation != false) {
        ShowAnimation = other.ShowAnimation;
      }
      if (other.TransferTeamAll != false) {
        TransferTeamAll = other.TransferTeamAll;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TransferType = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            vTransferList_.AddEntriesFrom(input, _repeated_vTransferList_codec);
            break;
          }
          case 29: {
            PositionX = input.ReadFloat();
            break;
          }
          case 37: {
            PositionZ = input.ReadFloat();
            break;
          }
          case 45: {
            ListenRangeX = input.ReadFloat();
            break;
          }
          case 53: {
            ListenRangeZ = input.ReadFloat();
            break;
          }
          case 56: {
            TPIndex = input.ReadInt32();
            break;
          }
          case 72: {
            ShowAnimation = input.ReadBool();
            break;
          }
          case 80: {
            TransferTeamAll = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///触发结果-触发器
  /// </summary>
  public sealed partial class TriggerTriggerCfg : pb::IMessage<TriggerTriggerCfg> {
    private static readonly pb::MessageParser<TriggerTriggerCfg> _parser = new pb::MessageParser<TriggerTriggerCfg>(() => new TriggerTriggerCfg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TriggerTriggerCfg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerTriggerCfg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerTriggerCfg(TriggerTriggerCfg other) : this() {
      vUniqueID_ = other.vUniqueID_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerTriggerCfg Clone() {
      return new TriggerTriggerCfg(this);
    }

    /// <summary>Field number for the "VUniqueID" field.</summary>
    public const int VUniqueIDFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_vUniqueID_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> vUniqueID_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> VUniqueID {
      get { return vUniqueID_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TriggerTriggerCfg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TriggerTriggerCfg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!vUniqueID_.Equals(other.vUniqueID_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= vUniqueID_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      vUniqueID_.WriteTo(output, _repeated_vUniqueID_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += vUniqueID_.CalculateSize(_repeated_vUniqueID_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TriggerTriggerCfg other) {
      if (other == null) {
        return;
      }
      vUniqueID_.Add(other.vUniqueID_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            vUniqueID_.AddEntriesFrom(input, _repeated_vUniqueID_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///触发结果-buff
  /// </summary>
  public sealed partial class TriggerResultBuffCfg : pb::IMessage<TriggerResultBuffCfg> {
    private static readonly pb::MessageParser<TriggerResultBuffCfg> _parser = new pb::MessageParser<TriggerResultBuffCfg>(() => new TriggerResultBuffCfg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TriggerResultBuffCfg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerResultBuffCfg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerResultBuffCfg(TriggerResultBuffCfg other) : this() {
      buffID_ = other.buffID_;
      targetType_ = other.targetType_;
      vTargetUID_ = other.vTargetUID_.Clone();
      buffTeamID_ = other.buffTeamID_;
      positionX_ = other.positionX_;
      positionZ_ = other.positionZ_;
      oPType_ = other.oPType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerResultBuffCfg Clone() {
      return new TriggerResultBuffCfg(this);
    }

    /// <summary>Field number for the "BuffID" field.</summary>
    public const int BuffIDFieldNumber = 1;
    private int buffID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuffID {
      get { return buffID_; }
      set {
        buffID_ = value;
      }
    }

    /// <summary>Field number for the "TargetType" field.</summary>
    public const int TargetTypeFieldNumber = 2;
    private int targetType_;
    /// <summary>
    ///作用类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetType {
      get { return targetType_; }
      set {
        targetType_ = value;
      }
    }

    /// <summary>Field number for the "VTargetUID" field.</summary>
    public const int VTargetUIDFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_vTargetUID_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> vTargetUID_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///作用的目标Uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> VTargetUID {
      get { return vTargetUID_; }
    }

    /// <summary>Field number for the "BuffTeamID" field.</summary>
    public const int BuffTeamIDFieldNumber = 4;
    private int buffTeamID_;
    /// <summary>
    ///Buff自身队伍ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuffTeamID {
      get { return buffTeamID_; }
      set {
        buffTeamID_ = value;
      }
    }

    /// <summary>Field number for the "PositionX" field.</summary>
    public const int PositionXFieldNumber = 5;
    private float positionX_;
    /// <summary>
    ///位置X
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PositionX {
      get { return positionX_; }
      set {
        positionX_ = value;
      }
    }

    /// <summary>Field number for the "PositionZ" field.</summary>
    public const int PositionZFieldNumber = 6;
    private float positionZ_;
    /// <summary>
    ///位置Z 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PositionZ {
      get { return positionZ_; }
      set {
        positionZ_ = value;
      }
    }

    /// <summary>Field number for the "OPType" field.</summary>
    public const int OPTypeFieldNumber = 7;
    private int oPType_;
    /// <summary>
    /// 1 添加buff 2 移出buff
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OPType {
      get { return oPType_; }
      set {
        oPType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TriggerResultBuffCfg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TriggerResultBuffCfg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BuffID != other.BuffID) return false;
      if (TargetType != other.TargetType) return false;
      if(!vTargetUID_.Equals(other.vTargetUID_)) return false;
      if (BuffTeamID != other.BuffTeamID) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionX, other.PositionX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionZ, other.PositionZ)) return false;
      if (OPType != other.OPType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BuffID != 0) hash ^= BuffID.GetHashCode();
      if (TargetType != 0) hash ^= TargetType.GetHashCode();
      hash ^= vTargetUID_.GetHashCode();
      if (BuffTeamID != 0) hash ^= BuffTeamID.GetHashCode();
      if (PositionX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionX);
      if (PositionZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionZ);
      if (OPType != 0) hash ^= OPType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BuffID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BuffID);
      }
      if (TargetType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetType);
      }
      vTargetUID_.WriteTo(output, _repeated_vTargetUID_codec);
      if (BuffTeamID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BuffTeamID);
      }
      if (PositionX != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(PositionX);
      }
      if (PositionZ != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(PositionZ);
      }
      if (OPType != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(OPType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BuffID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuffID);
      }
      if (TargetType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetType);
      }
      size += vTargetUID_.CalculateSize(_repeated_vTargetUID_codec);
      if (BuffTeamID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuffTeamID);
      }
      if (PositionX != 0F) {
        size += 1 + 4;
      }
      if (PositionZ != 0F) {
        size += 1 + 4;
      }
      if (OPType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OPType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TriggerResultBuffCfg other) {
      if (other == null) {
        return;
      }
      if (other.BuffID != 0) {
        BuffID = other.BuffID;
      }
      if (other.TargetType != 0) {
        TargetType = other.TargetType;
      }
      vTargetUID_.Add(other.vTargetUID_);
      if (other.BuffTeamID != 0) {
        BuffTeamID = other.BuffTeamID;
      }
      if (other.PositionX != 0F) {
        PositionX = other.PositionX;
      }
      if (other.PositionZ != 0F) {
        PositionZ = other.PositionZ;
      }
      if (other.OPType != 0) {
        OPType = other.OPType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BuffID = input.ReadInt32();
            break;
          }
          case 16: {
            TargetType = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            vTargetUID_.AddEntriesFrom(input, _repeated_vTargetUID_codec);
            break;
          }
          case 32: {
            BuffTeamID = input.ReadInt32();
            break;
          }
          case 45: {
            PositionX = input.ReadFloat();
            break;
          }
          case 53: {
            PositionZ = input.ReadFloat();
            break;
          }
          case 56: {
            OPType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///触发结果-销毁触发器
  /// </summary>
  public sealed partial class TriggerResultDestroyTrigger : pb::IMessage<TriggerResultDestroyTrigger> {
    private static readonly pb::MessageParser<TriggerResultDestroyTrigger> _parser = new pb::MessageParser<TriggerResultDestroyTrigger>(() => new TriggerResultDestroyTrigger());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TriggerResultDestroyTrigger> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerResultDestroyTrigger() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerResultDestroyTrigger(TriggerResultDestroyTrigger other) : this() {
      destroyTriggerDelaySecond_ = other.destroyTriggerDelaySecond_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerResultDestroyTrigger Clone() {
      return new TriggerResultDestroyTrigger(this);
    }

    /// <summary>Field number for the "DestroyTriggerDelaySecond" field.</summary>
    public const int DestroyTriggerDelaySecondFieldNumber = 1;
    private int destroyTriggerDelaySecond_;
    /// <summary>
    /// 销毁触发器时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DestroyTriggerDelaySecond {
      get { return destroyTriggerDelaySecond_; }
      set {
        destroyTriggerDelaySecond_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TriggerResultDestroyTrigger);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TriggerResultDestroyTrigger other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DestroyTriggerDelaySecond != other.DestroyTriggerDelaySecond) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DestroyTriggerDelaySecond != 0) hash ^= DestroyTriggerDelaySecond.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DestroyTriggerDelaySecond != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DestroyTriggerDelaySecond);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DestroyTriggerDelaySecond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DestroyTriggerDelaySecond);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TriggerResultDestroyTrigger other) {
      if (other == null) {
        return;
      }
      if (other.DestroyTriggerDelaySecond != 0) {
        DestroyTriggerDelaySecond = other.DestroyTriggerDelaySecond;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DestroyTriggerDelaySecond = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///触发结果-激活机制
  /// </summary>
  public sealed partial class TriggerResultActiveMechanism : pb::IMessage<TriggerResultActiveMechanism> {
    private static readonly pb::MessageParser<TriggerResultActiveMechanism> _parser = new pb::MessageParser<TriggerResultActiveMechanism>(() => new TriggerResultActiveMechanism());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TriggerResultActiveMechanism> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerResultActiveMechanism() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerResultActiveMechanism(TriggerResultActiveMechanism other) : this() {
      mechanismID_ = other.mechanismID_;
      entityID_ = other.entityID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerResultActiveMechanism Clone() {
      return new TriggerResultActiveMechanism(this);
    }

    /// <summary>Field number for the "MechanismID" field.</summary>
    public const int MechanismIDFieldNumber = 1;
    private int mechanismID_;
    /// <summary>
    /// 机制ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MechanismID {
      get { return mechanismID_; }
      set {
        mechanismID_ = value;
      }
    }

    /// <summary>Field number for the "EntityID" field.</summary>
    public const int EntityIDFieldNumber = 2;
    private int entityID_;
    /// <summary>
    /// 挂机制的实体ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EntityID {
      get { return entityID_; }
      set {
        entityID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TriggerResultActiveMechanism);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TriggerResultActiveMechanism other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MechanismID != other.MechanismID) return false;
      if (EntityID != other.EntityID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MechanismID != 0) hash ^= MechanismID.GetHashCode();
      if (EntityID != 0) hash ^= EntityID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MechanismID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MechanismID);
      }
      if (EntityID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EntityID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MechanismID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MechanismID);
      }
      if (EntityID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TriggerResultActiveMechanism other) {
      if (other == null) {
        return;
      }
      if (other.MechanismID != 0) {
        MechanismID = other.MechanismID;
      }
      if (other.EntityID != 0) {
        EntityID = other.EntityID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MechanismID = input.ReadInt32();
            break;
          }
          case 16: {
            EntityID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///触发结果-修改能力
  /// </summary>
  public sealed partial class TriggerResultChangeAbility : pb::IMessage<TriggerResultChangeAbility> {
    private static readonly pb::MessageParser<TriggerResultChangeAbility> _parser = new pb::MessageParser<TriggerResultChangeAbility>(() => new TriggerResultChangeAbility());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TriggerResultChangeAbility> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerResultChangeAbility() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerResultChangeAbility(TriggerResultChangeAbility other) : this() {
      abilityEnumList_ = other.abilityEnumList_.Clone();
      abilityEnableList_ = other.abilityEnableList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerResultChangeAbility Clone() {
      return new TriggerResultChangeAbility(this);
    }

    /// <summary>Field number for the "AbilityEnumList" field.</summary>
    public const int AbilityEnumListFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_abilityEnumList_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> abilityEnumList_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 能力枚举值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> AbilityEnumList {
      get { return abilityEnumList_; }
    }

    /// <summary>Field number for the "AbilityEnableList" field.</summary>
    public const int AbilityEnableListFieldNumber = 2;
    private static readonly pb::FieldCodec<bool> _repeated_abilityEnableList_codec
        = pb::FieldCodec.ForBool(18);
    private readonly pbc::RepeatedField<bool> abilityEnableList_ = new pbc::RepeatedField<bool>();
    /// <summary>
    /// 是否开启能力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> AbilityEnableList {
      get { return abilityEnableList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TriggerResultChangeAbility);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TriggerResultChangeAbility other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!abilityEnumList_.Equals(other.abilityEnumList_)) return false;
      if(!abilityEnableList_.Equals(other.abilityEnableList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= abilityEnumList_.GetHashCode();
      hash ^= abilityEnableList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      abilityEnumList_.WriteTo(output, _repeated_abilityEnumList_codec);
      abilityEnableList_.WriteTo(output, _repeated_abilityEnableList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += abilityEnumList_.CalculateSize(_repeated_abilityEnumList_codec);
      size += abilityEnableList_.CalculateSize(_repeated_abilityEnableList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TriggerResultChangeAbility other) {
      if (other == null) {
        return;
      }
      abilityEnumList_.Add(other.abilityEnumList_);
      abilityEnableList_.Add(other.abilityEnableList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            abilityEnumList_.AddEntriesFrom(input, _repeated_abilityEnumList_codec);
            break;
          }
          case 18:
          case 16: {
            abilityEnableList_.AddEntriesFrom(input, _repeated_abilityEnableList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///触发结果-释放技能
  /// </summary>
  public sealed partial class TriggerResultChangeSkill : pb::IMessage<TriggerResultChangeSkill> {
    private static readonly pb::MessageParser<TriggerResultChangeSkill> _parser = new pb::MessageParser<TriggerResultChangeSkill>(() => new TriggerResultChangeSkill());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TriggerResultChangeSkill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerResultChangeSkill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerResultChangeSkill(TriggerResultChangeSkill other) : this() {
      skillEnum_ = other.skillEnum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerResultChangeSkill Clone() {
      return new TriggerResultChangeSkill(this);
    }

    /// <summary>Field number for the "SkillEnum" field.</summary>
    public const int SkillEnumFieldNumber = 1;
    private int skillEnum_;
    /// <summary>
    /// 技能枚举值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillEnum {
      get { return skillEnum_; }
      set {
        skillEnum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TriggerResultChangeSkill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TriggerResultChangeSkill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SkillEnum != other.SkillEnum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SkillEnum != 0) hash ^= SkillEnum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillEnum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SkillEnum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillEnum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillEnum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TriggerResultChangeSkill other) {
      if (other == null) {
        return;
      }
      if (other.SkillEnum != 0) {
        SkillEnum = other.SkillEnum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SkillEnum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///////////////////////////触发结果End/////////////////////////////////////////
  /// </summary>
  public sealed partial class CharacterConfig : pb::IMessage<CharacterConfig> {
    private static readonly pb::MessageParser<CharacterConfig> _parser = new pb::MessageParser<CharacterConfig>(() => new CharacterConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CharacterConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterConfig(CharacterConfig other) : this() {
      heroID_ = other.heroID_;
      skillConfigLst_ = other.skillConfigLst_.Clone();
      rangeX_ = other.rangeX_;
      rangeZ_ = other.rangeZ_;
      prefabName_ = other.prefabName_;
      key_ = other.key_;
      scale_ = other.scale_;
      prefabType_ = other.prefabType_;
      weaponResID_ = other.weaponResID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterConfig Clone() {
      return new CharacterConfig(this);
    }

    /// <summary>Field number for the "HeroID" field.</summary>
    public const int HeroIDFieldNumber = 1;
    private int heroID_;
    /// <summary>
    /// 职业ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroID {
      get { return heroID_; }
      set {
        heroID_ = value;
      }
    }

    /// <summary>Field number for the "SkillConfigLst" field.</summary>
    public const int SkillConfigLstFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Pbe.SkillConfig> _repeated_skillConfigLst_codec
        = pb::FieldCodec.ForMessage(18, global::Pbe.SkillConfig.Parser);
    private readonly pbc::RepeatedField<global::Pbe.SkillConfig> skillConfigLst_ = new pbc::RepeatedField<global::Pbe.SkillConfig>();
    /// <summary>
    /// 技能配置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.SkillConfig> SkillConfigLst {
      get { return skillConfigLst_; }
    }

    /// <summary>Field number for the "RangeX" field.</summary>
    public const int RangeXFieldNumber = 3;
    private float rangeX_;
    /// <summary>
    /// 地形判断的大小
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RangeX {
      get { return rangeX_; }
      set {
        rangeX_ = value;
      }
    }

    /// <summary>Field number for the "RangeZ" field.</summary>
    public const int RangeZFieldNumber = 4;
    private float rangeZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RangeZ {
      get { return rangeZ_; }
      set {
        rangeZ_ = value;
      }
    }

    /// <summary>Field number for the "PrefabName" field.</summary>
    public const int PrefabNameFieldNumber = 5;
    private string prefabName_ = "";
    /// <summary>
    /// 资源名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrefabName {
      get { return prefabName_; }
      set {
        prefabName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 6;
    private int key_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "Scale" field.</summary>
    public const int ScaleFieldNumber = 7;
    private float scale_;
    /// <summary>
    /// 基础缩放
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "PrefabType" field.</summary>
    public const int PrefabTypeFieldNumber = 8;
    private global::Pbe.ResType prefabType_ = 0;
    /// <summary>
    /// 资源类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.ResType PrefabType {
      get { return prefabType_; }
      set {
        prefabType_ = value;
      }
    }

    /// <summary>Field number for the "WeaponResID" field.</summary>
    public const int WeaponResIDFieldNumber = 9;
    private int weaponResID_;
    /// <summary>
    /// 武器res id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WeaponResID {
      get { return weaponResID_; }
      set {
        weaponResID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CharacterConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CharacterConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeroID != other.HeroID) return false;
      if(!skillConfigLst_.Equals(other.skillConfigLst_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RangeX, other.RangeX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RangeZ, other.RangeZ)) return false;
      if (PrefabName != other.PrefabName) return false;
      if (Key != other.Key) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Scale, other.Scale)) return false;
      if (PrefabType != other.PrefabType) return false;
      if (WeaponResID != other.WeaponResID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HeroID != 0) hash ^= HeroID.GetHashCode();
      hash ^= skillConfigLst_.GetHashCode();
      if (RangeX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RangeX);
      if (RangeZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RangeZ);
      if (PrefabName.Length != 0) hash ^= PrefabName.GetHashCode();
      if (Key != 0) hash ^= Key.GetHashCode();
      if (Scale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Scale);
      if (PrefabType != 0) hash ^= PrefabType.GetHashCode();
      if (WeaponResID != 0) hash ^= WeaponResID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HeroID);
      }
      skillConfigLst_.WriteTo(output, _repeated_skillConfigLst_codec);
      if (RangeX != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(RangeX);
      }
      if (RangeZ != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(RangeZ);
      }
      if (PrefabName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PrefabName);
      }
      if (Key != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Key);
      }
      if (Scale != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Scale);
      }
      if (PrefabType != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) PrefabType);
      }
      if (WeaponResID != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(WeaponResID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroID);
      }
      size += skillConfigLst_.CalculateSize(_repeated_skillConfigLst_codec);
      if (RangeX != 0F) {
        size += 1 + 4;
      }
      if (RangeZ != 0F) {
        size += 1 + 4;
      }
      if (PrefabName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrefabName);
      }
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key);
      }
      if (Scale != 0F) {
        size += 1 + 4;
      }
      if (PrefabType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PrefabType);
      }
      if (WeaponResID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WeaponResID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CharacterConfig other) {
      if (other == null) {
        return;
      }
      if (other.HeroID != 0) {
        HeroID = other.HeroID;
      }
      skillConfigLst_.Add(other.skillConfigLst_);
      if (other.RangeX != 0F) {
        RangeX = other.RangeX;
      }
      if (other.RangeZ != 0F) {
        RangeZ = other.RangeZ;
      }
      if (other.PrefabName.Length != 0) {
        PrefabName = other.PrefabName;
      }
      if (other.Key != 0) {
        Key = other.Key;
      }
      if (other.Scale != 0F) {
        Scale = other.Scale;
      }
      if (other.PrefabType != 0) {
        PrefabType = other.PrefabType;
      }
      if (other.WeaponResID != 0) {
        WeaponResID = other.WeaponResID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HeroID = input.ReadInt32();
            break;
          }
          case 18: {
            skillConfigLst_.AddEntriesFrom(input, _repeated_skillConfigLst_codec);
            break;
          }
          case 29: {
            RangeX = input.ReadFloat();
            break;
          }
          case 37: {
            RangeZ = input.ReadFloat();
            break;
          }
          case 42: {
            PrefabName = input.ReadString();
            break;
          }
          case 48: {
            Key = input.ReadInt32();
            break;
          }
          case 61: {
            Scale = input.ReadFloat();
            break;
          }
          case 64: {
            prefabType_ = (global::Pbe.ResType) input.ReadEnum();
            break;
          }
          case 72: {
            WeaponResID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SkillConfig : pb::IMessage<SkillConfig> {
    private static readonly pb::MessageParser<SkillConfig> _parser = new pb::MessageParser<SkillConfig>(() => new SkillConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillConfig(SkillConfig other) : this() {
      skillID_ = other.skillID_;
      key_ = other.key_;
      clipName_ = other.clipName_;
      defaultSpeed_ = other.defaultSpeed_;
      totalFrame_ = other.totalFrame_;
      soundConfigLst_ = other.soundConfigLst_.Clone();
      attackConfigLst_ = other.attackConfigLst_.Clone();
      defBoxLst_ = other.defBoxLst_.Clone();
      effectConfigLst_ = other.effectConfigLst_.Clone();
      screenEffectLst_ = other.screenEffectLst_.Clone();
      moveConfigLst_ = other.moveConfigLst_.Clone();
      changeSkillLst_ = other.changeSkillLst_.Clone();
      isLoopSkill_ = other.isLoopSkill_;
      endSkill_ = other.endSkill_;
      pressInfo_ = other.pressInfo_ != null ? other.pressInfo_.Clone() : null;
      attractLst_ = other.attractLst_.Clone();
      buffConfigLst_ = other.buffConfigLst_.Clone();
      moveInfo_ = other.moveInfo_ != null ? other.moveInfo_.Clone() : null;
      grabInfo_ = other.grabInfo_ != null ? other.grabInfo_.Clone() : null;
      grabEventLst_ = other.grabEventLst_.Clone();
      entityConfigLst_ = other.entityConfigLst_.Clone();
      heroID_ = other.heroID_.Clone();
      weaponTag_ = other.weaponTag_;
      isPvp_ = other.isPvp_;
      weaponLst_ = other.weaponLst_.Clone();
      musicID_ = other.musicID_;
      cameraFollowLst_ = other.cameraFollowLst_.Clone();
      cameraShakeLst_ = other.cameraShakeLst_.Clone();
      loopCount_ = other.loopCount_;
      effectID_ = other.effectID_;
      addSpeedNumber_ = other.addSpeedNumber_;
      totalAnimationFrame_ = other.totalAnimationFrame_;
      notInfluenceBySpeed_ = other.notInfluenceBySpeed_;
      mechanismConfigLst_ = other.mechanismConfigLst_.Clone();
      skillClipList_ = other.skillClipList_.Clone();
      frameTagLst_ = other.frameTagLst_.Clone();
      cameraControlLst_ = other.cameraControlLst_.Clone();
      screenEffectConfigLst_ = other.screenEffectConfigLst_.Clone();
      blockLst_ = other.blockLst_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillConfig Clone() {
      return new SkillConfig(this);
    }

    /// <summary>Field number for the "SkillID" field.</summary>
    public const int SkillIDFieldNumber = 1;
    private int skillID_;
    /// <summary>
    /// 技能ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillID {
      get { return skillID_; }
      set {
        skillID_ = value;
      }
    }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 2;
    private long key_;
    /// <summary>
    /// 转换map的key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "ClipName" field.</summary>
    public const int ClipNameFieldNumber = 3;
    private string clipName_ = "";
    /// <summary>
    /// 动画名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClipName {
      get { return clipName_; }
      set {
        clipName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DefaultSpeed" field.</summary>
    public const int DefaultSpeedFieldNumber = 4;
    private float defaultSpeed_;
    /// <summary>
    /// 初始速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DefaultSpeed {
      get { return defaultSpeed_; }
      set {
        defaultSpeed_ = value;
      }
    }

    /// <summary>Field number for the "TotalFrame" field.</summary>
    public const int TotalFrameFieldNumber = 5;
    private int totalFrame_;
    /// <summary>
    /// 总帧数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalFrame {
      get { return totalFrame_; }
      set {
        totalFrame_ = value;
      }
    }

    /// <summary>Field number for the "SoundConfigLst" field.</summary>
    public const int SoundConfigLstFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Pbe.SoundConfig> _repeated_soundConfigLst_codec
        = pb::FieldCodec.ForMessage(50, global::Pbe.SoundConfig.Parser);
    private readonly pbc::RepeatedField<global::Pbe.SoundConfig> soundConfigLst_ = new pbc::RepeatedField<global::Pbe.SoundConfig>();
    /// <summary>
    /// 声音配置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.SoundConfig> SoundConfigLst {
      get { return soundConfigLst_; }
    }

    /// <summary>Field number for the "AttackConfigLst" field.</summary>
    public const int AttackConfigLstFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Pbe.AttackConfig> _repeated_attackConfigLst_codec
        = pb::FieldCodec.ForMessage(58, global::Pbe.AttackConfig.Parser);
    private readonly pbc::RepeatedField<global::Pbe.AttackConfig> attackConfigLst_ = new pbc::RepeatedField<global::Pbe.AttackConfig>();
    /// <summary>
    /// 帧号-攻击
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.AttackConfig> AttackConfigLst {
      get { return attackConfigLst_; }
    }

    /// <summary>Field number for the "DefBoxLst" field.</summary>
    public const int DefBoxLstFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Pbe.DefConfig> _repeated_defBoxLst_codec
        = pb::FieldCodec.ForMessage(66, global::Pbe.DefConfig.Parser);
    private readonly pbc::RepeatedField<global::Pbe.DefConfig> defBoxLst_ = new pbc::RepeatedField<global::Pbe.DefConfig>();
    /// <summary>
    /// 帧号-受击盒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.DefConfig> DefBoxLst {
      get { return defBoxLst_; }
    }

    /// <summary>Field number for the "EffectConfigLst" field.</summary>
    public const int EffectConfigLstFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Pbe.EffectConfig> _repeated_effectConfigLst_codec
        = pb::FieldCodec.ForMessage(74, global::Pbe.EffectConfig.Parser);
    private readonly pbc::RepeatedField<global::Pbe.EffectConfig> effectConfigLst_ = new pbc::RepeatedField<global::Pbe.EffectConfig>();
    /// <summary>
    /// 特效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.EffectConfig> EffectConfigLst {
      get { return effectConfigLst_; }
    }

    /// <summary>Field number for the "ScreenEffectLst" field.</summary>
    public const int ScreenEffectLstFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Pbe.ScreenEffect> _repeated_screenEffectLst_codec
        = pb::FieldCodec.ForMessage(82, global::Pbe.ScreenEffect.Parser);
    private readonly pbc::RepeatedField<global::Pbe.ScreenEffect> screenEffectLst_ = new pbc::RepeatedField<global::Pbe.ScreenEffect>();
    /// <summary>
    /// 震屏
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.ScreenEffect> ScreenEffectLst {
      get { return screenEffectLst_; }
    }

    /// <summary>Field number for the "MoveConfigLst" field.</summary>
    public const int MoveConfigLstFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Pbe.MoveConfig> _repeated_moveConfigLst_codec
        = pb::FieldCodec.ForMessage(90, global::Pbe.MoveConfig.Parser);
    private readonly pbc::RepeatedField<global::Pbe.MoveConfig> moveConfigLst_ = new pbc::RepeatedField<global::Pbe.MoveConfig>();
    /// <summary>
    /// 帧号-移动配置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.MoveConfig> MoveConfigLst {
      get { return moveConfigLst_; }
    }

    /// <summary>Field number for the "ChangeSkillLst" field.</summary>
    public const int ChangeSkillLstFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Pbe.ChangeSkill> _repeated_changeSkillLst_codec
        = pb::FieldCodec.ForMessage(98, global::Pbe.ChangeSkill.Parser);
    private readonly pbc::RepeatedField<global::Pbe.ChangeSkill> changeSkillLst_ = new pbc::RepeatedField<global::Pbe.ChangeSkill>();
    /// <summary>
    /// 帧号-检测技能切换列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.ChangeSkill> ChangeSkillLst {
      get { return changeSkillLst_; }
    }

    /// <summary>Field number for the "IsLoopSkill" field.</summary>
    public const int IsLoopSkillFieldNumber = 13;
    private bool isLoopSkill_;
    /// <summary>
    /// 是否循环
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLoopSkill {
      get { return isLoopSkill_; }
      set {
        isLoopSkill_ = value;
      }
    }

    /// <summary>Field number for the "EndSkill" field.</summary>
    public const int EndSkillFieldNumber = 14;
    private int endSkill_;
    /// <summary>
    /// 技能结束后切换技能Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndSkill {
      get { return endSkill_; }
      set {
        endSkill_ = value;
      }
    }

    /// <summary>Field number for the "PressInfo" field.</summary>
    public const int PressInfoFieldNumber = 15;
    private global::Pbe.PressInfo pressInfo_;
    /// <summary>
    /// 技能按键逻辑
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.PressInfo PressInfo {
      get { return pressInfo_; }
      set {
        pressInfo_ = value;
      }
    }

    /// <summary>Field number for the "AttractLst" field.</summary>
    public const int AttractLstFieldNumber = 16;
    private static readonly pb::FieldCodec<global::Pbe.AttractConfig> _repeated_attractLst_codec
        = pb::FieldCodec.ForMessage(130, global::Pbe.AttractConfig.Parser);
    private readonly pbc::RepeatedField<global::Pbe.AttractConfig> attractLst_ = new pbc::RepeatedField<global::Pbe.AttractConfig>();
    /// <summary>
    /// 吸附抓取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.AttractConfig> AttractLst {
      get { return attractLst_; }
    }

    /// <summary>Field number for the "BuffConfigLst" field.</summary>
    public const int BuffConfigLstFieldNumber = 17;
    private static readonly pb::FieldCodec<global::Pbe.FrameBuff> _repeated_buffConfigLst_codec
        = pb::FieldCodec.ForMessage(138, global::Pbe.FrameBuff.Parser);
    private readonly pbc::RepeatedField<global::Pbe.FrameBuff> buffConfigLst_ = new pbc::RepeatedField<global::Pbe.FrameBuff>();
    /// <summary>
    /// 动作帧里释放buff
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.FrameBuff> BuffConfigLst {
      get { return buffConfigLst_; }
    }

    /// <summary>Field number for the "MoveInfo" field.</summary>
    public const int MoveInfoFieldNumber = 18;
    private global::Pbe.MoveInfoConfig moveInfo_;
    /// <summary>
    /// 移动信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.MoveInfoConfig MoveInfo {
      get { return moveInfo_; }
      set {
        moveInfo_ = value;
      }
    }

    /// <summary>Field number for the "GrabInfo" field.</summary>
    public const int GrabInfoFieldNumber = 19;
    private global::Pbe.GrabInfoConfig grabInfo_;
    /// <summary>
    /// 抓取信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.GrabInfoConfig GrabInfo {
      get { return grabInfo_; }
      set {
        grabInfo_ = value;
      }
    }

    /// <summary>Field number for the "GrabEventLst" field.</summary>
    public const int GrabEventLstFieldNumber = 20;
    private static readonly pb::FieldCodec<global::Pbe.GrabEventConfig> _repeated_grabEventLst_codec
        = pb::FieldCodec.ForMessage(162, global::Pbe.GrabEventConfig.Parser);
    private readonly pbc::RepeatedField<global::Pbe.GrabEventConfig> grabEventLst_ = new pbc::RepeatedField<global::Pbe.GrabEventConfig>();
    /// <summary>
    /// 抓取事件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.GrabEventConfig> GrabEventLst {
      get { return grabEventLst_; }
    }

    /// <summary>Field number for the "EntityConfigLst" field.</summary>
    public const int EntityConfigLstFieldNumber = 21;
    private static readonly pb::FieldCodec<global::Pbe.EntityConfig> _repeated_entityConfigLst_codec
        = pb::FieldCodec.ForMessage(170, global::Pbe.EntityConfig.Parser);
    private readonly pbc::RepeatedField<global::Pbe.EntityConfig> entityConfigLst_ = new pbc::RepeatedField<global::Pbe.EntityConfig>();
    /// <summary>
    /// 实体
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.EntityConfig> EntityConfigLst {
      get { return entityConfigLst_; }
    }

    /// <summary>Field number for the "HeroID" field.</summary>
    public const int HeroIDFieldNumber = 22;
    private static readonly pb::FieldCodec<int> _repeated_heroID_codec
        = pb::FieldCodec.ForInt32(178);
    private readonly pbc::RepeatedField<int> heroID_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 职业ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HeroID {
      get { return heroID_; }
    }

    /// <summary>Field number for the "WeaponTag" field.</summary>
    public const int WeaponTagFieldNumber = 23;
    private int weaponTag_;
    /// <summary>
    /// 武器Tag
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WeaponTag {
      get { return weaponTag_; }
      set {
        weaponTag_ = value;
      }
    }

    /// <summary>Field number for the "IsPvp" field.</summary>
    public const int IsPvpFieldNumber = 24;
    private bool isPvp_;
    /// <summary>
    /// 是否是PVP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPvp {
      get { return isPvp_; }
      set {
        isPvp_ = value;
      }
    }

    /// <summary>Field number for the "WeaponLst" field.</summary>
    public const int WeaponLstFieldNumber = 25;
    private static readonly pb::FieldCodec<global::Pbe.WeaponConfig> _repeated_weaponLst_codec
        = pb::FieldCodec.ForMessage(202, global::Pbe.WeaponConfig.Parser);
    private readonly pbc::RepeatedField<global::Pbe.WeaponConfig> weaponLst_ = new pbc::RepeatedField<global::Pbe.WeaponConfig>();
    /// <summary>
    /// weapon
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.WeaponConfig> WeaponLst {
      get { return weaponLst_; }
    }

    /// <summary>Field number for the "MusicID" field.</summary>
    public const int MusicIDFieldNumber = 26;
    private int musicID_;
    /// <summary>
    /// 音效ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MusicID {
      get { return musicID_; }
      set {
        musicID_ = value;
      }
    }

    /// <summary>Field number for the "CameraFollowLst" field.</summary>
    public const int CameraFollowLstFieldNumber = 27;
    private static readonly pb::FieldCodec<global::Pbe.CameraFollowConfig> _repeated_cameraFollowLst_codec
        = pb::FieldCodec.ForMessage(218, global::Pbe.CameraFollowConfig.Parser);
    private readonly pbc::RepeatedField<global::Pbe.CameraFollowConfig> cameraFollowLst_ = new pbc::RepeatedField<global::Pbe.CameraFollowConfig>();
    /// <summary>
    /// 摄像机跟随
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.CameraFollowConfig> CameraFollowLst {
      get { return cameraFollowLst_; }
    }

    /// <summary>Field number for the "CameraShakeLst" field.</summary>
    public const int CameraShakeLstFieldNumber = 28;
    private static readonly pb::FieldCodec<global::Pbe.CameraShakeConfig> _repeated_cameraShakeLst_codec
        = pb::FieldCodec.ForMessage(226, global::Pbe.CameraShakeConfig.Parser);
    private readonly pbc::RepeatedField<global::Pbe.CameraShakeConfig> cameraShakeLst_ = new pbc::RepeatedField<global::Pbe.CameraShakeConfig>();
    /// <summary>
    /// 摄像机震动
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.CameraShakeConfig> CameraShakeLst {
      get { return cameraShakeLst_; }
    }

    /// <summary>Field number for the "LoopCount" field.</summary>
    public const int LoopCountFieldNumber = 29;
    private int loopCount_;
    /// <summary>
    /// 最大循环次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LoopCount {
      get { return loopCount_; }
      set {
        loopCount_ = value;
      }
    }

    /// <summary>Field number for the "EffectID" field.</summary>
    public const int EffectIDFieldNumber = 30;
    private int effectID_;
    /// <summary>
    /// 特效ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EffectID {
      get { return effectID_; }
      set {
        effectID_ = value;
      }
    }

    /// <summary>Field number for the "AddSpeedNumber" field.</summary>
    public const int AddSpeedNumberFieldNumber = 31;
    private float addSpeedNumber_;
    /// <summary>
    /// 加速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AddSpeedNumber {
      get { return addSpeedNumber_; }
      set {
        addSpeedNumber_ = value;
      }
    }

    /// <summary>Field number for the "TotalAnimationFrame" field.</summary>
    public const int TotalAnimationFrameFieldNumber = 32;
    private int totalAnimationFrame_;
    /// <summary>
    /// 总的动画时长
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalAnimationFrame {
      get { return totalAnimationFrame_; }
      set {
        totalAnimationFrame_ = value;
      }
    }

    /// <summary>Field number for the "NotInfluenceBySpeed" field.</summary>
    public const int NotInfluenceBySpeedFieldNumber = 33;
    private bool notInfluenceBySpeed_;
    /// <summary>
    /// 不受攻速，施法速度影响
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NotInfluenceBySpeed {
      get { return notInfluenceBySpeed_; }
      set {
        notInfluenceBySpeed_ = value;
      }
    }

    /// <summary>Field number for the "MechanismConfigLst" field.</summary>
    public const int MechanismConfigLstFieldNumber = 34;
    private static readonly pb::FieldCodec<global::Pbe.FrameMechanism> _repeated_mechanismConfigLst_codec
        = pb::FieldCodec.ForMessage(274, global::Pbe.FrameMechanism.Parser);
    private readonly pbc::RepeatedField<global::Pbe.FrameMechanism> mechanismConfigLst_ = new pbc::RepeatedField<global::Pbe.FrameMechanism>();
    /// <summary>
    /// 动作帧里添加/删除机制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.FrameMechanism> MechanismConfigLst {
      get { return mechanismConfigLst_; }
    }

    /// <summary>Field number for the "SkillClipList" field.</summary>
    public const int SkillClipListFieldNumber = 35;
    private static readonly pb::FieldCodec<global::Pbe.SkillClipInfo> _repeated_skillClipList_codec
        = pb::FieldCodec.ForMessage(282, global::Pbe.SkillClipInfo.Parser);
    private readonly pbc::RepeatedField<global::Pbe.SkillClipInfo> skillClipList_ = new pbc::RepeatedField<global::Pbe.SkillClipInfo>();
    /// <summary>
    /// 技能阶段列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.SkillClipInfo> SkillClipList {
      get { return skillClipList_; }
    }

    /// <summary>Field number for the "FrameTagLst" field.</summary>
    public const int FrameTagLstFieldNumber = 36;
    private static readonly pb::FieldCodec<global::Pbe.FrameTag> _repeated_frameTagLst_codec
        = pb::FieldCodec.ForMessage(290, global::Pbe.FrameTag.Parser);
    private readonly pbc::RepeatedField<global::Pbe.FrameTag> frameTagLst_ = new pbc::RepeatedField<global::Pbe.FrameTag>();
    /// <summary>
    /// 技能阶段列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.FrameTag> FrameTagLst {
      get { return frameTagLst_; }
    }

    /// <summary>Field number for the "CameraControlLst" field.</summary>
    public const int CameraControlLstFieldNumber = 37;
    private static readonly pb::FieldCodec<global::Pbe.CameraControlConfig> _repeated_cameraControlLst_codec
        = pb::FieldCodec.ForMessage(298, global::Pbe.CameraControlConfig.Parser);
    private readonly pbc::RepeatedField<global::Pbe.CameraControlConfig> cameraControlLst_ = new pbc::RepeatedField<global::Pbe.CameraControlConfig>();
    /// <summary>
    /// 技能控制镜头
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.CameraControlConfig> CameraControlLst {
      get { return cameraControlLst_; }
    }

    /// <summary>Field number for the "ScreenEffectConfigLst" field.</summary>
    public const int ScreenEffectConfigLstFieldNumber = 38;
    private static readonly pb::FieldCodec<global::Pbe.ScreenEffectConfig> _repeated_screenEffectConfigLst_codec
        = pb::FieldCodec.ForMessage(306, global::Pbe.ScreenEffectConfig.Parser);
    private readonly pbc::RepeatedField<global::Pbe.ScreenEffectConfig> screenEffectConfigLst_ = new pbc::RepeatedField<global::Pbe.ScreenEffectConfig>();
    /// <summary>
    /// 屏幕特效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.ScreenEffectConfig> ScreenEffectConfigLst {
      get { return screenEffectConfigLst_; }
    }

    /// <summary>Field number for the "BlockLst" field.</summary>
    public const int BlockLstFieldNumber = 39;
    private static readonly pb::FieldCodec<global::Pbe.BlockConfig> _repeated_blockLst_codec
        = pb::FieldCodec.ForMessage(314, global::Pbe.BlockConfig.Parser);
    private readonly pbc::RepeatedField<global::Pbe.BlockConfig> blockLst_ = new pbc::RepeatedField<global::Pbe.BlockConfig>();
    /// <summary>
    /// 阻挡盒子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.BlockConfig> BlockLst {
      get { return blockLst_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SkillID != other.SkillID) return false;
      if (Key != other.Key) return false;
      if (ClipName != other.ClipName) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DefaultSpeed, other.DefaultSpeed)) return false;
      if (TotalFrame != other.TotalFrame) return false;
      if(!soundConfigLst_.Equals(other.soundConfigLst_)) return false;
      if(!attackConfigLst_.Equals(other.attackConfigLst_)) return false;
      if(!defBoxLst_.Equals(other.defBoxLst_)) return false;
      if(!effectConfigLst_.Equals(other.effectConfigLst_)) return false;
      if(!screenEffectLst_.Equals(other.screenEffectLst_)) return false;
      if(!moveConfigLst_.Equals(other.moveConfigLst_)) return false;
      if(!changeSkillLst_.Equals(other.changeSkillLst_)) return false;
      if (IsLoopSkill != other.IsLoopSkill) return false;
      if (EndSkill != other.EndSkill) return false;
      if (!object.Equals(PressInfo, other.PressInfo)) return false;
      if(!attractLst_.Equals(other.attractLst_)) return false;
      if(!buffConfigLst_.Equals(other.buffConfigLst_)) return false;
      if (!object.Equals(MoveInfo, other.MoveInfo)) return false;
      if (!object.Equals(GrabInfo, other.GrabInfo)) return false;
      if(!grabEventLst_.Equals(other.grabEventLst_)) return false;
      if(!entityConfigLst_.Equals(other.entityConfigLst_)) return false;
      if(!heroID_.Equals(other.heroID_)) return false;
      if (WeaponTag != other.WeaponTag) return false;
      if (IsPvp != other.IsPvp) return false;
      if(!weaponLst_.Equals(other.weaponLst_)) return false;
      if (MusicID != other.MusicID) return false;
      if(!cameraFollowLst_.Equals(other.cameraFollowLst_)) return false;
      if(!cameraShakeLst_.Equals(other.cameraShakeLst_)) return false;
      if (LoopCount != other.LoopCount) return false;
      if (EffectID != other.EffectID) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AddSpeedNumber, other.AddSpeedNumber)) return false;
      if (TotalAnimationFrame != other.TotalAnimationFrame) return false;
      if (NotInfluenceBySpeed != other.NotInfluenceBySpeed) return false;
      if(!mechanismConfigLst_.Equals(other.mechanismConfigLst_)) return false;
      if(!skillClipList_.Equals(other.skillClipList_)) return false;
      if(!frameTagLst_.Equals(other.frameTagLst_)) return false;
      if(!cameraControlLst_.Equals(other.cameraControlLst_)) return false;
      if(!screenEffectConfigLst_.Equals(other.screenEffectConfigLst_)) return false;
      if(!blockLst_.Equals(other.blockLst_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SkillID != 0) hash ^= SkillID.GetHashCode();
      if (Key != 0L) hash ^= Key.GetHashCode();
      if (ClipName.Length != 0) hash ^= ClipName.GetHashCode();
      if (DefaultSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DefaultSpeed);
      if (TotalFrame != 0) hash ^= TotalFrame.GetHashCode();
      hash ^= soundConfigLst_.GetHashCode();
      hash ^= attackConfigLst_.GetHashCode();
      hash ^= defBoxLst_.GetHashCode();
      hash ^= effectConfigLst_.GetHashCode();
      hash ^= screenEffectLst_.GetHashCode();
      hash ^= moveConfigLst_.GetHashCode();
      hash ^= changeSkillLst_.GetHashCode();
      if (IsLoopSkill != false) hash ^= IsLoopSkill.GetHashCode();
      if (EndSkill != 0) hash ^= EndSkill.GetHashCode();
      if (pressInfo_ != null) hash ^= PressInfo.GetHashCode();
      hash ^= attractLst_.GetHashCode();
      hash ^= buffConfigLst_.GetHashCode();
      if (moveInfo_ != null) hash ^= MoveInfo.GetHashCode();
      if (grabInfo_ != null) hash ^= GrabInfo.GetHashCode();
      hash ^= grabEventLst_.GetHashCode();
      hash ^= entityConfigLst_.GetHashCode();
      hash ^= heroID_.GetHashCode();
      if (WeaponTag != 0) hash ^= WeaponTag.GetHashCode();
      if (IsPvp != false) hash ^= IsPvp.GetHashCode();
      hash ^= weaponLst_.GetHashCode();
      if (MusicID != 0) hash ^= MusicID.GetHashCode();
      hash ^= cameraFollowLst_.GetHashCode();
      hash ^= cameraShakeLst_.GetHashCode();
      if (LoopCount != 0) hash ^= LoopCount.GetHashCode();
      if (EffectID != 0) hash ^= EffectID.GetHashCode();
      if (AddSpeedNumber != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AddSpeedNumber);
      if (TotalAnimationFrame != 0) hash ^= TotalAnimationFrame.GetHashCode();
      if (NotInfluenceBySpeed != false) hash ^= NotInfluenceBySpeed.GetHashCode();
      hash ^= mechanismConfigLst_.GetHashCode();
      hash ^= skillClipList_.GetHashCode();
      hash ^= frameTagLst_.GetHashCode();
      hash ^= cameraControlLst_.GetHashCode();
      hash ^= screenEffectConfigLst_.GetHashCode();
      hash ^= blockLst_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SkillID);
      }
      if (Key != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Key);
      }
      if (ClipName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClipName);
      }
      if (DefaultSpeed != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(DefaultSpeed);
      }
      if (TotalFrame != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TotalFrame);
      }
      soundConfigLst_.WriteTo(output, _repeated_soundConfigLst_codec);
      attackConfigLst_.WriteTo(output, _repeated_attackConfigLst_codec);
      defBoxLst_.WriteTo(output, _repeated_defBoxLst_codec);
      effectConfigLst_.WriteTo(output, _repeated_effectConfigLst_codec);
      screenEffectLst_.WriteTo(output, _repeated_screenEffectLst_codec);
      moveConfigLst_.WriteTo(output, _repeated_moveConfigLst_codec);
      changeSkillLst_.WriteTo(output, _repeated_changeSkillLst_codec);
      if (IsLoopSkill != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsLoopSkill);
      }
      if (EndSkill != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(EndSkill);
      }
      if (pressInfo_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(PressInfo);
      }
      attractLst_.WriteTo(output, _repeated_attractLst_codec);
      buffConfigLst_.WriteTo(output, _repeated_buffConfigLst_codec);
      if (moveInfo_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(MoveInfo);
      }
      if (grabInfo_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(GrabInfo);
      }
      grabEventLst_.WriteTo(output, _repeated_grabEventLst_codec);
      entityConfigLst_.WriteTo(output, _repeated_entityConfigLst_codec);
      heroID_.WriteTo(output, _repeated_heroID_codec);
      if (WeaponTag != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(WeaponTag);
      }
      if (IsPvp != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(IsPvp);
      }
      weaponLst_.WriteTo(output, _repeated_weaponLst_codec);
      if (MusicID != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(MusicID);
      }
      cameraFollowLst_.WriteTo(output, _repeated_cameraFollowLst_codec);
      cameraShakeLst_.WriteTo(output, _repeated_cameraShakeLst_codec);
      if (LoopCount != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(LoopCount);
      }
      if (EffectID != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(EffectID);
      }
      if (AddSpeedNumber != 0F) {
        output.WriteRawTag(253, 1);
        output.WriteFloat(AddSpeedNumber);
      }
      if (TotalAnimationFrame != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(TotalAnimationFrame);
      }
      if (NotInfluenceBySpeed != false) {
        output.WriteRawTag(136, 2);
        output.WriteBool(NotInfluenceBySpeed);
      }
      mechanismConfigLst_.WriteTo(output, _repeated_mechanismConfigLst_codec);
      skillClipList_.WriteTo(output, _repeated_skillClipList_codec);
      frameTagLst_.WriteTo(output, _repeated_frameTagLst_codec);
      cameraControlLst_.WriteTo(output, _repeated_cameraControlLst_codec);
      screenEffectConfigLst_.WriteTo(output, _repeated_screenEffectConfigLst_codec);
      blockLst_.WriteTo(output, _repeated_blockLst_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillID);
      }
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      if (ClipName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClipName);
      }
      if (DefaultSpeed != 0F) {
        size += 1 + 4;
      }
      if (TotalFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalFrame);
      }
      size += soundConfigLst_.CalculateSize(_repeated_soundConfigLst_codec);
      size += attackConfigLst_.CalculateSize(_repeated_attackConfigLst_codec);
      size += defBoxLst_.CalculateSize(_repeated_defBoxLst_codec);
      size += effectConfigLst_.CalculateSize(_repeated_effectConfigLst_codec);
      size += screenEffectLst_.CalculateSize(_repeated_screenEffectLst_codec);
      size += moveConfigLst_.CalculateSize(_repeated_moveConfigLst_codec);
      size += changeSkillLst_.CalculateSize(_repeated_changeSkillLst_codec);
      if (IsLoopSkill != false) {
        size += 1 + 1;
      }
      if (EndSkill != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndSkill);
      }
      if (pressInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PressInfo);
      }
      size += attractLst_.CalculateSize(_repeated_attractLst_codec);
      size += buffConfigLst_.CalculateSize(_repeated_buffConfigLst_codec);
      if (moveInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MoveInfo);
      }
      if (grabInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GrabInfo);
      }
      size += grabEventLst_.CalculateSize(_repeated_grabEventLst_codec);
      size += entityConfigLst_.CalculateSize(_repeated_entityConfigLst_codec);
      size += heroID_.CalculateSize(_repeated_heroID_codec);
      if (WeaponTag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WeaponTag);
      }
      if (IsPvp != false) {
        size += 2 + 1;
      }
      size += weaponLst_.CalculateSize(_repeated_weaponLst_codec);
      if (MusicID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MusicID);
      }
      size += cameraFollowLst_.CalculateSize(_repeated_cameraFollowLst_codec);
      size += cameraShakeLst_.CalculateSize(_repeated_cameraShakeLst_codec);
      if (LoopCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LoopCount);
      }
      if (EffectID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EffectID);
      }
      if (AddSpeedNumber != 0F) {
        size += 2 + 4;
      }
      if (TotalAnimationFrame != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TotalAnimationFrame);
      }
      if (NotInfluenceBySpeed != false) {
        size += 2 + 1;
      }
      size += mechanismConfigLst_.CalculateSize(_repeated_mechanismConfigLst_codec);
      size += skillClipList_.CalculateSize(_repeated_skillClipList_codec);
      size += frameTagLst_.CalculateSize(_repeated_frameTagLst_codec);
      size += cameraControlLst_.CalculateSize(_repeated_cameraControlLst_codec);
      size += screenEffectConfigLst_.CalculateSize(_repeated_screenEffectConfigLst_codec);
      size += blockLst_.CalculateSize(_repeated_blockLst_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillConfig other) {
      if (other == null) {
        return;
      }
      if (other.SkillID != 0) {
        SkillID = other.SkillID;
      }
      if (other.Key != 0L) {
        Key = other.Key;
      }
      if (other.ClipName.Length != 0) {
        ClipName = other.ClipName;
      }
      if (other.DefaultSpeed != 0F) {
        DefaultSpeed = other.DefaultSpeed;
      }
      if (other.TotalFrame != 0) {
        TotalFrame = other.TotalFrame;
      }
      soundConfigLst_.Add(other.soundConfigLst_);
      attackConfigLst_.Add(other.attackConfigLst_);
      defBoxLst_.Add(other.defBoxLst_);
      effectConfigLst_.Add(other.effectConfigLst_);
      screenEffectLst_.Add(other.screenEffectLst_);
      moveConfigLst_.Add(other.moveConfigLst_);
      changeSkillLst_.Add(other.changeSkillLst_);
      if (other.IsLoopSkill != false) {
        IsLoopSkill = other.IsLoopSkill;
      }
      if (other.EndSkill != 0) {
        EndSkill = other.EndSkill;
      }
      if (other.pressInfo_ != null) {
        if (pressInfo_ == null) {
          pressInfo_ = new global::Pbe.PressInfo();
        }
        PressInfo.MergeFrom(other.PressInfo);
      }
      attractLst_.Add(other.attractLst_);
      buffConfigLst_.Add(other.buffConfigLst_);
      if (other.moveInfo_ != null) {
        if (moveInfo_ == null) {
          moveInfo_ = new global::Pbe.MoveInfoConfig();
        }
        MoveInfo.MergeFrom(other.MoveInfo);
      }
      if (other.grabInfo_ != null) {
        if (grabInfo_ == null) {
          grabInfo_ = new global::Pbe.GrabInfoConfig();
        }
        GrabInfo.MergeFrom(other.GrabInfo);
      }
      grabEventLst_.Add(other.grabEventLst_);
      entityConfigLst_.Add(other.entityConfigLst_);
      heroID_.Add(other.heroID_);
      if (other.WeaponTag != 0) {
        WeaponTag = other.WeaponTag;
      }
      if (other.IsPvp != false) {
        IsPvp = other.IsPvp;
      }
      weaponLst_.Add(other.weaponLst_);
      if (other.MusicID != 0) {
        MusicID = other.MusicID;
      }
      cameraFollowLst_.Add(other.cameraFollowLst_);
      cameraShakeLst_.Add(other.cameraShakeLst_);
      if (other.LoopCount != 0) {
        LoopCount = other.LoopCount;
      }
      if (other.EffectID != 0) {
        EffectID = other.EffectID;
      }
      if (other.AddSpeedNumber != 0F) {
        AddSpeedNumber = other.AddSpeedNumber;
      }
      if (other.TotalAnimationFrame != 0) {
        TotalAnimationFrame = other.TotalAnimationFrame;
      }
      if (other.NotInfluenceBySpeed != false) {
        NotInfluenceBySpeed = other.NotInfluenceBySpeed;
      }
      mechanismConfigLst_.Add(other.mechanismConfigLst_);
      skillClipList_.Add(other.skillClipList_);
      frameTagLst_.Add(other.frameTagLst_);
      cameraControlLst_.Add(other.cameraControlLst_);
      screenEffectConfigLst_.Add(other.screenEffectConfigLst_);
      blockLst_.Add(other.blockLst_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SkillID = input.ReadInt32();
            break;
          }
          case 16: {
            Key = input.ReadInt64();
            break;
          }
          case 26: {
            ClipName = input.ReadString();
            break;
          }
          case 37: {
            DefaultSpeed = input.ReadFloat();
            break;
          }
          case 40: {
            TotalFrame = input.ReadInt32();
            break;
          }
          case 50: {
            soundConfigLst_.AddEntriesFrom(input, _repeated_soundConfigLst_codec);
            break;
          }
          case 58: {
            attackConfigLst_.AddEntriesFrom(input, _repeated_attackConfigLst_codec);
            break;
          }
          case 66: {
            defBoxLst_.AddEntriesFrom(input, _repeated_defBoxLst_codec);
            break;
          }
          case 74: {
            effectConfigLst_.AddEntriesFrom(input, _repeated_effectConfigLst_codec);
            break;
          }
          case 82: {
            screenEffectLst_.AddEntriesFrom(input, _repeated_screenEffectLst_codec);
            break;
          }
          case 90: {
            moveConfigLst_.AddEntriesFrom(input, _repeated_moveConfigLst_codec);
            break;
          }
          case 98: {
            changeSkillLst_.AddEntriesFrom(input, _repeated_changeSkillLst_codec);
            break;
          }
          case 104: {
            IsLoopSkill = input.ReadBool();
            break;
          }
          case 112: {
            EndSkill = input.ReadInt32();
            break;
          }
          case 122: {
            if (pressInfo_ == null) {
              pressInfo_ = new global::Pbe.PressInfo();
            }
            input.ReadMessage(pressInfo_);
            break;
          }
          case 130: {
            attractLst_.AddEntriesFrom(input, _repeated_attractLst_codec);
            break;
          }
          case 138: {
            buffConfigLst_.AddEntriesFrom(input, _repeated_buffConfigLst_codec);
            break;
          }
          case 146: {
            if (moveInfo_ == null) {
              moveInfo_ = new global::Pbe.MoveInfoConfig();
            }
            input.ReadMessage(moveInfo_);
            break;
          }
          case 154: {
            if (grabInfo_ == null) {
              grabInfo_ = new global::Pbe.GrabInfoConfig();
            }
            input.ReadMessage(grabInfo_);
            break;
          }
          case 162: {
            grabEventLst_.AddEntriesFrom(input, _repeated_grabEventLst_codec);
            break;
          }
          case 170: {
            entityConfigLst_.AddEntriesFrom(input, _repeated_entityConfigLst_codec);
            break;
          }
          case 178:
          case 176: {
            heroID_.AddEntriesFrom(input, _repeated_heroID_codec);
            break;
          }
          case 184: {
            WeaponTag = input.ReadInt32();
            break;
          }
          case 192: {
            IsPvp = input.ReadBool();
            break;
          }
          case 202: {
            weaponLst_.AddEntriesFrom(input, _repeated_weaponLst_codec);
            break;
          }
          case 208: {
            MusicID = input.ReadInt32();
            break;
          }
          case 218: {
            cameraFollowLst_.AddEntriesFrom(input, _repeated_cameraFollowLst_codec);
            break;
          }
          case 226: {
            cameraShakeLst_.AddEntriesFrom(input, _repeated_cameraShakeLst_codec);
            break;
          }
          case 232: {
            LoopCount = input.ReadInt32();
            break;
          }
          case 240: {
            EffectID = input.ReadInt32();
            break;
          }
          case 253: {
            AddSpeedNumber = input.ReadFloat();
            break;
          }
          case 256: {
            TotalAnimationFrame = input.ReadInt32();
            break;
          }
          case 264: {
            NotInfluenceBySpeed = input.ReadBool();
            break;
          }
          case 274: {
            mechanismConfigLst_.AddEntriesFrom(input, _repeated_mechanismConfigLst_codec);
            break;
          }
          case 282: {
            skillClipList_.AddEntriesFrom(input, _repeated_skillClipList_codec);
            break;
          }
          case 290: {
            frameTagLst_.AddEntriesFrom(input, _repeated_frameTagLst_codec);
            break;
          }
          case 298: {
            cameraControlLst_.AddEntriesFrom(input, _repeated_cameraControlLst_codec);
            break;
          }
          case 306: {
            screenEffectConfigLst_.AddEntriesFrom(input, _repeated_screenEffectConfigLst_codec);
            break;
          }
          case 314: {
            blockLst_.AddEntriesFrom(input, _repeated_blockLst_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SkillClipInfo : pb::IMessage<SkillClipInfo> {
    private static readonly pb::MessageParser<SkillClipInfo> _parser = new pb::MessageParser<SkillClipInfo>(() => new SkillClipInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillClipInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillClipInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillClipInfo(SkillClipInfo other) : this() {
      clipID_ = other.clipID_;
      changeType_ = other.changeType_;
      costComboBean_ = other.costComboBean_;
      targetClipID_ = other.targetClipID_;
      changeFrame_ = other.changeFrame_;
      changeWhenNoPress_ = other.changeWhenNoPress_;
      changePro_ = other.changePro_;
      changeWhenHit_ = other.changeWhenHit_;
      isFinish_ = other.isFinish_;
      blockType_ = other.blockType_;
      dirType_ = other.dirType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillClipInfo Clone() {
      return new SkillClipInfo(this);
    }

    /// <summary>Field number for the "ClipID" field.</summary>
    public const int ClipIDFieldNumber = 1;
    private int clipID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClipID {
      get { return clipID_; }
      set {
        clipID_ = value;
      }
    }

    /// <summary>Field number for the "ChangeType" field.</summary>
    public const int ChangeTypeFieldNumber = 2;
    private global::Pbe.EnumClipChangeType changeType_ = 0;
    /// <summary>
    ///跳转条件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.EnumClipChangeType ChangeType {
      get { return changeType_; }
      set {
        changeType_ = value;
      }
    }

    /// <summary>Field number for the "CostComboBean" field.</summary>
    public const int CostComboBeanFieldNumber = 3;
    private bool costComboBean_;
    /// <summary>
    ///计算阶段数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CostComboBean {
      get { return costComboBean_; }
      set {
        costComboBean_ = value;
      }
    }

    /// <summary>Field number for the "TargetClipID" field.</summary>
    public const int TargetClipIDFieldNumber = 4;
    private int targetClipID_;
    /// <summary>
    ///跳转目标技能 PressAgain条件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetClipID {
      get { return targetClipID_; }
      set {
        targetClipID_ = value;
      }
    }

    /// <summary>Field number for the "ChangeFrame" field.</summary>
    public const int ChangeFrameFieldNumber = 5;
    private int changeFrame_;
    /// <summary>
    ///跳转帧 PressAgain PressHold条件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChangeFrame {
      get { return changeFrame_; }
      set {
        changeFrame_ = value;
      }
    }

    /// <summary>Field number for the "ChangeWhenNoPress" field.</summary>
    public const int ChangeWhenNoPressFieldNumber = 6;
    private bool changeWhenNoPress_;
    /// <summary>
    ///无按下切换下一段 PressAgain条件 默认为true
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ChangeWhenNoPress {
      get { return changeWhenNoPress_; }
      set {
        changeWhenNoPress_ = value;
      }
    }

    /// <summary>Field number for the "ChangePro" field.</summary>
    public const int ChangeProFieldNumber = 7;
    private int changePro_;
    /// <summary>
    ///跳转概率 Probability条件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChangePro {
      get { return changePro_; }
      set {
        changePro_ = value;
      }
    }

    /// <summary>Field number for the "ChangeWhenHit" field.</summary>
    public const int ChangeWhenHitFieldNumber = 8;
    private bool changeWhenHit_;
    /// <summary>
    ///命中立即切换 HitTarget条件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ChangeWhenHit {
      get { return changeWhenHit_; }
      set {
        changeWhenHit_ = value;
      }
    }

    /// <summary>Field number for the "isFinish" field.</summary>
    public const int IsFinishFieldNumber = 9;
    private bool isFinish_;
    /// <summary>
    ///检查碰撞 条件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFinish {
      get { return isFinish_; }
      set {
        isFinish_ = value;
      }
    }

    /// <summary>Field number for the "blockType" field.</summary>
    public const int BlockTypeFieldNumber = 10;
    private int blockType_;
    /// <summary>
    /// 阻挡类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockType {
      get { return blockType_; }
      set {
        blockType_ = value;
      }
    }

    /// <summary>Field number for the "dirType" field.</summary>
    public const int DirTypeFieldNumber = 11;
    private int dirType_;
    /// <summary>
    /// 阻挡方向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DirType {
      get { return dirType_; }
      set {
        dirType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillClipInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillClipInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClipID != other.ClipID) return false;
      if (ChangeType != other.ChangeType) return false;
      if (CostComboBean != other.CostComboBean) return false;
      if (TargetClipID != other.TargetClipID) return false;
      if (ChangeFrame != other.ChangeFrame) return false;
      if (ChangeWhenNoPress != other.ChangeWhenNoPress) return false;
      if (ChangePro != other.ChangePro) return false;
      if (ChangeWhenHit != other.ChangeWhenHit) return false;
      if (IsFinish != other.IsFinish) return false;
      if (BlockType != other.BlockType) return false;
      if (DirType != other.DirType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClipID != 0) hash ^= ClipID.GetHashCode();
      if (ChangeType != 0) hash ^= ChangeType.GetHashCode();
      if (CostComboBean != false) hash ^= CostComboBean.GetHashCode();
      if (TargetClipID != 0) hash ^= TargetClipID.GetHashCode();
      if (ChangeFrame != 0) hash ^= ChangeFrame.GetHashCode();
      if (ChangeWhenNoPress != false) hash ^= ChangeWhenNoPress.GetHashCode();
      if (ChangePro != 0) hash ^= ChangePro.GetHashCode();
      if (ChangeWhenHit != false) hash ^= ChangeWhenHit.GetHashCode();
      if (IsFinish != false) hash ^= IsFinish.GetHashCode();
      if (BlockType != 0) hash ^= BlockType.GetHashCode();
      if (DirType != 0) hash ^= DirType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClipID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ClipID);
      }
      if (ChangeType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ChangeType);
      }
      if (CostComboBean != false) {
        output.WriteRawTag(24);
        output.WriteBool(CostComboBean);
      }
      if (TargetClipID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TargetClipID);
      }
      if (ChangeFrame != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ChangeFrame);
      }
      if (ChangeWhenNoPress != false) {
        output.WriteRawTag(48);
        output.WriteBool(ChangeWhenNoPress);
      }
      if (ChangePro != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ChangePro);
      }
      if (ChangeWhenHit != false) {
        output.WriteRawTag(64);
        output.WriteBool(ChangeWhenHit);
      }
      if (IsFinish != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsFinish);
      }
      if (BlockType != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(BlockType);
      }
      if (DirType != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(DirType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClipID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClipID);
      }
      if (ChangeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChangeType);
      }
      if (CostComboBean != false) {
        size += 1 + 1;
      }
      if (TargetClipID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetClipID);
      }
      if (ChangeFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChangeFrame);
      }
      if (ChangeWhenNoPress != false) {
        size += 1 + 1;
      }
      if (ChangePro != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChangePro);
      }
      if (ChangeWhenHit != false) {
        size += 1 + 1;
      }
      if (IsFinish != false) {
        size += 1 + 1;
      }
      if (BlockType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockType);
      }
      if (DirType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DirType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillClipInfo other) {
      if (other == null) {
        return;
      }
      if (other.ClipID != 0) {
        ClipID = other.ClipID;
      }
      if (other.ChangeType != 0) {
        ChangeType = other.ChangeType;
      }
      if (other.CostComboBean != false) {
        CostComboBean = other.CostComboBean;
      }
      if (other.TargetClipID != 0) {
        TargetClipID = other.TargetClipID;
      }
      if (other.ChangeFrame != 0) {
        ChangeFrame = other.ChangeFrame;
      }
      if (other.ChangeWhenNoPress != false) {
        ChangeWhenNoPress = other.ChangeWhenNoPress;
      }
      if (other.ChangePro != 0) {
        ChangePro = other.ChangePro;
      }
      if (other.ChangeWhenHit != false) {
        ChangeWhenHit = other.ChangeWhenHit;
      }
      if (other.IsFinish != false) {
        IsFinish = other.IsFinish;
      }
      if (other.BlockType != 0) {
        BlockType = other.BlockType;
      }
      if (other.DirType != 0) {
        DirType = other.DirType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ClipID = input.ReadInt32();
            break;
          }
          case 16: {
            changeType_ = (global::Pbe.EnumClipChangeType) input.ReadEnum();
            break;
          }
          case 24: {
            CostComboBean = input.ReadBool();
            break;
          }
          case 32: {
            TargetClipID = input.ReadInt32();
            break;
          }
          case 40: {
            ChangeFrame = input.ReadInt32();
            break;
          }
          case 48: {
            ChangeWhenNoPress = input.ReadBool();
            break;
          }
          case 56: {
            ChangePro = input.ReadInt32();
            break;
          }
          case 64: {
            ChangeWhenHit = input.ReadBool();
            break;
          }
          case 72: {
            IsFinish = input.ReadBool();
            break;
          }
          case 80: {
            BlockType = input.ReadInt32();
            break;
          }
          case 88: {
            DirType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EntityConfig : pb::IMessage<EntityConfig> {
    private static readonly pb::MessageParser<EntityConfig> _parser = new pb::MessageParser<EntityConfig>(() => new EntityConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EntityConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityConfig(EntityConfig other) : this() {
      key_ = other.key_;
      entityInfoList_ = other.entityInfoList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityConfig Clone() {
      return new EntityConfig(this);
    }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 2;
    private int key_;
    /// <summary>
    ///int32 FrameNum                                         = 1; // 起始帧
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "EntityInfoList" field.</summary>
    public const int EntityInfoListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Pbe.EntityInfoConfig> _repeated_entityInfoList_codec
        = pb::FieldCodec.ForMessage(26, global::Pbe.EntityInfoConfig.Parser);
    private readonly pbc::RepeatedField<global::Pbe.EntityInfoConfig> entityInfoList_ = new pbc::RepeatedField<global::Pbe.EntityInfoConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.EntityInfoConfig> EntityInfoList {
      get { return entityInfoList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EntityConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EntityConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if(!entityInfoList_.Equals(other.entityInfoList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key != 0) hash ^= Key.GetHashCode();
      hash ^= entityInfoList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Key);
      }
      entityInfoList_.WriteTo(output, _repeated_entityInfoList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key);
      }
      size += entityInfoList_.CalculateSize(_repeated_entityInfoList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EntityConfig other) {
      if (other == null) {
        return;
      }
      if (other.Key != 0) {
        Key = other.Key;
      }
      entityInfoList_.Add(other.entityInfoList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            Key = input.ReadInt32();
            break;
          }
          case 26: {
            entityInfoList_.AddEntriesFrom(input, _repeated_entityInfoList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EntityInfoConfig : pb::IMessage<EntityInfoConfig> {
    private static readonly pb::MessageParser<EntityInfoConfig> _parser = new pb::MessageParser<EntityInfoConfig>(() => new EntityInfoConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EntityInfoConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityInfoConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityInfoConfig(EntityInfoConfig other) : this() {
      offsetX_ = other.offsetX_;
      offsetY_ = other.offsetY_;
      offsetZ_ = other.offsetZ_;
      durationTime_ = other.durationTime_;
      moveSpeedX_ = other.moveSpeedX_;
      moveSpeedY_ = other.moveSpeedY_;
      addSpeedX_ = other.addSpeedX_;
      addSpeedY_ = other.addSpeedY_;
      randCount_ = other.randCount_ != null ? other.randCount_.Clone() : null;
      maxAttackTimes_ = other.maxAttackTimes_;
      maxDistance_ = other.maxDistance_;
      bulletTargetType_ = other.bulletTargetType_;
      randArea_ = other.randArea_ != null ? other.randArea_.Clone() : null;
      enitiyId_ = other.enitiyId_;
      skillInfo_ = other.skillInfo_;
      isIgnoreWall_ = other.isIgnoreWall_;
      isCameraFollow_ = other.isCameraFollow_;
      moveSpeedZ_ = other.moveSpeedZ_;
      addSpeedZ_ = other.addSpeedZ_;
      notChangeFace_ = other.notChangeFace_;
      isEffectRotate_ = other.isEffectRotate_;
      backShout_ = other.backShout_;
      isScaleInherit_ = other.isScaleInherit_;
      initState_ = other.initState_;
      isPool_ = other.isPool_;
      heightMin_ = other.heightMin_;
      heightMax_ = other.heightMax_;
      touchGroundDelayFrame_ = other.touchGroundDelayFrame_;
      rangeRadius_ = other.rangeRadius_;
      rangeType_ = other.rangeType_;
      entityTraceConfig_ = other.entityTraceConfig_ != null ? other.entityTraceConfig_.Clone() : null;
      effectUnlockAxis_ = other.effectUnlockAxis_ != null ? other.effectUnlockAxis_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityInfoConfig Clone() {
      return new EntityInfoConfig(this);
    }

    /// <summary>Field number for the "OffsetX" field.</summary>
    public const int OffsetXFieldNumber = 1;
    private float offsetX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OffsetX {
      get { return offsetX_; }
      set {
        offsetX_ = value;
      }
    }

    /// <summary>Field number for the "OffsetY" field.</summary>
    public const int OffsetYFieldNumber = 2;
    private float offsetY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OffsetY {
      get { return offsetY_; }
      set {
        offsetY_ = value;
      }
    }

    /// <summary>Field number for the "OffsetZ" field.</summary>
    public const int OffsetZFieldNumber = 3;
    private float offsetZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OffsetZ {
      get { return offsetZ_; }
      set {
        offsetZ_ = value;
      }
    }

    /// <summary>Field number for the "DurationTime" field.</summary>
    public const int DurationTimeFieldNumber = 4;
    private float durationTime_;
    /// <summary>
    /// 最大存活时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DurationTime {
      get { return durationTime_; }
      set {
        durationTime_ = value;
      }
    }

    /// <summary>Field number for the "MoveSpeedX" field.</summary>
    public const int MoveSpeedXFieldNumber = 5;
    private float moveSpeedX_;
    /// <summary>
    /// 飞行速度X
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MoveSpeedX {
      get { return moveSpeedX_; }
      set {
        moveSpeedX_ = value;
      }
    }

    /// <summary>Field number for the "MoveSpeedY" field.</summary>
    public const int MoveSpeedYFieldNumber = 6;
    private float moveSpeedY_;
    /// <summary>
    /// 飞行速度Y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MoveSpeedY {
      get { return moveSpeedY_; }
      set {
        moveSpeedY_ = value;
      }
    }

    /// <summary>Field number for the "AddSpeedX" field.</summary>
    public const int AddSpeedXFieldNumber = 7;
    private float addSpeedX_;
    /// <summary>
    /// X方向加速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AddSpeedX {
      get { return addSpeedX_; }
      set {
        addSpeedX_ = value;
      }
    }

    /// <summary>Field number for the "AddSpeedY" field.</summary>
    public const int AddSpeedYFieldNumber = 8;
    private float addSpeedY_;
    /// <summary>
    /// Y方向加速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AddSpeedY {
      get { return addSpeedY_; }
      set {
        addSpeedY_ = value;
      }
    }

    /// <summary>Field number for the "RandCount" field.</summary>
    public const int RandCountFieldNumber = 9;
    private global::Pbe.RandShootCount randCount_;
    /// <summary>
    /// 随机发射个数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.RandShootCount RandCount {
      get { return randCount_; }
      set {
        randCount_ = value;
      }
    }

    /// <summary>Field number for the "MaxAttackTimes" field.</summary>
    public const int MaxAttackTimesFieldNumber = 10;
    private int maxAttackTimes_;
    /// <summary>
    /// 最大攻击次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxAttackTimes {
      get { return maxAttackTimes_; }
      set {
        maxAttackTimes_ = value;
      }
    }

    /// <summary>Field number for the "MaxDistance" field.</summary>
    public const int MaxDistanceFieldNumber = 11;
    private float maxDistance_;
    /// <summary>
    /// 最大距离
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxDistance {
      get { return maxDistance_; }
      set {
        maxDistance_ = value;
      }
    }

    /// <summary>Field number for the "BulletTargetType" field.</summary>
    public const int BulletTargetTypeFieldNumber = 12;
    private int bulletTargetType_;
    /// <summary>
    /// 子弹目标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BulletTargetType {
      get { return bulletTargetType_; }
      set {
        bulletTargetType_ = value;
      }
    }

    /// <summary>Field number for the "RandArea" field.</summary>
    public const int RandAreaFieldNumber = 13;
    private global::Pbe.Vec3 randArea_;
    /// <summary>
    /// 随机发射区域
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.Vec3 RandArea {
      get { return randArea_; }
      set {
        randArea_ = value;
      }
    }

    /// <summary>Field number for the "EnitiyId" field.</summary>
    public const int EnitiyIdFieldNumber = 14;
    private int enitiyId_;
    /// <summary>
    /// 子弹Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EnitiyId {
      get { return enitiyId_; }
      set {
        enitiyId_ = value;
      }
    }

    /// <summary>Field number for the "SkillInfo" field.</summary>
    public const int SkillInfoFieldNumber = 15;
    private int skillInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillInfo {
      get { return skillInfo_; }
      set {
        skillInfo_ = value;
      }
    }

    /// <summary>Field number for the "IsIgnoreWall" field.</summary>
    public const int IsIgnoreWallFieldNumber = 16;
    private bool isIgnoreWall_;
    /// <summary>
    /// 是否无视阻挡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIgnoreWall {
      get { return isIgnoreWall_; }
      set {
        isIgnoreWall_ = value;
      }
    }

    /// <summary>Field number for the "IsCameraFollow" field.</summary>
    public const int IsCameraFollowFieldNumber = 17;
    private bool isCameraFollow_;
    /// <summary>
    /// 是否摄像机跟随
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCameraFollow {
      get { return isCameraFollow_; }
      set {
        isCameraFollow_ = value;
      }
    }

    /// <summary>Field number for the "MoveSpeedZ" field.</summary>
    public const int MoveSpeedZFieldNumber = 18;
    private float moveSpeedZ_;
    /// <summary>
    /// 飞行速度Z
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MoveSpeedZ {
      get { return moveSpeedZ_; }
      set {
        moveSpeedZ_ = value;
      }
    }

    /// <summary>Field number for the "AddSpeedZ" field.</summary>
    public const int AddSpeedZFieldNumber = 19;
    private float addSpeedZ_;
    /// <summary>
    /// Z加速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AddSpeedZ {
      get { return addSpeedZ_; }
      set {
        addSpeedZ_ = value;
      }
    }

    /// <summary>Field number for the "NotChangeFace" field.</summary>
    public const int NotChangeFaceFieldNumber = 20;
    private bool notChangeFace_;
    /// <summary>
    /// 向左时不翻转特效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NotChangeFace {
      get { return notChangeFace_; }
      set {
        notChangeFace_ = value;
      }
    }

    /// <summary>Field number for the "IsEffectRotate" field.</summary>
    public const int IsEffectRotateFieldNumber = 21;
    private bool isEffectRotate_;
    /// <summary>
    /// 特效是否跟随子弹运动放向旋转
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEffectRotate {
      get { return isEffectRotate_; }
      set {
        isEffectRotate_ = value;
      }
    }

    /// <summary>Field number for the "BackShout" field.</summary>
    public const int BackShoutFieldNumber = 22;
    private bool backShout_;
    /// <summary>
    /// 向后发射
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BackShout {
      get { return backShout_; }
      set {
        backShout_ = value;
      }
    }

    /// <summary>Field number for the "IsScaleInherit" field.</summary>
    public const int IsScaleInheritFieldNumber = 23;
    private bool isScaleInherit_;
    /// <summary>
    /// 是否继承来源的缩放大小
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsScaleInherit {
      get { return isScaleInherit_; }
      set {
        isScaleInherit_ = value;
      }
    }

    /// <summary>Field number for the "InitState" field.</summary>
    public const int InitStateFieldNumber = 24;
    private int initState_;
    /// <summary>
    /// 初始状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InitState {
      get { return initState_; }
      set {
        initState_ = value;
      }
    }

    /// <summary>Field number for the "IsPool" field.</summary>
    public const int IsPoolFieldNumber = 25;
    private bool isPool_;
    /// <summary>
    /// 是否是缓存池中的
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPool {
      get { return isPool_; }
      set {
        isPool_ = value;
      }
    }

    /// <summary>Field number for the "HeightMin" field.</summary>
    public const int HeightMinFieldNumber = 26;
    private float heightMin_;
    /// <summary>
    /// 子弹释放条件-高度大于
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HeightMin {
      get { return heightMin_; }
      set {
        heightMin_ = value;
      }
    }

    /// <summary>Field number for the "HeightMax" field.</summary>
    public const int HeightMaxFieldNumber = 27;
    private float heightMax_;
    /// <summary>
    /// 子弹释放条件-高度小于
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HeightMax {
      get { return heightMax_; }
      set {
        heightMax_ = value;
      }
    }

    /// <summary>Field number for the "TouchGroundDelayFrame" field.</summary>
    public const int TouchGroundDelayFrameFieldNumber = 28;
    private int touchGroundDelayFrame_;
    /// <summary>
    /// 落地延迟死亡帧
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TouchGroundDelayFrame {
      get { return touchGroundDelayFrame_; }
      set {
        touchGroundDelayFrame_ = value;
      }
    }

    /// <summary>Field number for the "RangeRadius" field.</summary>
    public const int RangeRadiusFieldNumber = 29;
    private int rangeRadius_;
    /// <summary>
    /// 范围半径
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RangeRadius {
      get { return rangeRadius_; }
      set {
        rangeRadius_ = value;
      }
    }

    /// <summary>Field number for the "RangeType" field.</summary>
    public const int RangeTypeFieldNumber = 30;
    private int rangeType_;
    /// <summary>
    /// 目标类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RangeType {
      get { return rangeType_; }
      set {
        rangeType_ = value;
      }
    }

    /// <summary>Field number for the "EntityTraceConfig" field.</summary>
    public const int EntityTraceConfigFieldNumber = 31;
    private global::Pbe.EntityTraceConfig entityTraceConfig_;
    /// <summary>
    /// 实体追踪配置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.EntityTraceConfig EntityTraceConfig {
      get { return entityTraceConfig_; }
      set {
        entityTraceConfig_ = value;
      }
    }

    /// <summary>Field number for the "EffectUnlockAxis" field.</summary>
    public const int EffectUnlockAxisFieldNumber = 32;
    private global::Pbe.BoolVec3 effectUnlockAxis_;
    /// <summary>
    /// 特效解锁旋转方向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.BoolVec3 EffectUnlockAxis {
      get { return effectUnlockAxis_; }
      set {
        effectUnlockAxis_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EntityInfoConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EntityInfoConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OffsetX, other.OffsetX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OffsetY, other.OffsetY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OffsetZ, other.OffsetZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DurationTime, other.DurationTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MoveSpeedX, other.MoveSpeedX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MoveSpeedY, other.MoveSpeedY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AddSpeedX, other.AddSpeedX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AddSpeedY, other.AddSpeedY)) return false;
      if (!object.Equals(RandCount, other.RandCount)) return false;
      if (MaxAttackTimes != other.MaxAttackTimes) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxDistance, other.MaxDistance)) return false;
      if (BulletTargetType != other.BulletTargetType) return false;
      if (!object.Equals(RandArea, other.RandArea)) return false;
      if (EnitiyId != other.EnitiyId) return false;
      if (SkillInfo != other.SkillInfo) return false;
      if (IsIgnoreWall != other.IsIgnoreWall) return false;
      if (IsCameraFollow != other.IsCameraFollow) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MoveSpeedZ, other.MoveSpeedZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AddSpeedZ, other.AddSpeedZ)) return false;
      if (NotChangeFace != other.NotChangeFace) return false;
      if (IsEffectRotate != other.IsEffectRotate) return false;
      if (BackShout != other.BackShout) return false;
      if (IsScaleInherit != other.IsScaleInherit) return false;
      if (InitState != other.InitState) return false;
      if (IsPool != other.IsPool) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HeightMin, other.HeightMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HeightMax, other.HeightMax)) return false;
      if (TouchGroundDelayFrame != other.TouchGroundDelayFrame) return false;
      if (RangeRadius != other.RangeRadius) return false;
      if (RangeType != other.RangeType) return false;
      if (!object.Equals(EntityTraceConfig, other.EntityTraceConfig)) return false;
      if (!object.Equals(EffectUnlockAxis, other.EffectUnlockAxis)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OffsetX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OffsetX);
      if (OffsetY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OffsetY);
      if (OffsetZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OffsetZ);
      if (DurationTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DurationTime);
      if (MoveSpeedX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MoveSpeedX);
      if (MoveSpeedY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MoveSpeedY);
      if (AddSpeedX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AddSpeedX);
      if (AddSpeedY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AddSpeedY);
      if (randCount_ != null) hash ^= RandCount.GetHashCode();
      if (MaxAttackTimes != 0) hash ^= MaxAttackTimes.GetHashCode();
      if (MaxDistance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxDistance);
      if (BulletTargetType != 0) hash ^= BulletTargetType.GetHashCode();
      if (randArea_ != null) hash ^= RandArea.GetHashCode();
      if (EnitiyId != 0) hash ^= EnitiyId.GetHashCode();
      if (SkillInfo != 0) hash ^= SkillInfo.GetHashCode();
      if (IsIgnoreWall != false) hash ^= IsIgnoreWall.GetHashCode();
      if (IsCameraFollow != false) hash ^= IsCameraFollow.GetHashCode();
      if (MoveSpeedZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MoveSpeedZ);
      if (AddSpeedZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AddSpeedZ);
      if (NotChangeFace != false) hash ^= NotChangeFace.GetHashCode();
      if (IsEffectRotate != false) hash ^= IsEffectRotate.GetHashCode();
      if (BackShout != false) hash ^= BackShout.GetHashCode();
      if (IsScaleInherit != false) hash ^= IsScaleInherit.GetHashCode();
      if (InitState != 0) hash ^= InitState.GetHashCode();
      if (IsPool != false) hash ^= IsPool.GetHashCode();
      if (HeightMin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HeightMin);
      if (HeightMax != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HeightMax);
      if (TouchGroundDelayFrame != 0) hash ^= TouchGroundDelayFrame.GetHashCode();
      if (RangeRadius != 0) hash ^= RangeRadius.GetHashCode();
      if (RangeType != 0) hash ^= RangeType.GetHashCode();
      if (entityTraceConfig_ != null) hash ^= EntityTraceConfig.GetHashCode();
      if (effectUnlockAxis_ != null) hash ^= EffectUnlockAxis.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OffsetX != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(OffsetX);
      }
      if (OffsetY != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(OffsetY);
      }
      if (OffsetZ != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(OffsetZ);
      }
      if (DurationTime != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(DurationTime);
      }
      if (MoveSpeedX != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(MoveSpeedX);
      }
      if (MoveSpeedY != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(MoveSpeedY);
      }
      if (AddSpeedX != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(AddSpeedX);
      }
      if (AddSpeedY != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(AddSpeedY);
      }
      if (randCount_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(RandCount);
      }
      if (MaxAttackTimes != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MaxAttackTimes);
      }
      if (MaxDistance != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(MaxDistance);
      }
      if (BulletTargetType != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(BulletTargetType);
      }
      if (randArea_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(RandArea);
      }
      if (EnitiyId != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(EnitiyId);
      }
      if (SkillInfo != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(SkillInfo);
      }
      if (IsIgnoreWall != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(IsIgnoreWall);
      }
      if (IsCameraFollow != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(IsCameraFollow);
      }
      if (MoveSpeedZ != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(MoveSpeedZ);
      }
      if (AddSpeedZ != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(AddSpeedZ);
      }
      if (NotChangeFace != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(NotChangeFace);
      }
      if (IsEffectRotate != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(IsEffectRotate);
      }
      if (BackShout != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(BackShout);
      }
      if (IsScaleInherit != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(IsScaleInherit);
      }
      if (InitState != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(InitState);
      }
      if (IsPool != false) {
        output.WriteRawTag(200, 1);
        output.WriteBool(IsPool);
      }
      if (HeightMin != 0F) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(HeightMin);
      }
      if (HeightMax != 0F) {
        output.WriteRawTag(221, 1);
        output.WriteFloat(HeightMax);
      }
      if (TouchGroundDelayFrame != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(TouchGroundDelayFrame);
      }
      if (RangeRadius != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(RangeRadius);
      }
      if (RangeType != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(RangeType);
      }
      if (entityTraceConfig_ != null) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(EntityTraceConfig);
      }
      if (effectUnlockAxis_ != null) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(EffectUnlockAxis);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OffsetX != 0F) {
        size += 1 + 4;
      }
      if (OffsetY != 0F) {
        size += 1 + 4;
      }
      if (OffsetZ != 0F) {
        size += 1 + 4;
      }
      if (DurationTime != 0F) {
        size += 1 + 4;
      }
      if (MoveSpeedX != 0F) {
        size += 1 + 4;
      }
      if (MoveSpeedY != 0F) {
        size += 1 + 4;
      }
      if (AddSpeedX != 0F) {
        size += 1 + 4;
      }
      if (AddSpeedY != 0F) {
        size += 1 + 4;
      }
      if (randCount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RandCount);
      }
      if (MaxAttackTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxAttackTimes);
      }
      if (MaxDistance != 0F) {
        size += 1 + 4;
      }
      if (BulletTargetType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletTargetType);
      }
      if (randArea_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RandArea);
      }
      if (EnitiyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EnitiyId);
      }
      if (SkillInfo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillInfo);
      }
      if (IsIgnoreWall != false) {
        size += 2 + 1;
      }
      if (IsCameraFollow != false) {
        size += 2 + 1;
      }
      if (MoveSpeedZ != 0F) {
        size += 2 + 4;
      }
      if (AddSpeedZ != 0F) {
        size += 2 + 4;
      }
      if (NotChangeFace != false) {
        size += 2 + 1;
      }
      if (IsEffectRotate != false) {
        size += 2 + 1;
      }
      if (BackShout != false) {
        size += 2 + 1;
      }
      if (IsScaleInherit != false) {
        size += 2 + 1;
      }
      if (InitState != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(InitState);
      }
      if (IsPool != false) {
        size += 2 + 1;
      }
      if (HeightMin != 0F) {
        size += 2 + 4;
      }
      if (HeightMax != 0F) {
        size += 2 + 4;
      }
      if (TouchGroundDelayFrame != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TouchGroundDelayFrame);
      }
      if (RangeRadius != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RangeRadius);
      }
      if (RangeType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RangeType);
      }
      if (entityTraceConfig_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EntityTraceConfig);
      }
      if (effectUnlockAxis_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EffectUnlockAxis);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EntityInfoConfig other) {
      if (other == null) {
        return;
      }
      if (other.OffsetX != 0F) {
        OffsetX = other.OffsetX;
      }
      if (other.OffsetY != 0F) {
        OffsetY = other.OffsetY;
      }
      if (other.OffsetZ != 0F) {
        OffsetZ = other.OffsetZ;
      }
      if (other.DurationTime != 0F) {
        DurationTime = other.DurationTime;
      }
      if (other.MoveSpeedX != 0F) {
        MoveSpeedX = other.MoveSpeedX;
      }
      if (other.MoveSpeedY != 0F) {
        MoveSpeedY = other.MoveSpeedY;
      }
      if (other.AddSpeedX != 0F) {
        AddSpeedX = other.AddSpeedX;
      }
      if (other.AddSpeedY != 0F) {
        AddSpeedY = other.AddSpeedY;
      }
      if (other.randCount_ != null) {
        if (randCount_ == null) {
          randCount_ = new global::Pbe.RandShootCount();
        }
        RandCount.MergeFrom(other.RandCount);
      }
      if (other.MaxAttackTimes != 0) {
        MaxAttackTimes = other.MaxAttackTimes;
      }
      if (other.MaxDistance != 0F) {
        MaxDistance = other.MaxDistance;
      }
      if (other.BulletTargetType != 0) {
        BulletTargetType = other.BulletTargetType;
      }
      if (other.randArea_ != null) {
        if (randArea_ == null) {
          randArea_ = new global::Pbe.Vec3();
        }
        RandArea.MergeFrom(other.RandArea);
      }
      if (other.EnitiyId != 0) {
        EnitiyId = other.EnitiyId;
      }
      if (other.SkillInfo != 0) {
        SkillInfo = other.SkillInfo;
      }
      if (other.IsIgnoreWall != false) {
        IsIgnoreWall = other.IsIgnoreWall;
      }
      if (other.IsCameraFollow != false) {
        IsCameraFollow = other.IsCameraFollow;
      }
      if (other.MoveSpeedZ != 0F) {
        MoveSpeedZ = other.MoveSpeedZ;
      }
      if (other.AddSpeedZ != 0F) {
        AddSpeedZ = other.AddSpeedZ;
      }
      if (other.NotChangeFace != false) {
        NotChangeFace = other.NotChangeFace;
      }
      if (other.IsEffectRotate != false) {
        IsEffectRotate = other.IsEffectRotate;
      }
      if (other.BackShout != false) {
        BackShout = other.BackShout;
      }
      if (other.IsScaleInherit != false) {
        IsScaleInherit = other.IsScaleInherit;
      }
      if (other.InitState != 0) {
        InitState = other.InitState;
      }
      if (other.IsPool != false) {
        IsPool = other.IsPool;
      }
      if (other.HeightMin != 0F) {
        HeightMin = other.HeightMin;
      }
      if (other.HeightMax != 0F) {
        HeightMax = other.HeightMax;
      }
      if (other.TouchGroundDelayFrame != 0) {
        TouchGroundDelayFrame = other.TouchGroundDelayFrame;
      }
      if (other.RangeRadius != 0) {
        RangeRadius = other.RangeRadius;
      }
      if (other.RangeType != 0) {
        RangeType = other.RangeType;
      }
      if (other.entityTraceConfig_ != null) {
        if (entityTraceConfig_ == null) {
          entityTraceConfig_ = new global::Pbe.EntityTraceConfig();
        }
        EntityTraceConfig.MergeFrom(other.EntityTraceConfig);
      }
      if (other.effectUnlockAxis_ != null) {
        if (effectUnlockAxis_ == null) {
          effectUnlockAxis_ = new global::Pbe.BoolVec3();
        }
        EffectUnlockAxis.MergeFrom(other.EffectUnlockAxis);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            OffsetX = input.ReadFloat();
            break;
          }
          case 21: {
            OffsetY = input.ReadFloat();
            break;
          }
          case 29: {
            OffsetZ = input.ReadFloat();
            break;
          }
          case 37: {
            DurationTime = input.ReadFloat();
            break;
          }
          case 45: {
            MoveSpeedX = input.ReadFloat();
            break;
          }
          case 53: {
            MoveSpeedY = input.ReadFloat();
            break;
          }
          case 61: {
            AddSpeedX = input.ReadFloat();
            break;
          }
          case 69: {
            AddSpeedY = input.ReadFloat();
            break;
          }
          case 74: {
            if (randCount_ == null) {
              randCount_ = new global::Pbe.RandShootCount();
            }
            input.ReadMessage(randCount_);
            break;
          }
          case 80: {
            MaxAttackTimes = input.ReadInt32();
            break;
          }
          case 93: {
            MaxDistance = input.ReadFloat();
            break;
          }
          case 96: {
            BulletTargetType = input.ReadInt32();
            break;
          }
          case 106: {
            if (randArea_ == null) {
              randArea_ = new global::Pbe.Vec3();
            }
            input.ReadMessage(randArea_);
            break;
          }
          case 112: {
            EnitiyId = input.ReadInt32();
            break;
          }
          case 120: {
            SkillInfo = input.ReadInt32();
            break;
          }
          case 128: {
            IsIgnoreWall = input.ReadBool();
            break;
          }
          case 136: {
            IsCameraFollow = input.ReadBool();
            break;
          }
          case 149: {
            MoveSpeedZ = input.ReadFloat();
            break;
          }
          case 157: {
            AddSpeedZ = input.ReadFloat();
            break;
          }
          case 160: {
            NotChangeFace = input.ReadBool();
            break;
          }
          case 168: {
            IsEffectRotate = input.ReadBool();
            break;
          }
          case 176: {
            BackShout = input.ReadBool();
            break;
          }
          case 184: {
            IsScaleInherit = input.ReadBool();
            break;
          }
          case 192: {
            InitState = input.ReadInt32();
            break;
          }
          case 200: {
            IsPool = input.ReadBool();
            break;
          }
          case 213: {
            HeightMin = input.ReadFloat();
            break;
          }
          case 221: {
            HeightMax = input.ReadFloat();
            break;
          }
          case 224: {
            TouchGroundDelayFrame = input.ReadInt32();
            break;
          }
          case 232: {
            RangeRadius = input.ReadInt32();
            break;
          }
          case 240: {
            RangeType = input.ReadInt32();
            break;
          }
          case 250: {
            if (entityTraceConfig_ == null) {
              entityTraceConfig_ = new global::Pbe.EntityTraceConfig();
            }
            input.ReadMessage(entityTraceConfig_);
            break;
          }
          case 258: {
            if (effectUnlockAxis_ == null) {
              effectUnlockAxis_ = new global::Pbe.BoolVec3();
            }
            input.ReadMessage(effectUnlockAxis_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///实体追踪配置
  /// </summary>
  public sealed partial class EntityTraceConfig : pb::IMessage<EntityTraceConfig> {
    private static readonly pb::MessageParser<EntityTraceConfig> _parser = new pb::MessageParser<EntityTraceConfig>(() => new EntityTraceConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EntityTraceConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityTraceConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityTraceConfig(EntityTraceConfig other) : this() {
      traceTime_ = other.traceTime_;
      updateNumber_ = other.updateNumber_;
      anchorType_ = other.anchorType_;
      anchorOffset_ = other.anchorOffset_ != null ? other.anchorOffset_.Clone() : null;
      checkType_ = other.checkType_;
      checkRadius_ = other.checkRadius_;
      checkMinRadians_ = other.checkMinRadians_;
      checkMaxRadians_ = other.checkMaxRadians_;
      checkHeight_ = other.checkHeight_;
      traceTarget_ = other.traceTarget_;
      traceUnlockAxis_ = other.traceUnlockAxis_ != null ? other.traceUnlockAxis_.Clone() : null;
      traceSpeedType_ = other.traceSpeedType_;
      targetOffset_ = other.targetOffset_ != null ? other.targetOffset_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityTraceConfig Clone() {
      return new EntityTraceConfig(this);
    }

    /// <summary>Field number for the "TraceTime" field.</summary>
    public const int TraceTimeFieldNumber = 1;
    private int traceTime_;
    /// <summary>
    ///追踪时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TraceTime {
      get { return traceTime_; }
      set {
        traceTime_ = value;
      }
    }

    /// <summary>Field number for the "UpdateNumber" field.</summary>
    public const int UpdateNumberFieldNumber = 2;
    private int updateNumber_;
    /// <summary>
    ///更新次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UpdateNumber {
      get { return updateNumber_; }
      set {
        updateNumber_ = value;
      }
    }

    /// <summary>Field number for the "AnchorType" field.</summary>
    public const int AnchorTypeFieldNumber = 3;
    private int anchorType_;
    /// <summary>
    ///锚点类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AnchorType {
      get { return anchorType_; }
      set {
        anchorType_ = value;
      }
    }

    /// <summary>Field number for the "AnchorOffset" field.</summary>
    public const int AnchorOffsetFieldNumber = 4;
    private global::Pbe.Vec3 anchorOffset_;
    /// <summary>
    ///锚点偏移
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.Vec3 AnchorOffset {
      get { return anchorOffset_; }
      set {
        anchorOffset_ = value;
      }
    }

    /// <summary>Field number for the "CheckType" field.</summary>
    public const int CheckTypeFieldNumber = 5;
    private int checkType_;
    /// <summary>
    ///检测类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CheckType {
      get { return checkType_; }
      set {
        checkType_ = value;
      }
    }

    /// <summary>Field number for the "CheckRadius" field.</summary>
    public const int CheckRadiusFieldNumber = 6;
    private int checkRadius_;
    /// <summary>
    ///检测半径
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CheckRadius {
      get { return checkRadius_; }
      set {
        checkRadius_ = value;
      }
    }

    /// <summary>Field number for the "CheckMinRadians" field.</summary>
    public const int CheckMinRadiansFieldNumber = 7;
    private int checkMinRadians_;
    /// <summary>
    ///最小弧度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CheckMinRadians {
      get { return checkMinRadians_; }
      set {
        checkMinRadians_ = value;
      }
    }

    /// <summary>Field number for the "CheckMaxRadians" field.</summary>
    public const int CheckMaxRadiansFieldNumber = 8;
    private int checkMaxRadians_;
    /// <summary>
    ///最大弧度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CheckMaxRadians {
      get { return checkMaxRadians_; }
      set {
        checkMaxRadians_ = value;
      }
    }

    /// <summary>Field number for the "CheckHeight" field.</summary>
    public const int CheckHeightFieldNumber = 9;
    private int checkHeight_;
    /// <summary>
    ///检测高度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CheckHeight {
      get { return checkHeight_; }
      set {
        checkHeight_ = value;
      }
    }

    /// <summary>Field number for the "TraceTarget" field.</summary>
    public const int TraceTargetFieldNumber = 10;
    private int traceTarget_;
    /// <summary>
    ///追踪目标类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TraceTarget {
      get { return traceTarget_; }
      set {
        traceTarget_ = value;
      }
    }

    /// <summary>Field number for the "TraceUnlockAxis" field.</summary>
    public const int TraceUnlockAxisFieldNumber = 11;
    private global::Pbe.BoolVec3 traceUnlockAxis_;
    /// <summary>
    ///跟随解锁的轴向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.BoolVec3 TraceUnlockAxis {
      get { return traceUnlockAxis_; }
      set {
        traceUnlockAxis_ = value;
      }
    }

    /// <summary>Field number for the "TraceSpeedType" field.</summary>
    public const int TraceSpeedTypeFieldNumber = 12;
    private int traceSpeedType_;
    /// <summary>
    ///更新速度类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TraceSpeedType {
      get { return traceSpeedType_; }
      set {
        traceSpeedType_ = value;
      }
    }

    /// <summary>Field number for the "TargetOffset" field.</summary>
    public const int TargetOffsetFieldNumber = 13;
    private global::Pbe.Vec3 targetOffset_;
    /// <summary>
    ///目标点偏移
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.Vec3 TargetOffset {
      get { return targetOffset_; }
      set {
        targetOffset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EntityTraceConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EntityTraceConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TraceTime != other.TraceTime) return false;
      if (UpdateNumber != other.UpdateNumber) return false;
      if (AnchorType != other.AnchorType) return false;
      if (!object.Equals(AnchorOffset, other.AnchorOffset)) return false;
      if (CheckType != other.CheckType) return false;
      if (CheckRadius != other.CheckRadius) return false;
      if (CheckMinRadians != other.CheckMinRadians) return false;
      if (CheckMaxRadians != other.CheckMaxRadians) return false;
      if (CheckHeight != other.CheckHeight) return false;
      if (TraceTarget != other.TraceTarget) return false;
      if (!object.Equals(TraceUnlockAxis, other.TraceUnlockAxis)) return false;
      if (TraceSpeedType != other.TraceSpeedType) return false;
      if (!object.Equals(TargetOffset, other.TargetOffset)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TraceTime != 0) hash ^= TraceTime.GetHashCode();
      if (UpdateNumber != 0) hash ^= UpdateNumber.GetHashCode();
      if (AnchorType != 0) hash ^= AnchorType.GetHashCode();
      if (anchorOffset_ != null) hash ^= AnchorOffset.GetHashCode();
      if (CheckType != 0) hash ^= CheckType.GetHashCode();
      if (CheckRadius != 0) hash ^= CheckRadius.GetHashCode();
      if (CheckMinRadians != 0) hash ^= CheckMinRadians.GetHashCode();
      if (CheckMaxRadians != 0) hash ^= CheckMaxRadians.GetHashCode();
      if (CheckHeight != 0) hash ^= CheckHeight.GetHashCode();
      if (TraceTarget != 0) hash ^= TraceTarget.GetHashCode();
      if (traceUnlockAxis_ != null) hash ^= TraceUnlockAxis.GetHashCode();
      if (TraceSpeedType != 0) hash ^= TraceSpeedType.GetHashCode();
      if (targetOffset_ != null) hash ^= TargetOffset.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TraceTime != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TraceTime);
      }
      if (UpdateNumber != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UpdateNumber);
      }
      if (AnchorType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AnchorType);
      }
      if (anchorOffset_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(AnchorOffset);
      }
      if (CheckType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CheckType);
      }
      if (CheckRadius != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CheckRadius);
      }
      if (CheckMinRadians != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(CheckMinRadians);
      }
      if (CheckMaxRadians != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CheckMaxRadians);
      }
      if (CheckHeight != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CheckHeight);
      }
      if (TraceTarget != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(TraceTarget);
      }
      if (traceUnlockAxis_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(TraceUnlockAxis);
      }
      if (TraceSpeedType != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(TraceSpeedType);
      }
      if (targetOffset_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(TargetOffset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TraceTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TraceTime);
      }
      if (UpdateNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UpdateNumber);
      }
      if (AnchorType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AnchorType);
      }
      if (anchorOffset_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AnchorOffset);
      }
      if (CheckType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CheckType);
      }
      if (CheckRadius != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CheckRadius);
      }
      if (CheckMinRadians != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CheckMinRadians);
      }
      if (CheckMaxRadians != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CheckMaxRadians);
      }
      if (CheckHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CheckHeight);
      }
      if (TraceTarget != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TraceTarget);
      }
      if (traceUnlockAxis_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TraceUnlockAxis);
      }
      if (TraceSpeedType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TraceSpeedType);
      }
      if (targetOffset_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetOffset);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EntityTraceConfig other) {
      if (other == null) {
        return;
      }
      if (other.TraceTime != 0) {
        TraceTime = other.TraceTime;
      }
      if (other.UpdateNumber != 0) {
        UpdateNumber = other.UpdateNumber;
      }
      if (other.AnchorType != 0) {
        AnchorType = other.AnchorType;
      }
      if (other.anchorOffset_ != null) {
        if (anchorOffset_ == null) {
          anchorOffset_ = new global::Pbe.Vec3();
        }
        AnchorOffset.MergeFrom(other.AnchorOffset);
      }
      if (other.CheckType != 0) {
        CheckType = other.CheckType;
      }
      if (other.CheckRadius != 0) {
        CheckRadius = other.CheckRadius;
      }
      if (other.CheckMinRadians != 0) {
        CheckMinRadians = other.CheckMinRadians;
      }
      if (other.CheckMaxRadians != 0) {
        CheckMaxRadians = other.CheckMaxRadians;
      }
      if (other.CheckHeight != 0) {
        CheckHeight = other.CheckHeight;
      }
      if (other.TraceTarget != 0) {
        TraceTarget = other.TraceTarget;
      }
      if (other.traceUnlockAxis_ != null) {
        if (traceUnlockAxis_ == null) {
          traceUnlockAxis_ = new global::Pbe.BoolVec3();
        }
        TraceUnlockAxis.MergeFrom(other.TraceUnlockAxis);
      }
      if (other.TraceSpeedType != 0) {
        TraceSpeedType = other.TraceSpeedType;
      }
      if (other.targetOffset_ != null) {
        if (targetOffset_ == null) {
          targetOffset_ = new global::Pbe.Vec3();
        }
        TargetOffset.MergeFrom(other.TargetOffset);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TraceTime = input.ReadInt32();
            break;
          }
          case 16: {
            UpdateNumber = input.ReadInt32();
            break;
          }
          case 24: {
            AnchorType = input.ReadInt32();
            break;
          }
          case 34: {
            if (anchorOffset_ == null) {
              anchorOffset_ = new global::Pbe.Vec3();
            }
            input.ReadMessage(anchorOffset_);
            break;
          }
          case 40: {
            CheckType = input.ReadInt32();
            break;
          }
          case 48: {
            CheckRadius = input.ReadInt32();
            break;
          }
          case 56: {
            CheckMinRadians = input.ReadInt32();
            break;
          }
          case 64: {
            CheckMaxRadians = input.ReadInt32();
            break;
          }
          case 72: {
            CheckHeight = input.ReadInt32();
            break;
          }
          case 80: {
            TraceTarget = input.ReadInt32();
            break;
          }
          case 90: {
            if (traceUnlockAxis_ == null) {
              traceUnlockAxis_ = new global::Pbe.BoolVec3();
            }
            input.ReadMessage(traceUnlockAxis_);
            break;
          }
          case 96: {
            TraceSpeedType = input.ReadInt32();
            break;
          }
          case 106: {
            if (targetOffset_ == null) {
              targetOffset_ = new global::Pbe.Vec3();
            }
            input.ReadMessage(targetOffset_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RandShootCount : pb::IMessage<RandShootCount> {
    private static readonly pb::MessageParser<RandShootCount> _parser = new pb::MessageParser<RandShootCount>(() => new RandShootCount());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RandShootCount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RandShootCount() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RandShootCount(RandShootCount other) : this() {
      randCountMin_ = other.randCountMin_;
      randCount_ = other.randCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RandShootCount Clone() {
      return new RandShootCount(this);
    }

    /// <summary>Field number for the "RandCountMin" field.</summary>
    public const int RandCountMinFieldNumber = 1;
    private int randCountMin_;
    /// <summary>
    /// 最小随机数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RandCountMin {
      get { return randCountMin_; }
      set {
        randCountMin_ = value;
      }
    }

    /// <summary>Field number for the "RandCount" field.</summary>
    public const int RandCountFieldNumber = 2;
    private int randCount_;
    /// <summary>
    /// 随机区间   
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RandCount {
      get { return randCount_; }
      set {
        randCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RandShootCount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RandShootCount other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RandCountMin != other.RandCountMin) return false;
      if (RandCount != other.RandCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RandCountMin != 0) hash ^= RandCountMin.GetHashCode();
      if (RandCount != 0) hash ^= RandCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RandCountMin != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RandCountMin);
      }
      if (RandCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RandCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RandCountMin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RandCountMin);
      }
      if (RandCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RandCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RandShootCount other) {
      if (other == null) {
        return;
      }
      if (other.RandCountMin != 0) {
        RandCountMin = other.RandCountMin;
      }
      if (other.RandCount != 0) {
        RandCount = other.RandCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RandCountMin = input.ReadInt32();
            break;
          }
          case 16: {
            RandCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PressInfo : pb::IMessage<PressInfo> {
    private static readonly pb::MessageParser<PressInfo> _parser = new pb::MessageParser<PressInfo>(() => new PressInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PressInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PressInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PressInfo(PressInfo other) : this() {
      pressType_ = other.pressType_;
      chargeSkillCfg_ = other.chargeSkillCfg_ != null ? other.chargeSkillCfg_.Clone() : null;
      openSkillCfg_ = other.openSkillCfg_ != null ? other.openSkillCfg_.Clone() : null;
      slideSkillCfg_ = other.slideSkillCfg_ != null ? other.slideSkillCfg_.Clone() : null;
      joystickSkillCfg_ = other.joystickSkillCfg_ != null ? other.joystickSkillCfg_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PressInfo Clone() {
      return new PressInfo(this);
    }

    /// <summary>Field number for the "PressType" field.</summary>
    public const int PressTypeFieldNumber = 1;
    private int pressType_;
    /// <summary>
    /// 技能按键逻辑类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PressType {
      get { return pressType_; }
      set {
        pressType_ = value;
      }
    }

    /// <summary>Field number for the "ChargeSkillCfg" field.</summary>
    public const int ChargeSkillCfgFieldNumber = 3;
    private global::Pbe.ChargeCfg chargeSkillCfg_;
    /// <summary>
    /// 蓄力技能配置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.ChargeCfg ChargeSkillCfg {
      get { return chargeSkillCfg_; }
      set {
        chargeSkillCfg_ = value;
      }
    }

    /// <summary>Field number for the "OpenSkillCfg" field.</summary>
    public const int OpenSkillCfgFieldNumber = 7;
    private global::Pbe.OpenCloseCfg openSkillCfg_;
    /// <summary>
    ///开关技能配置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.OpenCloseCfg OpenSkillCfg {
      get { return openSkillCfg_; }
      set {
        openSkillCfg_ = value;
      }
    }

    /// <summary>Field number for the "SlideSkillCfg" field.</summary>
    public const int SlideSkillCfgFieldNumber = 8;
    private global::Pbe.SlideCfg slideSkillCfg_;
    /// <summary>
    ///滑动技能配置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.SlideCfg SlideSkillCfg {
      get { return slideSkillCfg_; }
      set {
        slideSkillCfg_ = value;
      }
    }

    /// <summary>Field number for the "JoystickSkillCfg" field.</summary>
    public const int JoystickSkillCfgFieldNumber = 10;
    private global::Pbe.JoystickSkillCfg joystickSkillCfg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.JoystickSkillCfg JoystickSkillCfg {
      get { return joystickSkillCfg_; }
      set {
        joystickSkillCfg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PressInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PressInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PressType != other.PressType) return false;
      if (!object.Equals(ChargeSkillCfg, other.ChargeSkillCfg)) return false;
      if (!object.Equals(OpenSkillCfg, other.OpenSkillCfg)) return false;
      if (!object.Equals(SlideSkillCfg, other.SlideSkillCfg)) return false;
      if (!object.Equals(JoystickSkillCfg, other.JoystickSkillCfg)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PressType != 0) hash ^= PressType.GetHashCode();
      if (chargeSkillCfg_ != null) hash ^= ChargeSkillCfg.GetHashCode();
      if (openSkillCfg_ != null) hash ^= OpenSkillCfg.GetHashCode();
      if (slideSkillCfg_ != null) hash ^= SlideSkillCfg.GetHashCode();
      if (joystickSkillCfg_ != null) hash ^= JoystickSkillCfg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PressType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PressType);
      }
      if (chargeSkillCfg_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ChargeSkillCfg);
      }
      if (openSkillCfg_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(OpenSkillCfg);
      }
      if (slideSkillCfg_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(SlideSkillCfg);
      }
      if (joystickSkillCfg_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(JoystickSkillCfg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PressType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PressType);
      }
      if (chargeSkillCfg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChargeSkillCfg);
      }
      if (openSkillCfg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OpenSkillCfg);
      }
      if (slideSkillCfg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SlideSkillCfg);
      }
      if (joystickSkillCfg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(JoystickSkillCfg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PressInfo other) {
      if (other == null) {
        return;
      }
      if (other.PressType != 0) {
        PressType = other.PressType;
      }
      if (other.chargeSkillCfg_ != null) {
        if (chargeSkillCfg_ == null) {
          chargeSkillCfg_ = new global::Pbe.ChargeCfg();
        }
        ChargeSkillCfg.MergeFrom(other.ChargeSkillCfg);
      }
      if (other.openSkillCfg_ != null) {
        if (openSkillCfg_ == null) {
          openSkillCfg_ = new global::Pbe.OpenCloseCfg();
        }
        OpenSkillCfg.MergeFrom(other.OpenSkillCfg);
      }
      if (other.slideSkillCfg_ != null) {
        if (slideSkillCfg_ == null) {
          slideSkillCfg_ = new global::Pbe.SlideCfg();
        }
        SlideSkillCfg.MergeFrom(other.SlideSkillCfg);
      }
      if (other.joystickSkillCfg_ != null) {
        if (joystickSkillCfg_ == null) {
          joystickSkillCfg_ = new global::Pbe.JoystickSkillCfg();
        }
        JoystickSkillCfg.MergeFrom(other.JoystickSkillCfg);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PressType = input.ReadInt32();
            break;
          }
          case 26: {
            if (chargeSkillCfg_ == null) {
              chargeSkillCfg_ = new global::Pbe.ChargeCfg();
            }
            input.ReadMessage(chargeSkillCfg_);
            break;
          }
          case 58: {
            if (openSkillCfg_ == null) {
              openSkillCfg_ = new global::Pbe.OpenCloseCfg();
            }
            input.ReadMessage(openSkillCfg_);
            break;
          }
          case 66: {
            if (slideSkillCfg_ == null) {
              slideSkillCfg_ = new global::Pbe.SlideCfg();
            }
            input.ReadMessage(slideSkillCfg_);
            break;
          }
          case 82: {
            if (joystickSkillCfg_ == null) {
              joystickSkillCfg_ = new global::Pbe.JoystickSkillCfg();
            }
            input.ReadMessage(joystickSkillCfg_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PressSkillCfg : pb::IMessage<PressSkillCfg> {
    private static readonly pb::MessageParser<PressSkillCfg> _parser = new pb::MessageParser<PressSkillCfg>(() => new PressSkillCfg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PressSkillCfg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PressSkillCfg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PressSkillCfg(PressSkillCfg other) : this() {
      duration_ = other.duration_;
      skillId_ = other.skillId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PressSkillCfg Clone() {
      return new PressSkillCfg(this);
    }

    /// <summary>Field number for the "Duration" field.</summary>
    public const int DurationFieldNumber = 1;
    private int duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "SkillId" field.</summary>
    public const int SkillIdFieldNumber = 2;
    private int skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PressSkillCfg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PressSkillCfg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Duration != other.Duration) return false;
      if (SkillId != other.SkillId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Duration != 0) hash ^= Duration.GetHashCode();
      if (SkillId != 0) hash ^= SkillId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Duration != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Duration);
      }
      if (SkillId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SkillId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PressSkillCfg other) {
      if (other == null) {
        return;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      if (other.SkillId != 0) {
        SkillId = other.SkillId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Duration = input.ReadInt32();
            break;
          }
          case 16: {
            SkillId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///使用Long命名会被替换成any
  /// </summary>
  public sealed partial class DurationChangeSkillCfg : pb::IMessage<DurationChangeSkillCfg> {
    private static readonly pb::MessageParser<DurationChangeSkillCfg> _parser = new pb::MessageParser<DurationChangeSkillCfg>(() => new DurationChangeSkillCfg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DurationChangeSkillCfg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DurationChangeSkillCfg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DurationChangeSkillCfg(DurationChangeSkillCfg other) : this() {
      shortFrame_ = other.shortFrame_;
      shortSkillId_ = other.shortSkillId_;
      notShortFrame_ = other.notShortFrame_;
      notShortSkillId_ = other.notShortSkillId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DurationChangeSkillCfg Clone() {
      return new DurationChangeSkillCfg(this);
    }

    /// <summary>Field number for the "ShortFrame" field.</summary>
    public const int ShortFrameFieldNumber = 1;
    private int shortFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShortFrame {
      get { return shortFrame_; }
      set {
        shortFrame_ = value;
      }
    }

    /// <summary>Field number for the "ShortSkillId" field.</summary>
    public const int ShortSkillIdFieldNumber = 2;
    private int shortSkillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShortSkillId {
      get { return shortSkillId_; }
      set {
        shortSkillId_ = value;
      }
    }

    /// <summary>Field number for the "NotShortFrame" field.</summary>
    public const int NotShortFrameFieldNumber = 3;
    private int notShortFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NotShortFrame {
      get { return notShortFrame_; }
      set {
        notShortFrame_ = value;
      }
    }

    /// <summary>Field number for the "NotShortSkillId" field.</summary>
    public const int NotShortSkillIdFieldNumber = 4;
    private int notShortSkillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NotShortSkillId {
      get { return notShortSkillId_; }
      set {
        notShortSkillId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DurationChangeSkillCfg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DurationChangeSkillCfg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShortFrame != other.ShortFrame) return false;
      if (ShortSkillId != other.ShortSkillId) return false;
      if (NotShortFrame != other.NotShortFrame) return false;
      if (NotShortSkillId != other.NotShortSkillId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShortFrame != 0) hash ^= ShortFrame.GetHashCode();
      if (ShortSkillId != 0) hash ^= ShortSkillId.GetHashCode();
      if (NotShortFrame != 0) hash ^= NotShortFrame.GetHashCode();
      if (NotShortSkillId != 0) hash ^= NotShortSkillId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShortFrame != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ShortFrame);
      }
      if (ShortSkillId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ShortSkillId);
      }
      if (NotShortFrame != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NotShortFrame);
      }
      if (NotShortSkillId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NotShortSkillId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShortFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShortFrame);
      }
      if (ShortSkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShortSkillId);
      }
      if (NotShortFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NotShortFrame);
      }
      if (NotShortSkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NotShortSkillId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DurationChangeSkillCfg other) {
      if (other == null) {
        return;
      }
      if (other.ShortFrame != 0) {
        ShortFrame = other.ShortFrame;
      }
      if (other.ShortSkillId != 0) {
        ShortSkillId = other.ShortSkillId;
      }
      if (other.NotShortFrame != 0) {
        NotShortFrame = other.NotShortFrame;
      }
      if (other.NotShortSkillId != 0) {
        NotShortSkillId = other.NotShortSkillId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ShortFrame = input.ReadInt32();
            break;
          }
          case 16: {
            ShortSkillId = input.ReadInt32();
            break;
          }
          case 24: {
            NotShortFrame = input.ReadInt32();
            break;
          }
          case 32: {
            NotShortSkillId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChargeCfg : pb::IMessage<ChargeCfg> {
    private static readonly pb::MessageParser<ChargeCfg> _parser = new pb::MessageParser<ChargeCfg>(() => new ChargeCfg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChargeCfg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChargeCfg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChargeCfg(ChargeCfg other) : this() {
      hasCastAction_ = other.hasCastAction_;
      castTick_ = other.castTick_;
      chargeType_ = other.chargeType_;
      pressSkillCfg_ = other.pressSkillCfg_.Clone();
      chargeTick_ = other.chargeTick_;
      maxChargeTick_ = other.maxChargeTick_;
      chargeSkillId_ = other.chargeSkillId_;
      chargeEffect_ = other.chargeEffect_;
      castEffect_ = other.castEffect_;
      needShowChantBar_ = other.needShowChantBar_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChargeCfg Clone() {
      return new ChargeCfg(this);
    }

    /// <summary>Field number for the "HasCastAction" field.</summary>
    public const int HasCastActionFieldNumber = 1;
    private bool hasCastAction_;
    /// <summary>
    /// 有无施法阶段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCastAction {
      get { return hasCastAction_; }
      set {
        hasCastAction_ = value;
      }
    }

    /// <summary>Field number for the "CastTick" field.</summary>
    public const int CastTickFieldNumber = 2;
    private int castTick_;
    /// <summary>
    /// 施法阶段长度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CastTick {
      get { return castTick_; }
      set {
        castTick_ = value;
      }
    }

    /// <summary>Field number for the "ChargeType" field.</summary>
    public const int ChargeTypeFieldNumber = 3;
    private global::Pbe.ChargeType chargeType_ = 0;
    /// <summary>
    /// 蓄力类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.ChargeType ChargeType {
      get { return chargeType_; }
      set {
        chargeType_ = value;
      }
    }

    /// <summary>Field number for the "PressSkillCfg" field.</summary>
    public const int PressSkillCfgFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Pbe.PressSkillCfg> _repeated_pressSkillCfg_codec
        = pb::FieldCodec.ForMessage(34, global::Pbe.PressSkillCfg.Parser);
    private readonly pbc::RepeatedField<global::Pbe.PressSkillCfg> pressSkillCfg_ = new pbc::RepeatedField<global::Pbe.PressSkillCfg>();
    /// <summary>
    /// 蓄力帧区间对应技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.PressSkillCfg> PressSkillCfg {
      get { return pressSkillCfg_; }
    }

    /// <summary>Field number for the "ChargeTick" field.</summary>
    public const int ChargeTickFieldNumber = 5;
    private int chargeTick_;
    /// <summary>
    /// 蓄力到100%所需帧
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChargeTick {
      get { return chargeTick_; }
      set {
        chargeTick_ = value;
      }
    }

    /// <summary>Field number for the "MaxChargeTick" field.</summary>
    public const int MaxChargeTickFieldNumber = 6;
    private int maxChargeTick_;
    /// <summary>
    /// 最大蓄力帧数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxChargeTick {
      get { return maxChargeTick_; }
      set {
        maxChargeTick_ = value;
      }
    }

    /// <summary>Field number for the "ChargeSkillId" field.</summary>
    public const int ChargeSkillIdFieldNumber = 7;
    private int chargeSkillId_;
    /// <summary>
    /// 蓄力阶段技能ID，只有在技能有施法阶段时才有效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChargeSkillId {
      get { return chargeSkillId_; }
      set {
        chargeSkillId_ = value;
      }
    }

    /// <summary>Field number for the "ChargeEffect" field.</summary>
    public const int ChargeEffectFieldNumber = 8;
    private int chargeEffect_;
    /// <summary>
    /// 蓄力特效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChargeEffect {
      get { return chargeEffect_; }
      set {
        chargeEffect_ = value;
      }
    }

    /// <summary>Field number for the "CastEffect" field.</summary>
    public const int CastEffectFieldNumber = 9;
    private int castEffect_;
    /// <summary>
    /// 结束特效    
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CastEffect {
      get { return castEffect_; }
      set {
        castEffect_ = value;
      }
    }

    /// <summary>Field number for the "NeedShowChantBar" field.</summary>
    public const int NeedShowChantBarFieldNumber = 10;
    private bool needShowChantBar_;
    /// <summary>
    /// 是否显示施法条
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NeedShowChantBar {
      get { return needShowChantBar_; }
      set {
        needShowChantBar_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChargeCfg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChargeCfg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HasCastAction != other.HasCastAction) return false;
      if (CastTick != other.CastTick) return false;
      if (ChargeType != other.ChargeType) return false;
      if(!pressSkillCfg_.Equals(other.pressSkillCfg_)) return false;
      if (ChargeTick != other.ChargeTick) return false;
      if (MaxChargeTick != other.MaxChargeTick) return false;
      if (ChargeSkillId != other.ChargeSkillId) return false;
      if (ChargeEffect != other.ChargeEffect) return false;
      if (CastEffect != other.CastEffect) return false;
      if (NeedShowChantBar != other.NeedShowChantBar) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCastAction != false) hash ^= HasCastAction.GetHashCode();
      if (CastTick != 0) hash ^= CastTick.GetHashCode();
      if (ChargeType != 0) hash ^= ChargeType.GetHashCode();
      hash ^= pressSkillCfg_.GetHashCode();
      if (ChargeTick != 0) hash ^= ChargeTick.GetHashCode();
      if (MaxChargeTick != 0) hash ^= MaxChargeTick.GetHashCode();
      if (ChargeSkillId != 0) hash ^= ChargeSkillId.GetHashCode();
      if (ChargeEffect != 0) hash ^= ChargeEffect.GetHashCode();
      if (CastEffect != 0) hash ^= CastEffect.GetHashCode();
      if (NeedShowChantBar != false) hash ^= NeedShowChantBar.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasCastAction != false) {
        output.WriteRawTag(8);
        output.WriteBool(HasCastAction);
      }
      if (CastTick != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CastTick);
      }
      if (ChargeType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ChargeType);
      }
      pressSkillCfg_.WriteTo(output, _repeated_pressSkillCfg_codec);
      if (ChargeTick != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ChargeTick);
      }
      if (MaxChargeTick != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MaxChargeTick);
      }
      if (ChargeSkillId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ChargeSkillId);
      }
      if (ChargeEffect != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ChargeEffect);
      }
      if (CastEffect != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CastEffect);
      }
      if (NeedShowChantBar != false) {
        output.WriteRawTag(80);
        output.WriteBool(NeedShowChantBar);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCastAction != false) {
        size += 1 + 1;
      }
      if (CastTick != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CastTick);
      }
      if (ChargeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChargeType);
      }
      size += pressSkillCfg_.CalculateSize(_repeated_pressSkillCfg_codec);
      if (ChargeTick != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChargeTick);
      }
      if (MaxChargeTick != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxChargeTick);
      }
      if (ChargeSkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChargeSkillId);
      }
      if (ChargeEffect != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChargeEffect);
      }
      if (CastEffect != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CastEffect);
      }
      if (NeedShowChantBar != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChargeCfg other) {
      if (other == null) {
        return;
      }
      if (other.HasCastAction != false) {
        HasCastAction = other.HasCastAction;
      }
      if (other.CastTick != 0) {
        CastTick = other.CastTick;
      }
      if (other.ChargeType != 0) {
        ChargeType = other.ChargeType;
      }
      pressSkillCfg_.Add(other.pressSkillCfg_);
      if (other.ChargeTick != 0) {
        ChargeTick = other.ChargeTick;
      }
      if (other.MaxChargeTick != 0) {
        MaxChargeTick = other.MaxChargeTick;
      }
      if (other.ChargeSkillId != 0) {
        ChargeSkillId = other.ChargeSkillId;
      }
      if (other.ChargeEffect != 0) {
        ChargeEffect = other.ChargeEffect;
      }
      if (other.CastEffect != 0) {
        CastEffect = other.CastEffect;
      }
      if (other.NeedShowChantBar != false) {
        NeedShowChantBar = other.NeedShowChantBar;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HasCastAction = input.ReadBool();
            break;
          }
          case 16: {
            CastTick = input.ReadInt32();
            break;
          }
          case 24: {
            chargeType_ = (global::Pbe.ChargeType) input.ReadEnum();
            break;
          }
          case 34: {
            pressSkillCfg_.AddEntriesFrom(input, _repeated_pressSkillCfg_codec);
            break;
          }
          case 40: {
            ChargeTick = input.ReadInt32();
            break;
          }
          case 48: {
            MaxChargeTick = input.ReadInt32();
            break;
          }
          case 56: {
            ChargeSkillId = input.ReadInt32();
            break;
          }
          case 64: {
            ChargeEffect = input.ReadInt32();
            break;
          }
          case 72: {
            CastEffect = input.ReadInt32();
            break;
          }
          case 80: {
            NeedShowChantBar = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SkillLimitInfo : pb::IMessage<SkillLimitInfo> {
    private static readonly pb::MessageParser<SkillLimitInfo> _parser = new pb::MessageParser<SkillLimitInfo>(() => new SkillLimitInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillLimitInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillLimitInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillLimitInfo(SkillLimitInfo other) : this() {
      limitType_ = other.limitType_;
      limitValue_ = other.limitValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillLimitInfo Clone() {
      return new SkillLimitInfo(this);
    }

    /// <summary>Field number for the "LimitType" field.</summary>
    public const int LimitTypeFieldNumber = 1;
    private global::Pbe.ConditonLimitType limitType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.ConditonLimitType LimitType {
      get { return limitType_; }
      set {
        limitType_ = value;
      }
    }

    /// <summary>Field number for the "LimitValue" field.</summary>
    public const int LimitValueFieldNumber = 2;
    private int limitValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LimitValue {
      get { return limitValue_; }
      set {
        limitValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillLimitInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillLimitInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LimitType != other.LimitType) return false;
      if (LimitValue != other.LimitValue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LimitType != 0) hash ^= LimitType.GetHashCode();
      if (LimitValue != 0) hash ^= LimitValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LimitType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) LimitType);
      }
      if (LimitValue != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LimitValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LimitType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LimitType);
      }
      if (LimitValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LimitValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillLimitInfo other) {
      if (other == null) {
        return;
      }
      if (other.LimitType != 0) {
        LimitType = other.LimitType;
      }
      if (other.LimitValue != 0) {
        LimitValue = other.LimitValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            limitType_ = (global::Pbe.ConditonLimitType) input.ReadEnum();
            break;
          }
          case 16: {
            LimitValue = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OpenCloseCfg : pb::IMessage<OpenCloseCfg> {
    private static readonly pb::MessageParser<OpenCloseCfg> _parser = new pb::MessageParser<OpenCloseCfg>(() => new OpenCloseCfg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpenCloseCfg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenCloseCfg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenCloseCfg(OpenCloseCfg other) : this() {
      castTime_ = other.castTime_;
      autoOpen_ = other.autoOpen_;
      holdingTime_ = other.holdingTime_;
      skillLimits_ = other.skillLimits_.Clone();
      buffInfos_ = other.buffInfos_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenCloseCfg Clone() {
      return new OpenCloseCfg(this);
    }

    /// <summary>Field number for the "CastTime" field.</summary>
    public const int CastTimeFieldNumber = 1;
    private int castTime_;
    /// <summary>
    ///施法时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CastTime {
      get { return castTime_; }
      set {
        castTime_ = value;
      }
    }

    /// <summary>Field number for the "AutoOpen" field.</summary>
    public const int AutoOpenFieldNumber = 2;
    private bool autoOpen_;
    /// <summary>
    ///默认开启
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoOpen {
      get { return autoOpen_; }
      set {
        autoOpen_ = value;
      }
    }

    /// <summary>Field number for the "HoldingTime" field.</summary>
    public const int HoldingTimeFieldNumber = 3;
    private int holdingTime_;
    /// <summary>
    ///持续时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HoldingTime {
      get { return holdingTime_; }
      set {
        holdingTime_ = value;
      }
    }

    /// <summary>Field number for the "SkillLimits" field.</summary>
    public const int SkillLimitsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Pbe.SkillLimitInfo> _repeated_skillLimits_codec
        = pb::FieldCodec.ForMessage(34, global::Pbe.SkillLimitInfo.Parser);
    private readonly pbc::RepeatedField<global::Pbe.SkillLimitInfo> skillLimits_ = new pbc::RepeatedField<global::Pbe.SkillLimitInfo>();
    /// <summary>
    ///技能开启限制条件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.SkillLimitInfo> SkillLimits {
      get { return skillLimits_; }
    }

    /// <summary>Field number for the "BuffInfos" field.</summary>
    public const int BuffInfosFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_buffInfos_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> buffInfos_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///buff效果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BuffInfos {
      get { return buffInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpenCloseCfg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpenCloseCfg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CastTime != other.CastTime) return false;
      if (AutoOpen != other.AutoOpen) return false;
      if (HoldingTime != other.HoldingTime) return false;
      if(!skillLimits_.Equals(other.skillLimits_)) return false;
      if(!buffInfos_.Equals(other.buffInfos_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CastTime != 0) hash ^= CastTime.GetHashCode();
      if (AutoOpen != false) hash ^= AutoOpen.GetHashCode();
      if (HoldingTime != 0) hash ^= HoldingTime.GetHashCode();
      hash ^= skillLimits_.GetHashCode();
      hash ^= buffInfos_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CastTime != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CastTime);
      }
      if (AutoOpen != false) {
        output.WriteRawTag(16);
        output.WriteBool(AutoOpen);
      }
      if (HoldingTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HoldingTime);
      }
      skillLimits_.WriteTo(output, _repeated_skillLimits_codec);
      buffInfos_.WriteTo(output, _repeated_buffInfos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CastTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CastTime);
      }
      if (AutoOpen != false) {
        size += 1 + 1;
      }
      if (HoldingTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HoldingTime);
      }
      size += skillLimits_.CalculateSize(_repeated_skillLimits_codec);
      size += buffInfos_.CalculateSize(_repeated_buffInfos_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpenCloseCfg other) {
      if (other == null) {
        return;
      }
      if (other.CastTime != 0) {
        CastTime = other.CastTime;
      }
      if (other.AutoOpen != false) {
        AutoOpen = other.AutoOpen;
      }
      if (other.HoldingTime != 0) {
        HoldingTime = other.HoldingTime;
      }
      skillLimits_.Add(other.skillLimits_);
      buffInfos_.Add(other.buffInfos_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CastTime = input.ReadInt32();
            break;
          }
          case 16: {
            AutoOpen = input.ReadBool();
            break;
          }
          case 24: {
            HoldingTime = input.ReadInt32();
            break;
          }
          case 34: {
            skillLimits_.AddEntriesFrom(input, _repeated_skillLimits_codec);
            break;
          }
          case 42:
          case 40: {
            buffInfos_.AddEntriesFrom(input, _repeated_buffInfos_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DirSkillCfg : pb::IMessage<DirSkillCfg> {
    private static readonly pb::MessageParser<DirSkillCfg> _parser = new pb::MessageParser<DirSkillCfg>(() => new DirSkillCfg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DirSkillCfg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DirSkillCfg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DirSkillCfg(DirSkillCfg other) : this() {
      dir_ = other.dir_;
      skillId_ = other.skillId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DirSkillCfg Clone() {
      return new DirSkillCfg(this);
    }

    /// <summary>Field number for the "Dir" field.</summary>
    public const int DirFieldNumber = 1;
    private global::Pbe.SlideDir dir_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.SlideDir Dir {
      get { return dir_; }
      set {
        dir_ = value;
      }
    }

    /// <summary>Field number for the "SkillId" field.</summary>
    public const int SkillIdFieldNumber = 2;
    private int skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DirSkillCfg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DirSkillCfg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Dir != other.Dir) return false;
      if (SkillId != other.SkillId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Dir != 0) hash ^= Dir.GetHashCode();
      if (SkillId != 0) hash ^= SkillId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Dir != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Dir);
      }
      if (SkillId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SkillId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Dir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Dir);
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DirSkillCfg other) {
      if (other == null) {
        return;
      }
      if (other.Dir != 0) {
        Dir = other.Dir;
      }
      if (other.SkillId != 0) {
        SkillId = other.SkillId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            dir_ = (global::Pbe.SlideDir) input.ReadEnum();
            break;
          }
          case 16: {
            SkillId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IntPair : pb::IMessage<IntPair> {
    private static readonly pb::MessageParser<IntPair> _parser = new pb::MessageParser<IntPair>(() => new IntPair());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IntPair> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntPair() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntPair(IntPair other) : this() {
      first_ = other.first_;
      second_ = other.second_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntPair Clone() {
      return new IntPair(this);
    }

    /// <summary>Field number for the "First" field.</summary>
    public const int FirstFieldNumber = 1;
    private int first_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int First {
      get { return first_; }
      set {
        first_ = value;
      }
    }

    /// <summary>Field number for the "Second" field.</summary>
    public const int SecondFieldNumber = 2;
    private int second_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Second {
      get { return second_; }
      set {
        second_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IntPair);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IntPair other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (First != other.First) return false;
      if (Second != other.Second) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (First != 0) hash ^= First.GetHashCode();
      if (Second != 0) hash ^= Second.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (First != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(First);
      }
      if (Second != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Second);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (First != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(First);
      }
      if (Second != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Second);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IntPair other) {
      if (other == null) {
        return;
      }
      if (other.First != 0) {
        First = other.First;
      }
      if (other.Second != 0) {
        Second = other.Second;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            First = input.ReadInt32();
            break;
          }
          case 16: {
            Second = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SlideCfg : pb::IMessage<SlideCfg> {
    private static readonly pb::MessageParser<SlideCfg> _parser = new pb::MessageParser<SlideCfg>(() => new SlideCfg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SlideCfg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SlideCfg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SlideCfg(SlideCfg other) : this() {
      showTip_ = other.showTip_;
      tipMode_ = other.tipMode_;
      pressDownType_ = other.pressDownType_;
      skillDown_ = other.skillDown_;
      skillDownMapping_ = other.skillDownMapping_.Clone();
      holdOnType_ = other.holdOnType_;
      maxHoldTime_ = other.maxHoldTime_;
      skillHold_ = other.skillHold_;
      skillHoldMapping_ = other.skillHoldMapping_.Clone();
      pressUpType_ = other.pressUpType_;
      skillUp_ = other.skillUp_;
      skillUpMapping_ = other.skillUpMapping_.Clone();
      repeatTimes_ = other.repeatTimes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SlideCfg Clone() {
      return new SlideCfg(this);
    }

    /// <summary>Field number for the "ShowTip" field.</summary>
    public const int ShowTipFieldNumber = 1;
    private bool showTip_;
    /// <summary>
    /// 显示摇杆提示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowTip {
      get { return showTip_; }
      set {
        showTip_ = value;
      }
    }

    /// <summary>Field number for the "TipMode" field.</summary>
    public const int TipModeFieldNumber = 2;
    private int tipMode_;
    /// <summary>
    /// 提示模式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TipMode {
      get { return tipMode_; }
      set {
        tipMode_ = value;
      }
    }

    /// <summary>Field number for the "PressDownType" field.</summary>
    public const int PressDownTypeFieldNumber = 3;
    private global::Pbe.SkillNum pressDownType_ = 0;
    /// <summary>
    /// 按下阶段模式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.SkillNum PressDownType {
      get { return pressDownType_; }
      set {
        pressDownType_ = value;
      }
    }

    /// <summary>Field number for the "SkillDown" field.</summary>
    public const int SkillDownFieldNumber = 4;
    private int skillDown_;
    /// <summary>
    /// 按下阶段技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillDown {
      get { return skillDown_; }
      set {
        skillDown_ = value;
      }
    }

    /// <summary>Field number for the "SkillDownMapping" field.</summary>
    public const int SkillDownMappingFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Pbe.IntPair> _repeated_skillDownMapping_codec
        = pb::FieldCodec.ForMessage(42, global::Pbe.IntPair.Parser);
    private readonly pbc::RepeatedField<global::Pbe.IntPair> skillDownMapping_ = new pbc::RepeatedField<global::Pbe.IntPair>();
    /// <summary>
    /// 按下阶段技能映射
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.IntPair> SkillDownMapping {
      get { return skillDownMapping_; }
    }

    /// <summary>Field number for the "HoldOnType" field.</summary>
    public const int HoldOnTypeFieldNumber = 6;
    private global::Pbe.SkillNum holdOnType_ = 0;
    /// <summary>
    /// 保持阶段类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.SkillNum HoldOnType {
      get { return holdOnType_; }
      set {
        holdOnType_ = value;
      }
    }

    /// <summary>Field number for the "MaxHoldTime" field.</summary>
    public const int MaxHoldTimeFieldNumber = 7;
    private int maxHoldTime_;
    /// <summary>
    /// 最大按住时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxHoldTime {
      get { return maxHoldTime_; }
      set {
        maxHoldTime_ = value;
      }
    }

    /// <summary>Field number for the "SkillHold" field.</summary>
    public const int SkillHoldFieldNumber = 8;
    private int skillHold_;
    /// <summary>
    /// 保持阶段技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillHold {
      get { return skillHold_; }
      set {
        skillHold_ = value;
      }
    }

    /// <summary>Field number for the "SkillHoldMapping" field.</summary>
    public const int SkillHoldMappingFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Pbe.DirSkillCfg> _repeated_skillHoldMapping_codec
        = pb::FieldCodec.ForMessage(74, global::Pbe.DirSkillCfg.Parser);
    private readonly pbc::RepeatedField<global::Pbe.DirSkillCfg> skillHoldMapping_ = new pbc::RepeatedField<global::Pbe.DirSkillCfg>();
    /// <summary>
    /// 保持阶段技能映射
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.DirSkillCfg> SkillHoldMapping {
      get { return skillHoldMapping_; }
    }

    /// <summary>Field number for the "PressUpType" field.</summary>
    public const int PressUpTypeFieldNumber = 10;
    private global::Pbe.SkillNum pressUpType_ = 0;
    /// <summary>
    /// 松开阶段模式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.SkillNum PressUpType {
      get { return pressUpType_; }
      set {
        pressUpType_ = value;
      }
    }

    /// <summary>Field number for the "SkillUp" field.</summary>
    public const int SkillUpFieldNumber = 11;
    private int skillUp_;
    /// <summary>
    /// 松开阶段技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillUp {
      get { return skillUp_; }
      set {
        skillUp_ = value;
      }
    }

    /// <summary>Field number for the "SkillUpMapping" field.</summary>
    public const int SkillUpMappingFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Pbe.DirSkillCfg> _repeated_skillUpMapping_codec
        = pb::FieldCodec.ForMessage(98, global::Pbe.DirSkillCfg.Parser);
    private readonly pbc::RepeatedField<global::Pbe.DirSkillCfg> skillUpMapping_ = new pbc::RepeatedField<global::Pbe.DirSkillCfg>();
    /// <summary>
    /// 松开阶段技能映射
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.DirSkillCfg> SkillUpMapping {
      get { return skillUpMapping_; }
    }

    /// <summary>Field number for the "repeatTimes" field.</summary>
    public const int RepeatTimesFieldNumber = 13;
    private int repeatTimes_;
    /// <summary>
    /// loop次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RepeatTimes {
      get { return repeatTimes_; }
      set {
        repeatTimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SlideCfg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SlideCfg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShowTip != other.ShowTip) return false;
      if (TipMode != other.TipMode) return false;
      if (PressDownType != other.PressDownType) return false;
      if (SkillDown != other.SkillDown) return false;
      if(!skillDownMapping_.Equals(other.skillDownMapping_)) return false;
      if (HoldOnType != other.HoldOnType) return false;
      if (MaxHoldTime != other.MaxHoldTime) return false;
      if (SkillHold != other.SkillHold) return false;
      if(!skillHoldMapping_.Equals(other.skillHoldMapping_)) return false;
      if (PressUpType != other.PressUpType) return false;
      if (SkillUp != other.SkillUp) return false;
      if(!skillUpMapping_.Equals(other.skillUpMapping_)) return false;
      if (RepeatTimes != other.RepeatTimes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShowTip != false) hash ^= ShowTip.GetHashCode();
      if (TipMode != 0) hash ^= TipMode.GetHashCode();
      if (PressDownType != 0) hash ^= PressDownType.GetHashCode();
      if (SkillDown != 0) hash ^= SkillDown.GetHashCode();
      hash ^= skillDownMapping_.GetHashCode();
      if (HoldOnType != 0) hash ^= HoldOnType.GetHashCode();
      if (MaxHoldTime != 0) hash ^= MaxHoldTime.GetHashCode();
      if (SkillHold != 0) hash ^= SkillHold.GetHashCode();
      hash ^= skillHoldMapping_.GetHashCode();
      if (PressUpType != 0) hash ^= PressUpType.GetHashCode();
      if (SkillUp != 0) hash ^= SkillUp.GetHashCode();
      hash ^= skillUpMapping_.GetHashCode();
      if (RepeatTimes != 0) hash ^= RepeatTimes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShowTip != false) {
        output.WriteRawTag(8);
        output.WriteBool(ShowTip);
      }
      if (TipMode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TipMode);
      }
      if (PressDownType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) PressDownType);
      }
      if (SkillDown != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SkillDown);
      }
      skillDownMapping_.WriteTo(output, _repeated_skillDownMapping_codec);
      if (HoldOnType != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) HoldOnType);
      }
      if (MaxHoldTime != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(MaxHoldTime);
      }
      if (SkillHold != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(SkillHold);
      }
      skillHoldMapping_.WriteTo(output, _repeated_skillHoldMapping_codec);
      if (PressUpType != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) PressUpType);
      }
      if (SkillUp != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(SkillUp);
      }
      skillUpMapping_.WriteTo(output, _repeated_skillUpMapping_codec);
      if (RepeatTimes != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(RepeatTimes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShowTip != false) {
        size += 1 + 1;
      }
      if (TipMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TipMode);
      }
      if (PressDownType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PressDownType);
      }
      if (SkillDown != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillDown);
      }
      size += skillDownMapping_.CalculateSize(_repeated_skillDownMapping_codec);
      if (HoldOnType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HoldOnType);
      }
      if (MaxHoldTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHoldTime);
      }
      if (SkillHold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillHold);
      }
      size += skillHoldMapping_.CalculateSize(_repeated_skillHoldMapping_codec);
      if (PressUpType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PressUpType);
      }
      if (SkillUp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillUp);
      }
      size += skillUpMapping_.CalculateSize(_repeated_skillUpMapping_codec);
      if (RepeatTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RepeatTimes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SlideCfg other) {
      if (other == null) {
        return;
      }
      if (other.ShowTip != false) {
        ShowTip = other.ShowTip;
      }
      if (other.TipMode != 0) {
        TipMode = other.TipMode;
      }
      if (other.PressDownType != 0) {
        PressDownType = other.PressDownType;
      }
      if (other.SkillDown != 0) {
        SkillDown = other.SkillDown;
      }
      skillDownMapping_.Add(other.skillDownMapping_);
      if (other.HoldOnType != 0) {
        HoldOnType = other.HoldOnType;
      }
      if (other.MaxHoldTime != 0) {
        MaxHoldTime = other.MaxHoldTime;
      }
      if (other.SkillHold != 0) {
        SkillHold = other.SkillHold;
      }
      skillHoldMapping_.Add(other.skillHoldMapping_);
      if (other.PressUpType != 0) {
        PressUpType = other.PressUpType;
      }
      if (other.SkillUp != 0) {
        SkillUp = other.SkillUp;
      }
      skillUpMapping_.Add(other.skillUpMapping_);
      if (other.RepeatTimes != 0) {
        RepeatTimes = other.RepeatTimes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ShowTip = input.ReadBool();
            break;
          }
          case 16: {
            TipMode = input.ReadInt32();
            break;
          }
          case 24: {
            pressDownType_ = (global::Pbe.SkillNum) input.ReadEnum();
            break;
          }
          case 32: {
            SkillDown = input.ReadInt32();
            break;
          }
          case 42: {
            skillDownMapping_.AddEntriesFrom(input, _repeated_skillDownMapping_codec);
            break;
          }
          case 48: {
            holdOnType_ = (global::Pbe.SkillNum) input.ReadEnum();
            break;
          }
          case 56: {
            MaxHoldTime = input.ReadInt32();
            break;
          }
          case 64: {
            SkillHold = input.ReadInt32();
            break;
          }
          case 74: {
            skillHoldMapping_.AddEntriesFrom(input, _repeated_skillHoldMapping_codec);
            break;
          }
          case 80: {
            pressUpType_ = (global::Pbe.SkillNum) input.ReadEnum();
            break;
          }
          case 88: {
            SkillUp = input.ReadInt32();
            break;
          }
          case 98: {
            skillUpMapping_.AddEntriesFrom(input, _repeated_skillUpMapping_codec);
            break;
          }
          case 104: {
            RepeatTimes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class JoystickSkillCfg : pb::IMessage<JoystickSkillCfg> {
    private static readonly pb::MessageParser<JoystickSkillCfg> _parser = new pb::MessageParser<JoystickSkillCfg>(() => new JoystickSkillCfg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoystickSkillCfg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoystickSkillCfg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoystickSkillCfg(JoystickSkillCfg other) : this() {
      castTick_ = other.castTick_;
      xYMove_ = other.xYMove_;
      xZMove_ = other.xZMove_;
      rangeOffsetX_ = other.rangeOffsetX_;
      rangeOffsetY_ = other.rangeOffsetY_;
      rangeOffsetZ_ = other.rangeOffsetZ_;
      cursorOffsetX_ = other.cursorOffsetX_;
      cursorOffsetY_ = other.cursorOffsetY_;
      cursorOffsetZ_ = other.cursorOffsetZ_;
      speedX_ = other.speedX_;
      speedY_ = other.speedY_;
      rangeX_ = other.rangeX_;
      rangeY_ = other.rangeY_;
      followCamera_ = other.followCamera_;
      rangeEffectID_ = other.rangeEffectID_;
      cursorEffectID_ = other.cursorEffectID_;
      castEffectID_ = other.castEffectID_;
      castSkill_ = other.castSkill_ != null ? other.castSkill_.Clone() : null;
      castType_ = other.castType_;
      entityInfoList_ = other.entityInfoList_.Clone();
      holdTick_ = other.holdTick_;
      castBySpeed_ = other.castBySpeed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoystickSkillCfg Clone() {
      return new JoystickSkillCfg(this);
    }

    /// <summary>Field number for the "CastTick" field.</summary>
    public const int CastTickFieldNumber = 1;
    private int castTick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CastTick {
      get { return castTick_; }
      set {
        castTick_ = value;
      }
    }

    /// <summary>Field number for the "XYMove" field.</summary>
    public const int XYMoveFieldNumber = 2;
    private bool xYMove_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool XYMove {
      get { return xYMove_; }
      set {
        xYMove_ = value;
      }
    }

    /// <summary>Field number for the "XZMove" field.</summary>
    public const int XZMoveFieldNumber = 3;
    private bool xZMove_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool XZMove {
      get { return xZMove_; }
      set {
        xZMove_ = value;
      }
    }

    /// <summary>Field number for the "RangeOffsetX" field.</summary>
    public const int RangeOffsetXFieldNumber = 4;
    private float rangeOffsetX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RangeOffsetX {
      get { return rangeOffsetX_; }
      set {
        rangeOffsetX_ = value;
      }
    }

    /// <summary>Field number for the "RangeOffsetY" field.</summary>
    public const int RangeOffsetYFieldNumber = 5;
    private float rangeOffsetY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RangeOffsetY {
      get { return rangeOffsetY_; }
      set {
        rangeOffsetY_ = value;
      }
    }

    /// <summary>Field number for the "RangeOffsetZ" field.</summary>
    public const int RangeOffsetZFieldNumber = 6;
    private float rangeOffsetZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RangeOffsetZ {
      get { return rangeOffsetZ_; }
      set {
        rangeOffsetZ_ = value;
      }
    }

    /// <summary>Field number for the "CursorOffsetX" field.</summary>
    public const int CursorOffsetXFieldNumber = 7;
    private float cursorOffsetX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CursorOffsetX {
      get { return cursorOffsetX_; }
      set {
        cursorOffsetX_ = value;
      }
    }

    /// <summary>Field number for the "CursorOffsetY" field.</summary>
    public const int CursorOffsetYFieldNumber = 8;
    private float cursorOffsetY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CursorOffsetY {
      get { return cursorOffsetY_; }
      set {
        cursorOffsetY_ = value;
      }
    }

    /// <summary>Field number for the "CursorOffsetZ" field.</summary>
    public const int CursorOffsetZFieldNumber = 9;
    private float cursorOffsetZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CursorOffsetZ {
      get { return cursorOffsetZ_; }
      set {
        cursorOffsetZ_ = value;
      }
    }

    /// <summary>Field number for the "SpeedX" field.</summary>
    public const int SpeedXFieldNumber = 10;
    private float speedX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpeedX {
      get { return speedX_; }
      set {
        speedX_ = value;
      }
    }

    /// <summary>Field number for the "SpeedY" field.</summary>
    public const int SpeedYFieldNumber = 11;
    private float speedY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpeedY {
      get { return speedY_; }
      set {
        speedY_ = value;
      }
    }

    /// <summary>Field number for the "RangeX" field.</summary>
    public const int RangeXFieldNumber = 12;
    private float rangeX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RangeX {
      get { return rangeX_; }
      set {
        rangeX_ = value;
      }
    }

    /// <summary>Field number for the "RangeY" field.</summary>
    public const int RangeYFieldNumber = 13;
    private float rangeY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RangeY {
      get { return rangeY_; }
      set {
        rangeY_ = value;
      }
    }

    /// <summary>Field number for the "FollowCamera" field.</summary>
    public const int FollowCameraFieldNumber = 14;
    private bool followCamera_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FollowCamera {
      get { return followCamera_; }
      set {
        followCamera_ = value;
      }
    }

    /// <summary>Field number for the "RangeEffectID" field.</summary>
    public const int RangeEffectIDFieldNumber = 15;
    private int rangeEffectID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RangeEffectID {
      get { return rangeEffectID_; }
      set {
        rangeEffectID_ = value;
      }
    }

    /// <summary>Field number for the "CursorEffectID" field.</summary>
    public const int CursorEffectIDFieldNumber = 16;
    private int cursorEffectID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CursorEffectID {
      get { return cursorEffectID_; }
      set {
        cursorEffectID_ = value;
      }
    }

    /// <summary>Field number for the "CastEffectID" field.</summary>
    public const int CastEffectIDFieldNumber = 17;
    private int castEffectID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CastEffectID {
      get { return castEffectID_; }
      set {
        castEffectID_ = value;
      }
    }

    /// <summary>Field number for the "CastSkill" field.</summary>
    public const int CastSkillFieldNumber = 18;
    private global::Pbe.JoystickCastCfg castSkill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.JoystickCastCfg CastSkill {
      get { return castSkill_; }
      set {
        castSkill_ = value;
      }
    }

    /// <summary>Field number for the "CastType" field.</summary>
    public const int CastTypeFieldNumber = 19;
    private global::Pbe.EnumPressCastType castType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.EnumPressCastType CastType {
      get { return castType_; }
      set {
        castType_ = value;
      }
    }

    /// <summary>Field number for the "EntityInfoList" field.</summary>
    public const int EntityInfoListFieldNumber = 20;
    private static readonly pb::FieldCodec<global::Pbe.EntityInfoConfig> _repeated_entityInfoList_codec
        = pb::FieldCodec.ForMessage(162, global::Pbe.EntityInfoConfig.Parser);
    private readonly pbc::RepeatedField<global::Pbe.EntityInfoConfig> entityInfoList_ = new pbc::RepeatedField<global::Pbe.EntityInfoConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.EntityInfoConfig> EntityInfoList {
      get { return entityInfoList_; }
    }

    /// <summary>Field number for the "HoldTick" field.</summary>
    public const int HoldTickFieldNumber = 21;
    private int holdTick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HoldTick {
      get { return holdTick_; }
      set {
        holdTick_ = value;
      }
    }

    /// <summary>Field number for the "CastBySpeed" field.</summary>
    public const int CastBySpeedFieldNumber = 22;
    private bool castBySpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CastBySpeed {
      get { return castBySpeed_; }
      set {
        castBySpeed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoystickSkillCfg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoystickSkillCfg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CastTick != other.CastTick) return false;
      if (XYMove != other.XYMove) return false;
      if (XZMove != other.XZMove) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RangeOffsetX, other.RangeOffsetX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RangeOffsetY, other.RangeOffsetY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RangeOffsetZ, other.RangeOffsetZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CursorOffsetX, other.CursorOffsetX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CursorOffsetY, other.CursorOffsetY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CursorOffsetZ, other.CursorOffsetZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpeedX, other.SpeedX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpeedY, other.SpeedY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RangeX, other.RangeX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RangeY, other.RangeY)) return false;
      if (FollowCamera != other.FollowCamera) return false;
      if (RangeEffectID != other.RangeEffectID) return false;
      if (CursorEffectID != other.CursorEffectID) return false;
      if (CastEffectID != other.CastEffectID) return false;
      if (!object.Equals(CastSkill, other.CastSkill)) return false;
      if (CastType != other.CastType) return false;
      if(!entityInfoList_.Equals(other.entityInfoList_)) return false;
      if (HoldTick != other.HoldTick) return false;
      if (CastBySpeed != other.CastBySpeed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CastTick != 0) hash ^= CastTick.GetHashCode();
      if (XYMove != false) hash ^= XYMove.GetHashCode();
      if (XZMove != false) hash ^= XZMove.GetHashCode();
      if (RangeOffsetX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RangeOffsetX);
      if (RangeOffsetY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RangeOffsetY);
      if (RangeOffsetZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RangeOffsetZ);
      if (CursorOffsetX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CursorOffsetX);
      if (CursorOffsetY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CursorOffsetY);
      if (CursorOffsetZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CursorOffsetZ);
      if (SpeedX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpeedX);
      if (SpeedY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpeedY);
      if (RangeX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RangeX);
      if (RangeY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RangeY);
      if (FollowCamera != false) hash ^= FollowCamera.GetHashCode();
      if (RangeEffectID != 0) hash ^= RangeEffectID.GetHashCode();
      if (CursorEffectID != 0) hash ^= CursorEffectID.GetHashCode();
      if (CastEffectID != 0) hash ^= CastEffectID.GetHashCode();
      if (castSkill_ != null) hash ^= CastSkill.GetHashCode();
      if (CastType != 0) hash ^= CastType.GetHashCode();
      hash ^= entityInfoList_.GetHashCode();
      if (HoldTick != 0) hash ^= HoldTick.GetHashCode();
      if (CastBySpeed != false) hash ^= CastBySpeed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CastTick != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CastTick);
      }
      if (XYMove != false) {
        output.WriteRawTag(16);
        output.WriteBool(XYMove);
      }
      if (XZMove != false) {
        output.WriteRawTag(24);
        output.WriteBool(XZMove);
      }
      if (RangeOffsetX != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(RangeOffsetX);
      }
      if (RangeOffsetY != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(RangeOffsetY);
      }
      if (RangeOffsetZ != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(RangeOffsetZ);
      }
      if (CursorOffsetX != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(CursorOffsetX);
      }
      if (CursorOffsetY != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(CursorOffsetY);
      }
      if (CursorOffsetZ != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(CursorOffsetZ);
      }
      if (SpeedX != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(SpeedX);
      }
      if (SpeedY != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(SpeedY);
      }
      if (RangeX != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(RangeX);
      }
      if (RangeY != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(RangeY);
      }
      if (FollowCamera != false) {
        output.WriteRawTag(112);
        output.WriteBool(FollowCamera);
      }
      if (RangeEffectID != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(RangeEffectID);
      }
      if (CursorEffectID != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(CursorEffectID);
      }
      if (CastEffectID != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(CastEffectID);
      }
      if (castSkill_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(CastSkill);
      }
      if (CastType != 0) {
        output.WriteRawTag(152, 1);
        output.WriteEnum((int) CastType);
      }
      entityInfoList_.WriteTo(output, _repeated_entityInfoList_codec);
      if (HoldTick != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(HoldTick);
      }
      if (CastBySpeed != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(CastBySpeed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CastTick != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CastTick);
      }
      if (XYMove != false) {
        size += 1 + 1;
      }
      if (XZMove != false) {
        size += 1 + 1;
      }
      if (RangeOffsetX != 0F) {
        size += 1 + 4;
      }
      if (RangeOffsetY != 0F) {
        size += 1 + 4;
      }
      if (RangeOffsetZ != 0F) {
        size += 1 + 4;
      }
      if (CursorOffsetX != 0F) {
        size += 1 + 4;
      }
      if (CursorOffsetY != 0F) {
        size += 1 + 4;
      }
      if (CursorOffsetZ != 0F) {
        size += 1 + 4;
      }
      if (SpeedX != 0F) {
        size += 1 + 4;
      }
      if (SpeedY != 0F) {
        size += 1 + 4;
      }
      if (RangeX != 0F) {
        size += 1 + 4;
      }
      if (RangeY != 0F) {
        size += 1 + 4;
      }
      if (FollowCamera != false) {
        size += 1 + 1;
      }
      if (RangeEffectID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RangeEffectID);
      }
      if (CursorEffectID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CursorEffectID);
      }
      if (CastEffectID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CastEffectID);
      }
      if (castSkill_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CastSkill);
      }
      if (CastType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CastType);
      }
      size += entityInfoList_.CalculateSize(_repeated_entityInfoList_codec);
      if (HoldTick != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HoldTick);
      }
      if (CastBySpeed != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoystickSkillCfg other) {
      if (other == null) {
        return;
      }
      if (other.CastTick != 0) {
        CastTick = other.CastTick;
      }
      if (other.XYMove != false) {
        XYMove = other.XYMove;
      }
      if (other.XZMove != false) {
        XZMove = other.XZMove;
      }
      if (other.RangeOffsetX != 0F) {
        RangeOffsetX = other.RangeOffsetX;
      }
      if (other.RangeOffsetY != 0F) {
        RangeOffsetY = other.RangeOffsetY;
      }
      if (other.RangeOffsetZ != 0F) {
        RangeOffsetZ = other.RangeOffsetZ;
      }
      if (other.CursorOffsetX != 0F) {
        CursorOffsetX = other.CursorOffsetX;
      }
      if (other.CursorOffsetY != 0F) {
        CursorOffsetY = other.CursorOffsetY;
      }
      if (other.CursorOffsetZ != 0F) {
        CursorOffsetZ = other.CursorOffsetZ;
      }
      if (other.SpeedX != 0F) {
        SpeedX = other.SpeedX;
      }
      if (other.SpeedY != 0F) {
        SpeedY = other.SpeedY;
      }
      if (other.RangeX != 0F) {
        RangeX = other.RangeX;
      }
      if (other.RangeY != 0F) {
        RangeY = other.RangeY;
      }
      if (other.FollowCamera != false) {
        FollowCamera = other.FollowCamera;
      }
      if (other.RangeEffectID != 0) {
        RangeEffectID = other.RangeEffectID;
      }
      if (other.CursorEffectID != 0) {
        CursorEffectID = other.CursorEffectID;
      }
      if (other.CastEffectID != 0) {
        CastEffectID = other.CastEffectID;
      }
      if (other.castSkill_ != null) {
        if (castSkill_ == null) {
          castSkill_ = new global::Pbe.JoystickCastCfg();
        }
        CastSkill.MergeFrom(other.CastSkill);
      }
      if (other.CastType != 0) {
        CastType = other.CastType;
      }
      entityInfoList_.Add(other.entityInfoList_);
      if (other.HoldTick != 0) {
        HoldTick = other.HoldTick;
      }
      if (other.CastBySpeed != false) {
        CastBySpeed = other.CastBySpeed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CastTick = input.ReadInt32();
            break;
          }
          case 16: {
            XYMove = input.ReadBool();
            break;
          }
          case 24: {
            XZMove = input.ReadBool();
            break;
          }
          case 37: {
            RangeOffsetX = input.ReadFloat();
            break;
          }
          case 45: {
            RangeOffsetY = input.ReadFloat();
            break;
          }
          case 53: {
            RangeOffsetZ = input.ReadFloat();
            break;
          }
          case 61: {
            CursorOffsetX = input.ReadFloat();
            break;
          }
          case 69: {
            CursorOffsetY = input.ReadFloat();
            break;
          }
          case 77: {
            CursorOffsetZ = input.ReadFloat();
            break;
          }
          case 85: {
            SpeedX = input.ReadFloat();
            break;
          }
          case 93: {
            SpeedY = input.ReadFloat();
            break;
          }
          case 101: {
            RangeX = input.ReadFloat();
            break;
          }
          case 109: {
            RangeY = input.ReadFloat();
            break;
          }
          case 112: {
            FollowCamera = input.ReadBool();
            break;
          }
          case 120: {
            RangeEffectID = input.ReadInt32();
            break;
          }
          case 128: {
            CursorEffectID = input.ReadInt32();
            break;
          }
          case 136: {
            CastEffectID = input.ReadInt32();
            break;
          }
          case 146: {
            if (castSkill_ == null) {
              castSkill_ = new global::Pbe.JoystickCastCfg();
            }
            input.ReadMessage(castSkill_);
            break;
          }
          case 152: {
            castType_ = (global::Pbe.EnumPressCastType) input.ReadEnum();
            break;
          }
          case 162: {
            entityInfoList_.AddEntriesFrom(input, _repeated_entityInfoList_codec);
            break;
          }
          case 168: {
            HoldTick = input.ReadInt32();
            break;
          }
          case 176: {
            CastBySpeed = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class JoystickCastCfg : pb::IMessage<JoystickCastCfg> {
    private static readonly pb::MessageParser<JoystickCastCfg> _parser = new pb::MessageParser<JoystickCastCfg>(() => new JoystickCastCfg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoystickCastCfg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoystickCastCfg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoystickCastCfg(JoystickCastCfg other) : this() {
      skillID_ = other.skillID_;
      castNum_ = other.castNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoystickCastCfg Clone() {
      return new JoystickCastCfg(this);
    }

    /// <summary>Field number for the "SkillID" field.</summary>
    public const int SkillIDFieldNumber = 1;
    private int skillID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillID {
      get { return skillID_; }
      set {
        skillID_ = value;
      }
    }

    /// <summary>Field number for the "CastNum" field.</summary>
    public const int CastNumFieldNumber = 2;
    private string castNum_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CastNum {
      get { return castNum_; }
      set {
        castNum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoystickCastCfg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoystickCastCfg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SkillID != other.SkillID) return false;
      if (CastNum != other.CastNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SkillID != 0) hash ^= SkillID.GetHashCode();
      if (CastNum.Length != 0) hash ^= CastNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SkillID);
      }
      if (CastNum.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CastNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillID);
      }
      if (CastNum.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CastNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoystickCastCfg other) {
      if (other == null) {
        return;
      }
      if (other.SkillID != 0) {
        SkillID = other.SkillID;
      }
      if (other.CastNum.Length != 0) {
        CastNum = other.CastNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SkillID = input.ReadInt32();
            break;
          }
          case 18: {
            CastNum = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EffectConfig : pb::IMessage<EffectConfig> {
    private static readonly pb::MessageParser<EffectConfig> _parser = new pb::MessageParser<EffectConfig>(() => new EffectConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EffectConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectConfig(EffectConfig other) : this() {
      key_ = other.key_;
      effectInfo_ = other.effectInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectConfig Clone() {
      return new EffectConfig(this);
    }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 2;
    private int key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "EffectInfo" field.</summary>
    public const int EffectInfoFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Pbe.EffectInfo> _repeated_effectInfo_codec
        = pb::FieldCodec.ForMessage(26, global::Pbe.EffectInfo.Parser);
    private readonly pbc::RepeatedField<global::Pbe.EffectInfo> effectInfo_ = new pbc::RepeatedField<global::Pbe.EffectInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.EffectInfo> EffectInfo {
      get { return effectInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EffectConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EffectConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if(!effectInfo_.Equals(other.effectInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key != 0) hash ^= Key.GetHashCode();
      hash ^= effectInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Key);
      }
      effectInfo_.WriteTo(output, _repeated_effectInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key);
      }
      size += effectInfo_.CalculateSize(_repeated_effectInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EffectConfig other) {
      if (other == null) {
        return;
      }
      if (other.Key != 0) {
        Key = other.Key;
      }
      effectInfo_.Add(other.effectInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            Key = input.ReadInt32();
            break;
          }
          case 26: {
            effectInfo_.AddEntriesFrom(input, _repeated_effectInfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EffectInfo : pb::IMessage<EffectInfo> {
    private static readonly pb::MessageParser<EffectInfo> _parser = new pb::MessageParser<EffectInfo>(() => new EffectInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EffectInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectInfo(EffectInfo other) : this() {
      resName_ = other.resName_;
      effectType_ = other.effectType_;
      isLoop_ = other.isLoop_;
      loopCount_ = other.loopCount_;
      resType_ = other.resType_;
      blindPoint_ = other.blindPoint_;
      offsetX_ = other.offsetX_;
      offsetY_ = other.offsetY_;
      offsetZ_ = other.offsetZ_;
      deleteWhenChangeSkill_ = other.deleteWhenChangeSkill_;
      stopEffect_ = other.stopEffect_;
      deleteWhenChangeAction_ = other.deleteWhenChangeAction_;
      lifeCycleStyle_ = other.lifeCycleStyle_;
      scaleX_ = other.scaleX_;
      scaleY_ = other.scaleY_;
      scaleZ_ = other.scaleZ_;
      eulerX_ = other.eulerX_;
      eulerY_ = other.eulerY_;
      eulerZ_ = other.eulerZ_;
      duration_ = other.duration_;
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectInfo Clone() {
      return new EffectInfo(this);
    }

    /// <summary>Field number for the "ResName" field.</summary>
    public const int ResNameFieldNumber = 1;
    private string resName_ = "";
    /// <summary>
    /// 资源名(弃用)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResName {
      get { return resName_; }
      set {
        resName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EffectType" field.</summary>
    public const int EffectTypeFieldNumber = 2;
    private int effectType_;
    /// <summary>
    /// 特效生命周期类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EffectType {
      get { return effectType_; }
      set {
        effectType_ = value;
      }
    }

    /// <summary>Field number for the "IsLoop" field.</summary>
    public const int IsLoopFieldNumber = 3;
    private bool isLoop_;
    /// <summary>
    /// 是否循环
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLoop {
      get { return isLoop_; }
      set {
        isLoop_ = value;
      }
    }

    /// <summary>Field number for the "LoopCount" field.</summary>
    public const int LoopCountFieldNumber = 4;
    private int loopCount_;
    /// <summary>
    /// 循环次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LoopCount {
      get { return loopCount_; }
      set {
        loopCount_ = value;
      }
    }

    /// <summary>Field number for the "ResType" field.</summary>
    public const int ResTypeFieldNumber = 5;
    private global::Pbe.ResType resType_ = 0;
    /// <summary>
    /// 资源类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.ResType ResType {
      get { return resType_; }
      set {
        resType_ = value;
      }
    }

    /// <summary>Field number for the "BlindPoint" field.</summary>
    public const int BlindPointFieldNumber = 6;
    private global::Pbe.JoinId blindPoint_ = 0;
    /// <summary>
    /// 绑点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.JoinId BlindPoint {
      get { return blindPoint_; }
      set {
        blindPoint_ = value;
      }
    }

    /// <summary>Field number for the "OffsetX" field.</summary>
    public const int OffsetXFieldNumber = 7;
    private float offsetX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OffsetX {
      get { return offsetX_; }
      set {
        offsetX_ = value;
      }
    }

    /// <summary>Field number for the "OffsetY" field.</summary>
    public const int OffsetYFieldNumber = 8;
    private float offsetY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OffsetY {
      get { return offsetY_; }
      set {
        offsetY_ = value;
      }
    }

    /// <summary>Field number for the "OffsetZ" field.</summary>
    public const int OffsetZFieldNumber = 9;
    private float offsetZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OffsetZ {
      get { return offsetZ_; }
      set {
        offsetZ_ = value;
      }
    }

    /// <summary>Field number for the "DeleteWhenChangeSkill" field.</summary>
    public const int DeleteWhenChangeSkillFieldNumber = 10;
    private bool deleteWhenChangeSkill_;
    /// <summary>
    /// 切换技能时删除特效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DeleteWhenChangeSkill {
      get { return deleteWhenChangeSkill_; }
      set {
        deleteWhenChangeSkill_ = value;
      }
    }

    /// <summary>Field number for the "StopEffect" field.</summary>
    public const int StopEffectFieldNumber = 11;
    private bool stopEffect_;
    /// <summary>
    /// 特效是否跟角色速度同步
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StopEffect {
      get { return stopEffect_; }
      set {
        stopEffect_ = value;
      }
    }

    /// <summary>Field number for the "DeleteWhenChangeAction" field.</summary>
    public const int DeleteWhenChangeActionFieldNumber = 12;
    private bool deleteWhenChangeAction_;
    /// <summary>
    /// 切换动作时删除特效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DeleteWhenChangeAction {
      get { return deleteWhenChangeAction_; }
      set {
        deleteWhenChangeAction_ = value;
      }
    }

    /// <summary>Field number for the "LifeCycleStyle" field.</summary>
    public const int LifeCycleStyleFieldNumber = 13;
    private int lifeCycleStyle_;
    /// <summary>
    /// 特效生命周期类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LifeCycleStyle {
      get { return lifeCycleStyle_; }
      set {
        lifeCycleStyle_ = value;
      }
    }

    /// <summary>Field number for the "ScaleX" field.</summary>
    public const int ScaleXFieldNumber = 14;
    private float scaleX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ScaleX {
      get { return scaleX_; }
      set {
        scaleX_ = value;
      }
    }

    /// <summary>Field number for the "ScaleY" field.</summary>
    public const int ScaleYFieldNumber = 15;
    private float scaleY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ScaleY {
      get { return scaleY_; }
      set {
        scaleY_ = value;
      }
    }

    /// <summary>Field number for the "ScaleZ" field.</summary>
    public const int ScaleZFieldNumber = 16;
    private float scaleZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ScaleZ {
      get { return scaleZ_; }
      set {
        scaleZ_ = value;
      }
    }

    /// <summary>Field number for the "EulerX" field.</summary>
    public const int EulerXFieldNumber = 17;
    private float eulerX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EulerX {
      get { return eulerX_; }
      set {
        eulerX_ = value;
      }
    }

    /// <summary>Field number for the "EulerY" field.</summary>
    public const int EulerYFieldNumber = 18;
    private float eulerY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EulerY {
      get { return eulerY_; }
      set {
        eulerY_ = value;
      }
    }

    /// <summary>Field number for the "EulerZ" field.</summary>
    public const int EulerZFieldNumber = 19;
    private float eulerZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EulerZ {
      get { return eulerZ_; }
      set {
        eulerZ_ = value;
      }
    }

    /// <summary>Field number for the "Duration" field.</summary>
    public const int DurationFieldNumber = 20;
    private float duration_;
    /// <summary>
    /// 时长
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 21;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EffectInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EffectInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResName != other.ResName) return false;
      if (EffectType != other.EffectType) return false;
      if (IsLoop != other.IsLoop) return false;
      if (LoopCount != other.LoopCount) return false;
      if (ResType != other.ResType) return false;
      if (BlindPoint != other.BlindPoint) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OffsetX, other.OffsetX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OffsetY, other.OffsetY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OffsetZ, other.OffsetZ)) return false;
      if (DeleteWhenChangeSkill != other.DeleteWhenChangeSkill) return false;
      if (StopEffect != other.StopEffect) return false;
      if (DeleteWhenChangeAction != other.DeleteWhenChangeAction) return false;
      if (LifeCycleStyle != other.LifeCycleStyle) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ScaleX, other.ScaleX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ScaleY, other.ScaleY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ScaleZ, other.ScaleZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EulerX, other.EulerX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EulerY, other.EulerY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EulerZ, other.EulerZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Duration, other.Duration)) return false;
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResName.Length != 0) hash ^= ResName.GetHashCode();
      if (EffectType != 0) hash ^= EffectType.GetHashCode();
      if (IsLoop != false) hash ^= IsLoop.GetHashCode();
      if (LoopCount != 0) hash ^= LoopCount.GetHashCode();
      if (ResType != 0) hash ^= ResType.GetHashCode();
      if (BlindPoint != 0) hash ^= BlindPoint.GetHashCode();
      if (OffsetX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OffsetX);
      if (OffsetY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OffsetY);
      if (OffsetZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OffsetZ);
      if (DeleteWhenChangeSkill != false) hash ^= DeleteWhenChangeSkill.GetHashCode();
      if (StopEffect != false) hash ^= StopEffect.GetHashCode();
      if (DeleteWhenChangeAction != false) hash ^= DeleteWhenChangeAction.GetHashCode();
      if (LifeCycleStyle != 0) hash ^= LifeCycleStyle.GetHashCode();
      if (ScaleX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ScaleX);
      if (ScaleY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ScaleY);
      if (ScaleZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ScaleZ);
      if (EulerX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EulerX);
      if (EulerY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EulerY);
      if (EulerZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EulerZ);
      if (Duration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Duration);
      if (Id != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ResName);
      }
      if (EffectType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EffectType);
      }
      if (IsLoop != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsLoop);
      }
      if (LoopCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(LoopCount);
      }
      if (ResType != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) ResType);
      }
      if (BlindPoint != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) BlindPoint);
      }
      if (OffsetX != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(OffsetX);
      }
      if (OffsetY != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(OffsetY);
      }
      if (OffsetZ != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(OffsetZ);
      }
      if (DeleteWhenChangeSkill != false) {
        output.WriteRawTag(80);
        output.WriteBool(DeleteWhenChangeSkill);
      }
      if (StopEffect != false) {
        output.WriteRawTag(88);
        output.WriteBool(StopEffect);
      }
      if (DeleteWhenChangeAction != false) {
        output.WriteRawTag(96);
        output.WriteBool(DeleteWhenChangeAction);
      }
      if (LifeCycleStyle != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(LifeCycleStyle);
      }
      if (ScaleX != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(ScaleX);
      }
      if (ScaleY != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(ScaleY);
      }
      if (ScaleZ != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(ScaleZ);
      }
      if (EulerX != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(EulerX);
      }
      if (EulerY != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(EulerY);
      }
      if (EulerZ != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(EulerZ);
      }
      if (Duration != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(Duration);
      }
      if (Id != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResName);
      }
      if (EffectType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EffectType);
      }
      if (IsLoop != false) {
        size += 1 + 1;
      }
      if (LoopCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LoopCount);
      }
      if (ResType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ResType);
      }
      if (BlindPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BlindPoint);
      }
      if (OffsetX != 0F) {
        size += 1 + 4;
      }
      if (OffsetY != 0F) {
        size += 1 + 4;
      }
      if (OffsetZ != 0F) {
        size += 1 + 4;
      }
      if (DeleteWhenChangeSkill != false) {
        size += 1 + 1;
      }
      if (StopEffect != false) {
        size += 1 + 1;
      }
      if (DeleteWhenChangeAction != false) {
        size += 1 + 1;
      }
      if (LifeCycleStyle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LifeCycleStyle);
      }
      if (ScaleX != 0F) {
        size += 1 + 4;
      }
      if (ScaleY != 0F) {
        size += 1 + 4;
      }
      if (ScaleZ != 0F) {
        size += 2 + 4;
      }
      if (EulerX != 0F) {
        size += 2 + 4;
      }
      if (EulerY != 0F) {
        size += 2 + 4;
      }
      if (EulerZ != 0F) {
        size += 2 + 4;
      }
      if (Duration != 0F) {
        size += 2 + 4;
      }
      if (Id != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EffectInfo other) {
      if (other == null) {
        return;
      }
      if (other.ResName.Length != 0) {
        ResName = other.ResName;
      }
      if (other.EffectType != 0) {
        EffectType = other.EffectType;
      }
      if (other.IsLoop != false) {
        IsLoop = other.IsLoop;
      }
      if (other.LoopCount != 0) {
        LoopCount = other.LoopCount;
      }
      if (other.ResType != 0) {
        ResType = other.ResType;
      }
      if (other.BlindPoint != 0) {
        BlindPoint = other.BlindPoint;
      }
      if (other.OffsetX != 0F) {
        OffsetX = other.OffsetX;
      }
      if (other.OffsetY != 0F) {
        OffsetY = other.OffsetY;
      }
      if (other.OffsetZ != 0F) {
        OffsetZ = other.OffsetZ;
      }
      if (other.DeleteWhenChangeSkill != false) {
        DeleteWhenChangeSkill = other.DeleteWhenChangeSkill;
      }
      if (other.StopEffect != false) {
        StopEffect = other.StopEffect;
      }
      if (other.DeleteWhenChangeAction != false) {
        DeleteWhenChangeAction = other.DeleteWhenChangeAction;
      }
      if (other.LifeCycleStyle != 0) {
        LifeCycleStyle = other.LifeCycleStyle;
      }
      if (other.ScaleX != 0F) {
        ScaleX = other.ScaleX;
      }
      if (other.ScaleY != 0F) {
        ScaleY = other.ScaleY;
      }
      if (other.ScaleZ != 0F) {
        ScaleZ = other.ScaleZ;
      }
      if (other.EulerX != 0F) {
        EulerX = other.EulerX;
      }
      if (other.EulerY != 0F) {
        EulerY = other.EulerY;
      }
      if (other.EulerZ != 0F) {
        EulerZ = other.EulerZ;
      }
      if (other.Duration != 0F) {
        Duration = other.Duration;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ResName = input.ReadString();
            break;
          }
          case 16: {
            EffectType = input.ReadInt32();
            break;
          }
          case 24: {
            IsLoop = input.ReadBool();
            break;
          }
          case 32: {
            LoopCount = input.ReadInt32();
            break;
          }
          case 40: {
            resType_ = (global::Pbe.ResType) input.ReadEnum();
            break;
          }
          case 48: {
            blindPoint_ = (global::Pbe.JoinId) input.ReadEnum();
            break;
          }
          case 61: {
            OffsetX = input.ReadFloat();
            break;
          }
          case 69: {
            OffsetY = input.ReadFloat();
            break;
          }
          case 77: {
            OffsetZ = input.ReadFloat();
            break;
          }
          case 80: {
            DeleteWhenChangeSkill = input.ReadBool();
            break;
          }
          case 88: {
            StopEffect = input.ReadBool();
            break;
          }
          case 96: {
            DeleteWhenChangeAction = input.ReadBool();
            break;
          }
          case 104: {
            LifeCycleStyle = input.ReadInt32();
            break;
          }
          case 117: {
            ScaleX = input.ReadFloat();
            break;
          }
          case 125: {
            ScaleY = input.ReadFloat();
            break;
          }
          case 133: {
            ScaleZ = input.ReadFloat();
            break;
          }
          case 141: {
            EulerX = input.ReadFloat();
            break;
          }
          case 149: {
            EulerY = input.ReadFloat();
            break;
          }
          case 157: {
            EulerZ = input.ReadFloat();
            break;
          }
          case 165: {
            Duration = input.ReadFloat();
            break;
          }
          case 168: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MoveConfig : pb::IMessage<MoveConfig> {
    private static readonly pb::MessageParser<MoveConfig> _parser = new pb::MessageParser<MoveConfig>(() => new MoveConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveConfig(MoveConfig other) : this() {
      key_ = other.key_;
      speedX_ = other.speedX_;
      speedY_ = other.speedY_;
      speedZ_ = other.speedZ_;
      canTurnAround_ = other.canTurnAround_;
      isForceTurnAround_ = other.isForceTurnAround_;
      useJoystick_ = other.useJoystick_;
      forwardSpeedX_ = other.forwardSpeedX_;
      forwardSpeedY_ = other.forwardSpeedY_;
      forwardSpeedZ_ = other.forwardSpeedZ_;
      backwardSpeedX_ = other.backwardSpeedX_;
      backwardSpeedY_ = other.backwardSpeedY_;
      backwardSpeedZ_ = other.backwardSpeedZ_;
      ignoreBlock_ = other.ignoreBlock_;
      speedRelate_ = other.speedRelate_;
      speedRelateType_ = other.speedRelateType_;
      speedRelateValue_ = other.speedRelateValue_;
      flashMove_ = other.flashMove_;
      flashMoveType_ = other.flashMoveType_;
      flashMoveSpeed_ = other.flashMoveSpeed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveConfig Clone() {
      return new MoveConfig(this);
    }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 2;
    private int key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "SpeedX" field.</summary>
    public const int SpeedXFieldNumber = 3;
    private float speedX_;
    /// <summary>
    /// 帧X速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpeedX {
      get { return speedX_; }
      set {
        speedX_ = value;
      }
    }

    /// <summary>Field number for the "SpeedY" field.</summary>
    public const int SpeedYFieldNumber = 4;
    private float speedY_;
    /// <summary>
    /// 帧Y速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpeedY {
      get { return speedY_; }
      set {
        speedY_ = value;
      }
    }

    /// <summary>Field number for the "SpeedZ" field.</summary>
    public const int SpeedZFieldNumber = 5;
    private float speedZ_;
    /// <summary>
    /// 帧Z速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpeedZ {
      get { return speedZ_; }
      set {
        speedZ_ = value;
      }
    }

    /// <summary>Field number for the "CanTurnAround" field.</summary>
    public const int CanTurnAroundFieldNumber = 6;
    private bool canTurnAround_;
    /// <summary>
    /// 能否转向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanTurnAround {
      get { return canTurnAround_; }
      set {
        canTurnAround_ = value;
      }
    }

    /// <summary>Field number for the "IsForceTurnAround" field.</summary>
    public const int IsForceTurnAroundFieldNumber = 7;
    private bool isForceTurnAround_;
    /// <summary>
    /// 是否强制转向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsForceTurnAround {
      get { return isForceTurnAround_; }
      set {
        isForceTurnAround_ = value;
      }
    }

    /// <summary>Field number for the "UseJoystick" field.</summary>
    public const int UseJoystickFieldNumber = 8;
    private bool useJoystick_;
    /// <summary>
    /// 启用位移操控
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseJoystick {
      get { return useJoystick_; }
      set {
        useJoystick_ = value;
      }
    }

    /// <summary>Field number for the "ForwardSpeedX" field.</summary>
    public const int ForwardSpeedXFieldNumber = 9;
    private float forwardSpeedX_;
    /// <summary>
    /// 帧X速度（同向）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ForwardSpeedX {
      get { return forwardSpeedX_; }
      set {
        forwardSpeedX_ = value;
      }
    }

    /// <summary>Field number for the "ForwardSpeedY" field.</summary>
    public const int ForwardSpeedYFieldNumber = 10;
    private float forwardSpeedY_;
    /// <summary>
    /// 帧Y速度（同向）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ForwardSpeedY {
      get { return forwardSpeedY_; }
      set {
        forwardSpeedY_ = value;
      }
    }

    /// <summary>Field number for the "ForwardSpeedZ" field.</summary>
    public const int ForwardSpeedZFieldNumber = 11;
    private float forwardSpeedZ_;
    /// <summary>
    /// 帧Z速度（同向）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ForwardSpeedZ {
      get { return forwardSpeedZ_; }
      set {
        forwardSpeedZ_ = value;
      }
    }

    /// <summary>Field number for the "BackwardSpeedX" field.</summary>
    public const int BackwardSpeedXFieldNumber = 12;
    private float backwardSpeedX_;
    /// <summary>
    /// 帧X速度（反向）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BackwardSpeedX {
      get { return backwardSpeedX_; }
      set {
        backwardSpeedX_ = value;
      }
    }

    /// <summary>Field number for the "BackwardSpeedY" field.</summary>
    public const int BackwardSpeedYFieldNumber = 13;
    private float backwardSpeedY_;
    /// <summary>
    /// 帧Y速度（反向）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BackwardSpeedY {
      get { return backwardSpeedY_; }
      set {
        backwardSpeedY_ = value;
      }
    }

    /// <summary>Field number for the "BackwardSpeedZ" field.</summary>
    public const int BackwardSpeedZFieldNumber = 14;
    private float backwardSpeedZ_;
    /// <summary>
    /// 帧Z速度（反向）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BackwardSpeedZ {
      get { return backwardSpeedZ_; }
      set {
        backwardSpeedZ_ = value;
      }
    }

    /// <summary>Field number for the "IgnoreBlock" field.</summary>
    public const int IgnoreBlockFieldNumber = 15;
    private bool ignoreBlock_;
    /// <summary>
    /// 无视阻挡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IgnoreBlock {
      get { return ignoreBlock_; }
      set {
        ignoreBlock_ = value;
      }
    }

    /// <summary>Field number for the "SpeedRelate" field.</summary>
    public const int SpeedRelateFieldNumber = 16;
    private bool speedRelate_;
    /// <summary>
    /// 受速度影响
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SpeedRelate {
      get { return speedRelate_; }
      set {
        speedRelate_ = value;
      }
    }

    /// <summary>Field number for the "SpeedRelateType" field.</summary>
    public const int SpeedRelateTypeFieldNumber = 17;
    private global::Pbe.EnumSpeedRelateType speedRelateType_ = 0;
    /// <summary>
    /// 速度影响类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.EnumSpeedRelateType SpeedRelateType {
      get { return speedRelateType_; }
      set {
        speedRelateType_ = value;
      }
    }

    /// <summary>Field number for the "SpeedRelateValue" field.</summary>
    public const int SpeedRelateValueFieldNumber = 18;
    private float speedRelateValue_;
    /// <summary>
    /// 影响系数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpeedRelateValue {
      get { return speedRelateValue_; }
      set {
        speedRelateValue_ = value;
      }
    }

    /// <summary>Field number for the "FlashMove" field.</summary>
    public const int FlashMoveFieldNumber = 19;
    private bool flashMove_;
    /// <summary>
    /// 瞬移（开启后位移参数不生效）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FlashMove {
      get { return flashMove_; }
      set {
        flashMove_ = value;
      }
    }

    /// <summary>Field number for the "FlashMoveType" field.</summary>
    public const int FlashMoveTypeFieldNumber = 20;
    private global::Pbe.EnumFlashMoveType flashMoveType_ = 0;
    /// <summary>
    /// 瞬移方向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.EnumFlashMoveType FlashMoveType {
      get { return flashMoveType_; }
      set {
        flashMoveType_ = value;
      }
    }

    /// <summary>Field number for the "FlashMoveSpeed" field.</summary>
    public const int FlashMoveSpeedFieldNumber = 21;
    private float flashMoveSpeed_;
    /// <summary>
    /// 瞬移速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FlashMoveSpeed {
      get { return flashMoveSpeed_; }
      set {
        flashMoveSpeed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpeedX, other.SpeedX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpeedY, other.SpeedY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpeedZ, other.SpeedZ)) return false;
      if (CanTurnAround != other.CanTurnAround) return false;
      if (IsForceTurnAround != other.IsForceTurnAround) return false;
      if (UseJoystick != other.UseJoystick) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ForwardSpeedX, other.ForwardSpeedX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ForwardSpeedY, other.ForwardSpeedY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ForwardSpeedZ, other.ForwardSpeedZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BackwardSpeedX, other.BackwardSpeedX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BackwardSpeedY, other.BackwardSpeedY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BackwardSpeedZ, other.BackwardSpeedZ)) return false;
      if (IgnoreBlock != other.IgnoreBlock) return false;
      if (SpeedRelate != other.SpeedRelate) return false;
      if (SpeedRelateType != other.SpeedRelateType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpeedRelateValue, other.SpeedRelateValue)) return false;
      if (FlashMove != other.FlashMove) return false;
      if (FlashMoveType != other.FlashMoveType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FlashMoveSpeed, other.FlashMoveSpeed)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key != 0) hash ^= Key.GetHashCode();
      if (SpeedX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpeedX);
      if (SpeedY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpeedY);
      if (SpeedZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpeedZ);
      if (CanTurnAround != false) hash ^= CanTurnAround.GetHashCode();
      if (IsForceTurnAround != false) hash ^= IsForceTurnAround.GetHashCode();
      if (UseJoystick != false) hash ^= UseJoystick.GetHashCode();
      if (ForwardSpeedX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ForwardSpeedX);
      if (ForwardSpeedY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ForwardSpeedY);
      if (ForwardSpeedZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ForwardSpeedZ);
      if (BackwardSpeedX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BackwardSpeedX);
      if (BackwardSpeedY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BackwardSpeedY);
      if (BackwardSpeedZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BackwardSpeedZ);
      if (IgnoreBlock != false) hash ^= IgnoreBlock.GetHashCode();
      if (SpeedRelate != false) hash ^= SpeedRelate.GetHashCode();
      if (SpeedRelateType != 0) hash ^= SpeedRelateType.GetHashCode();
      if (SpeedRelateValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpeedRelateValue);
      if (FlashMove != false) hash ^= FlashMove.GetHashCode();
      if (FlashMoveType != 0) hash ^= FlashMoveType.GetHashCode();
      if (FlashMoveSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FlashMoveSpeed);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Key);
      }
      if (SpeedX != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(SpeedX);
      }
      if (SpeedY != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(SpeedY);
      }
      if (SpeedZ != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(SpeedZ);
      }
      if (CanTurnAround != false) {
        output.WriteRawTag(48);
        output.WriteBool(CanTurnAround);
      }
      if (IsForceTurnAround != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsForceTurnAround);
      }
      if (UseJoystick != false) {
        output.WriteRawTag(64);
        output.WriteBool(UseJoystick);
      }
      if (ForwardSpeedX != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(ForwardSpeedX);
      }
      if (ForwardSpeedY != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(ForwardSpeedY);
      }
      if (ForwardSpeedZ != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(ForwardSpeedZ);
      }
      if (BackwardSpeedX != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(BackwardSpeedX);
      }
      if (BackwardSpeedY != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(BackwardSpeedY);
      }
      if (BackwardSpeedZ != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(BackwardSpeedZ);
      }
      if (IgnoreBlock != false) {
        output.WriteRawTag(120);
        output.WriteBool(IgnoreBlock);
      }
      if (SpeedRelate != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(SpeedRelate);
      }
      if (SpeedRelateType != 0) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) SpeedRelateType);
      }
      if (SpeedRelateValue != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(SpeedRelateValue);
      }
      if (FlashMove != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(FlashMove);
      }
      if (FlashMoveType != 0) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) FlashMoveType);
      }
      if (FlashMoveSpeed != 0F) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(FlashMoveSpeed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key);
      }
      if (SpeedX != 0F) {
        size += 1 + 4;
      }
      if (SpeedY != 0F) {
        size += 1 + 4;
      }
      if (SpeedZ != 0F) {
        size += 1 + 4;
      }
      if (CanTurnAround != false) {
        size += 1 + 1;
      }
      if (IsForceTurnAround != false) {
        size += 1 + 1;
      }
      if (UseJoystick != false) {
        size += 1 + 1;
      }
      if (ForwardSpeedX != 0F) {
        size += 1 + 4;
      }
      if (ForwardSpeedY != 0F) {
        size += 1 + 4;
      }
      if (ForwardSpeedZ != 0F) {
        size += 1 + 4;
      }
      if (BackwardSpeedX != 0F) {
        size += 1 + 4;
      }
      if (BackwardSpeedY != 0F) {
        size += 1 + 4;
      }
      if (BackwardSpeedZ != 0F) {
        size += 1 + 4;
      }
      if (IgnoreBlock != false) {
        size += 1 + 1;
      }
      if (SpeedRelate != false) {
        size += 2 + 1;
      }
      if (SpeedRelateType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpeedRelateType);
      }
      if (SpeedRelateValue != 0F) {
        size += 2 + 4;
      }
      if (FlashMove != false) {
        size += 2 + 1;
      }
      if (FlashMoveType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) FlashMoveType);
      }
      if (FlashMoveSpeed != 0F) {
        size += 2 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveConfig other) {
      if (other == null) {
        return;
      }
      if (other.Key != 0) {
        Key = other.Key;
      }
      if (other.SpeedX != 0F) {
        SpeedX = other.SpeedX;
      }
      if (other.SpeedY != 0F) {
        SpeedY = other.SpeedY;
      }
      if (other.SpeedZ != 0F) {
        SpeedZ = other.SpeedZ;
      }
      if (other.CanTurnAround != false) {
        CanTurnAround = other.CanTurnAround;
      }
      if (other.IsForceTurnAround != false) {
        IsForceTurnAround = other.IsForceTurnAround;
      }
      if (other.UseJoystick != false) {
        UseJoystick = other.UseJoystick;
      }
      if (other.ForwardSpeedX != 0F) {
        ForwardSpeedX = other.ForwardSpeedX;
      }
      if (other.ForwardSpeedY != 0F) {
        ForwardSpeedY = other.ForwardSpeedY;
      }
      if (other.ForwardSpeedZ != 0F) {
        ForwardSpeedZ = other.ForwardSpeedZ;
      }
      if (other.BackwardSpeedX != 0F) {
        BackwardSpeedX = other.BackwardSpeedX;
      }
      if (other.BackwardSpeedY != 0F) {
        BackwardSpeedY = other.BackwardSpeedY;
      }
      if (other.BackwardSpeedZ != 0F) {
        BackwardSpeedZ = other.BackwardSpeedZ;
      }
      if (other.IgnoreBlock != false) {
        IgnoreBlock = other.IgnoreBlock;
      }
      if (other.SpeedRelate != false) {
        SpeedRelate = other.SpeedRelate;
      }
      if (other.SpeedRelateType != 0) {
        SpeedRelateType = other.SpeedRelateType;
      }
      if (other.SpeedRelateValue != 0F) {
        SpeedRelateValue = other.SpeedRelateValue;
      }
      if (other.FlashMove != false) {
        FlashMove = other.FlashMove;
      }
      if (other.FlashMoveType != 0) {
        FlashMoveType = other.FlashMoveType;
      }
      if (other.FlashMoveSpeed != 0F) {
        FlashMoveSpeed = other.FlashMoveSpeed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            Key = input.ReadInt32();
            break;
          }
          case 29: {
            SpeedX = input.ReadFloat();
            break;
          }
          case 37: {
            SpeedY = input.ReadFloat();
            break;
          }
          case 45: {
            SpeedZ = input.ReadFloat();
            break;
          }
          case 48: {
            CanTurnAround = input.ReadBool();
            break;
          }
          case 56: {
            IsForceTurnAround = input.ReadBool();
            break;
          }
          case 64: {
            UseJoystick = input.ReadBool();
            break;
          }
          case 77: {
            ForwardSpeedX = input.ReadFloat();
            break;
          }
          case 85: {
            ForwardSpeedY = input.ReadFloat();
            break;
          }
          case 93: {
            ForwardSpeedZ = input.ReadFloat();
            break;
          }
          case 101: {
            BackwardSpeedX = input.ReadFloat();
            break;
          }
          case 109: {
            BackwardSpeedY = input.ReadFloat();
            break;
          }
          case 117: {
            BackwardSpeedZ = input.ReadFloat();
            break;
          }
          case 120: {
            IgnoreBlock = input.ReadBool();
            break;
          }
          case 128: {
            SpeedRelate = input.ReadBool();
            break;
          }
          case 136: {
            speedRelateType_ = (global::Pbe.EnumSpeedRelateType) input.ReadEnum();
            break;
          }
          case 149: {
            SpeedRelateValue = input.ReadFloat();
            break;
          }
          case 152: {
            FlashMove = input.ReadBool();
            break;
          }
          case 160: {
            flashMoveType_ = (global::Pbe.EnumFlashMoveType) input.ReadEnum();
            break;
          }
          case 173: {
            FlashMoveSpeed = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MoveInfoConfig : pb::IMessage<MoveInfoConfig> {
    private static readonly pb::MessageParser<MoveInfoConfig> _parser = new pb::MessageParser<MoveInfoConfig>(() => new MoveInfoConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveInfoConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveInfoConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveInfoConfig(MoveInfoConfig other) : this() {
      backInputNoSpeed_ = other.backInputNoSpeed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveInfoConfig Clone() {
      return new MoveInfoConfig(this);
    }

    /// <summary>Field number for the "BackInputNoSpeed" field.</summary>
    public const int BackInputNoSpeedFieldNumber = 1;
    private bool backInputNoSpeed_;
    /// <summary>
    /// 反向输入取消技能移动速度(已弃用)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BackInputNoSpeed {
      get { return backInputNoSpeed_; }
      set {
        backInputNoSpeed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveInfoConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveInfoConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BackInputNoSpeed != other.BackInputNoSpeed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BackInputNoSpeed != false) hash ^= BackInputNoSpeed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BackInputNoSpeed != false) {
        output.WriteRawTag(8);
        output.WriteBool(BackInputNoSpeed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BackInputNoSpeed != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveInfoConfig other) {
      if (other == null) {
        return;
      }
      if (other.BackInputNoSpeed != false) {
        BackInputNoSpeed = other.BackInputNoSpeed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BackInputNoSpeed = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScreenEffect : pb::IMessage<ScreenEffect> {
    private static readonly pb::MessageParser<ScreenEffect> _parser = new pb::MessageParser<ScreenEffect>(() => new ScreenEffect());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScreenEffect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScreenEffect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScreenEffect(ScreenEffect other) : this() {
      shakeScreen_ = other.shakeScreen_ != null ? other.shakeScreen_.Clone() : null;
      screenScale_ = other.screenScale_ != null ? other.screenScale_.Clone() : null;
      key_ = other.key_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScreenEffect Clone() {
      return new ScreenEffect(this);
    }

    /// <summary>Field number for the "ShakeScreen" field.</summary>
    public const int ShakeScreenFieldNumber = 2;
    private global::Pbe.ShakeScreen shakeScreen_;
    /// <summary>
    /// 震屏参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.ShakeScreen ShakeScreen {
      get { return shakeScreen_; }
      set {
        shakeScreen_ = value;
      }
    }

    /// <summary>Field number for the "ScreenScale" field.</summary>
    public const int ScreenScaleFieldNumber = 3;
    private global::Pbe.ScreenScale screenScale_;
    /// <summary>
    /// 镜头缩放
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.ScreenScale ScreenScale {
      get { return screenScale_; }
      set {
        screenScale_ = value;
      }
    }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 4;
    private int key_;
    /// <summary>
    /// 转换map的key，帧号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScreenEffect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScreenEffect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ShakeScreen, other.ShakeScreen)) return false;
      if (!object.Equals(ScreenScale, other.ScreenScale)) return false;
      if (Key != other.Key) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (shakeScreen_ != null) hash ^= ShakeScreen.GetHashCode();
      if (screenScale_ != null) hash ^= ScreenScale.GetHashCode();
      if (Key != 0) hash ^= Key.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (shakeScreen_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ShakeScreen);
      }
      if (screenScale_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ScreenScale);
      }
      if (Key != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Key);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (shakeScreen_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ShakeScreen);
      }
      if (screenScale_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScreenScale);
      }
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScreenEffect other) {
      if (other == null) {
        return;
      }
      if (other.shakeScreen_ != null) {
        if (shakeScreen_ == null) {
          shakeScreen_ = new global::Pbe.ShakeScreen();
        }
        ShakeScreen.MergeFrom(other.ShakeScreen);
      }
      if (other.screenScale_ != null) {
        if (screenScale_ == null) {
          screenScale_ = new global::Pbe.ScreenScale();
        }
        ScreenScale.MergeFrom(other.ScreenScale);
      }
      if (other.Key != 0) {
        Key = other.Key;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            if (shakeScreen_ == null) {
              shakeScreen_ = new global::Pbe.ShakeScreen();
            }
            input.ReadMessage(shakeScreen_);
            break;
          }
          case 26: {
            if (screenScale_ == null) {
              screenScale_ = new global::Pbe.ScreenScale();
            }
            input.ReadMessage(screenScale_);
            break;
          }
          case 32: {
            Key = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ShakeScreen : pb::IMessage<ShakeScreen> {
    private static readonly pb::MessageParser<ShakeScreen> _parser = new pb::MessageParser<ShakeScreen>(() => new ShakeScreen());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShakeScreen> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShakeScreen() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShakeScreen(ShakeScreen other) : this() {
      canShakeScreen_ = other.canShakeScreen_;
      shakeScreenX_ = other.shakeScreenX_;
      shakeScreenY_ = other.shakeScreenY_;
      shakeScreenTime_ = other.shakeScreenTime_;
      shakeScreenOnce_ = other.shakeScreenOnce_;
      shakeScreenParam_ = other.shakeScreenParam_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShakeScreen Clone() {
      return new ShakeScreen(this);
    }

    /// <summary>Field number for the "CanShakeScreen" field.</summary>
    public const int CanShakeScreenFieldNumber = 1;
    private bool canShakeScreen_;
    /// <summary>
    /// 震屏生效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanShakeScreen {
      get { return canShakeScreen_; }
      set {
        canShakeScreen_ = value;
      }
    }

    /// <summary>Field number for the "ShakeScreenX" field.</summary>
    public const int ShakeScreenXFieldNumber = 2;
    private float shakeScreenX_;
    /// <summary>
    /// 震屏X幅度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ShakeScreenX {
      get { return shakeScreenX_; }
      set {
        shakeScreenX_ = value;
      }
    }

    /// <summary>Field number for the "ShakeScreenY" field.</summary>
    public const int ShakeScreenYFieldNumber = 3;
    private float shakeScreenY_;
    /// <summary>
    /// 震屏Y幅度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ShakeScreenY {
      get { return shakeScreenY_; }
      set {
        shakeScreenY_ = value;
      }
    }

    /// <summary>Field number for the "ShakeScreenTime" field.</summary>
    public const int ShakeScreenTimeFieldNumber = 4;
    private int shakeScreenTime_;
    /// <summary>
    /// 震屏总时长
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShakeScreenTime {
      get { return shakeScreenTime_; }
      set {
        shakeScreenTime_ = value;
      }
    }

    /// <summary>Field number for the "ShakeScreenOnce" field.</summary>
    public const int ShakeScreenOnceFieldNumber = 5;
    private int shakeScreenOnce_;
    /// <summary>
    /// 单次震屏时长
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShakeScreenOnce {
      get { return shakeScreenOnce_; }
      set {
        shakeScreenOnce_ = value;
      }
    }

    /// <summary>Field number for the "ShakeScreenParam" field.</summary>
    public const int ShakeScreenParamFieldNumber = 6;
    private float shakeScreenParam_;
    /// <summary>
    /// 震屏衰减系数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ShakeScreenParam {
      get { return shakeScreenParam_; }
      set {
        shakeScreenParam_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShakeScreen);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShakeScreen other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CanShakeScreen != other.CanShakeScreen) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ShakeScreenX, other.ShakeScreenX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ShakeScreenY, other.ShakeScreenY)) return false;
      if (ShakeScreenTime != other.ShakeScreenTime) return false;
      if (ShakeScreenOnce != other.ShakeScreenOnce) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ShakeScreenParam, other.ShakeScreenParam)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CanShakeScreen != false) hash ^= CanShakeScreen.GetHashCode();
      if (ShakeScreenX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ShakeScreenX);
      if (ShakeScreenY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ShakeScreenY);
      if (ShakeScreenTime != 0) hash ^= ShakeScreenTime.GetHashCode();
      if (ShakeScreenOnce != 0) hash ^= ShakeScreenOnce.GetHashCode();
      if (ShakeScreenParam != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ShakeScreenParam);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CanShakeScreen != false) {
        output.WriteRawTag(8);
        output.WriteBool(CanShakeScreen);
      }
      if (ShakeScreenX != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(ShakeScreenX);
      }
      if (ShakeScreenY != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(ShakeScreenY);
      }
      if (ShakeScreenTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ShakeScreenTime);
      }
      if (ShakeScreenOnce != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ShakeScreenOnce);
      }
      if (ShakeScreenParam != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(ShakeScreenParam);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CanShakeScreen != false) {
        size += 1 + 1;
      }
      if (ShakeScreenX != 0F) {
        size += 1 + 4;
      }
      if (ShakeScreenY != 0F) {
        size += 1 + 4;
      }
      if (ShakeScreenTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShakeScreenTime);
      }
      if (ShakeScreenOnce != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShakeScreenOnce);
      }
      if (ShakeScreenParam != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShakeScreen other) {
      if (other == null) {
        return;
      }
      if (other.CanShakeScreen != false) {
        CanShakeScreen = other.CanShakeScreen;
      }
      if (other.ShakeScreenX != 0F) {
        ShakeScreenX = other.ShakeScreenX;
      }
      if (other.ShakeScreenY != 0F) {
        ShakeScreenY = other.ShakeScreenY;
      }
      if (other.ShakeScreenTime != 0) {
        ShakeScreenTime = other.ShakeScreenTime;
      }
      if (other.ShakeScreenOnce != 0) {
        ShakeScreenOnce = other.ShakeScreenOnce;
      }
      if (other.ShakeScreenParam != 0F) {
        ShakeScreenParam = other.ShakeScreenParam;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CanShakeScreen = input.ReadBool();
            break;
          }
          case 21: {
            ShakeScreenX = input.ReadFloat();
            break;
          }
          case 29: {
            ShakeScreenY = input.ReadFloat();
            break;
          }
          case 32: {
            ShakeScreenTime = input.ReadInt32();
            break;
          }
          case 40: {
            ShakeScreenOnce = input.ReadInt32();
            break;
          }
          case 53: {
            ShakeScreenParam = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScreenScale : pb::IMessage<ScreenScale> {
    private static readonly pb::MessageParser<ScreenScale> _parser = new pb::MessageParser<ScreenScale>(() => new ScreenScale());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScreenScale> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScreenScale() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScreenScale(ScreenScale other) : this() {
      canChangeScale_ = other.canChangeScale_;
      scale_ = other.scale_;
      needFrame_ = other.needFrame_;
      lastTime_ = other.lastTime_;
      resumeTime_ = other.resumeTime_;
      scaleTimes_ = other.scaleTimes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScreenScale Clone() {
      return new ScreenScale(this);
    }

    /// <summary>Field number for the "CanChangeScale" field.</summary>
    public const int CanChangeScaleFieldNumber = 1;
    private bool canChangeScale_;
    /// <summary>
    /// 缩放生效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanChangeScale {
      get { return canChangeScale_; }
      set {
        canChangeScale_ = value;
      }
    }

    /// <summary>Field number for the "Scale" field.</summary>
    public const int ScaleFieldNumber = 2;
    private float scale_;
    /// <summary>
    /// 缩放系数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "NeedFrame" field.</summary>
    public const int NeedFrameFieldNumber = 3;
    private int needFrame_;
    /// <summary>
    /// 镜头缩放至设定值所需的时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NeedFrame {
      get { return needFrame_; }
      set {
        needFrame_ = value;
      }
    }

    /// <summary>Field number for the "LastTime" field.</summary>
    public const int LastTimeFieldNumber = 4;
    private int lastTime_;
    /// <summary>
    /// 缩放完成后持续时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastTime {
      get { return lastTime_; }
      set {
        lastTime_ = value;
      }
    }

    /// <summary>Field number for the "ResumeTime" field.</summary>
    public const int ResumeTimeFieldNumber = 5;
    private int resumeTime_;
    /// <summary>
    /// 镜头恢复原状所需的时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResumeTime {
      get { return resumeTime_; }
      set {
        resumeTime_ = value;
      }
    }

    /// <summary>Field number for the "ScaleTimes" field.</summary>
    public const int ScaleTimesFieldNumber = 6;
    private int scaleTimes_;
    /// <summary>
    /// 缩放次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScaleTimes {
      get { return scaleTimes_; }
      set {
        scaleTimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScreenScale);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScreenScale other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CanChangeScale != other.CanChangeScale) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Scale, other.Scale)) return false;
      if (NeedFrame != other.NeedFrame) return false;
      if (LastTime != other.LastTime) return false;
      if (ResumeTime != other.ResumeTime) return false;
      if (ScaleTimes != other.ScaleTimes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CanChangeScale != false) hash ^= CanChangeScale.GetHashCode();
      if (Scale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Scale);
      if (NeedFrame != 0) hash ^= NeedFrame.GetHashCode();
      if (LastTime != 0) hash ^= LastTime.GetHashCode();
      if (ResumeTime != 0) hash ^= ResumeTime.GetHashCode();
      if (ScaleTimes != 0) hash ^= ScaleTimes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CanChangeScale != false) {
        output.WriteRawTag(8);
        output.WriteBool(CanChangeScale);
      }
      if (Scale != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Scale);
      }
      if (NeedFrame != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NeedFrame);
      }
      if (LastTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(LastTime);
      }
      if (ResumeTime != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ResumeTime);
      }
      if (ScaleTimes != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ScaleTimes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CanChangeScale != false) {
        size += 1 + 1;
      }
      if (Scale != 0F) {
        size += 1 + 4;
      }
      if (NeedFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NeedFrame);
      }
      if (LastTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastTime);
      }
      if (ResumeTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResumeTime);
      }
      if (ScaleTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScaleTimes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScreenScale other) {
      if (other == null) {
        return;
      }
      if (other.CanChangeScale != false) {
        CanChangeScale = other.CanChangeScale;
      }
      if (other.Scale != 0F) {
        Scale = other.Scale;
      }
      if (other.NeedFrame != 0) {
        NeedFrame = other.NeedFrame;
      }
      if (other.LastTime != 0) {
        LastTime = other.LastTime;
      }
      if (other.ResumeTime != 0) {
        ResumeTime = other.ResumeTime;
      }
      if (other.ScaleTimes != 0) {
        ScaleTimes = other.ScaleTimes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CanChangeScale = input.ReadBool();
            break;
          }
          case 21: {
            Scale = input.ReadFloat();
            break;
          }
          case 24: {
            NeedFrame = input.ReadInt32();
            break;
          }
          case 32: {
            LastTime = input.ReadInt32();
            break;
          }
          case 40: {
            ResumeTime = input.ReadInt32();
            break;
          }
          case 48: {
            ScaleTimes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SoundConfig : pb::IMessage<SoundConfig> {
    private static readonly pb::MessageParser<SoundConfig> _parser = new pb::MessageParser<SoundConfig>(() => new SoundConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SoundConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SoundConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SoundConfig(SoundConfig other) : this() {
      soundClips_ = other.soundClips_.Clone();
      key_ = other.key_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SoundConfig Clone() {
      return new SoundConfig(this);
    }

    /// <summary>Field number for the "SoundClips" field.</summary>
    public const int SoundClipsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Pbe.SoundClipConfig> _repeated_soundClips_codec
        = pb::FieldCodec.ForMessage(18, global::Pbe.SoundClipConfig.Parser);
    private readonly pbc::RepeatedField<global::Pbe.SoundClipConfig> soundClips_ = new pbc::RepeatedField<global::Pbe.SoundClipConfig>();
    /// <summary>
    ///int32  FrameNum                                   = 1; // 声音在第几帧播放
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.SoundClipConfig> SoundClips {
      get { return soundClips_; }
    }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 3;
    private int key_;
    /// <summary>
    /// 转换map的key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SoundConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SoundConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!soundClips_.Equals(other.soundClips_)) return false;
      if (Key != other.Key) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= soundClips_.GetHashCode();
      if (Key != 0) hash ^= Key.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      soundClips_.WriteTo(output, _repeated_soundClips_codec);
      if (Key != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Key);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += soundClips_.CalculateSize(_repeated_soundClips_codec);
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SoundConfig other) {
      if (other == null) {
        return;
      }
      soundClips_.Add(other.soundClips_);
      if (other.Key != 0) {
        Key = other.Key;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            soundClips_.AddEntriesFrom(input, _repeated_soundClips_codec);
            break;
          }
          case 24: {
            Key = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SoundClipConfig : pb::IMessage<SoundClipConfig> {
    private static readonly pb::MessageParser<SoundClipConfig> _parser = new pb::MessageParser<SoundClipConfig>(() => new SoundClipConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SoundClipConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SoundClipConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SoundClipConfig(SoundClipConfig other) : this() {
      isGroup_ = other.isGroup_;
      id_ = other.id_;
      isWeaponMusci_ = other.isWeaponMusci_;
      isRemoveOnChangeSkill_ = other.isRemoveOnChangeSkill_;
      isRemoveOnChangeAction_ = other.isRemoveOnChangeAction_;
      audioVolume_ = other.audioVolume_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SoundClipConfig Clone() {
      return new SoundClipConfig(this);
    }

    /// <summary>Field number for the "IsGroup" field.</summary>
    public const int IsGroupFieldNumber = 1;
    private bool isGroup_;
    /// <summary>
    /// 是音效组
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGroup {
      get { return isGroup_; }
      set {
        isGroup_ = value;
      }
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 2;
    private int id_;
    /// <summary>
    /// 音效id或组id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "IsWeaponMusci" field.</summary>
    public const int IsWeaponMusciFieldNumber = 3;
    private bool isWeaponMusci_;
    /// <summary>
    /// 是否为武器播放音效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWeaponMusci {
      get { return isWeaponMusci_; }
      set {
        isWeaponMusci_ = value;
      }
    }

    /// <summary>Field number for the "IsRemoveOnChangeSkill" field.</summary>
    public const int IsRemoveOnChangeSkillFieldNumber = 4;
    private bool isRemoveOnChangeSkill_;
    /// <summary>
    /// 切换技能时删除音效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRemoveOnChangeSkill {
      get { return isRemoveOnChangeSkill_; }
      set {
        isRemoveOnChangeSkill_ = value;
      }
    }

    /// <summary>Field number for the "IsRemoveOnChangeAction" field.</summary>
    public const int IsRemoveOnChangeActionFieldNumber = 5;
    private bool isRemoveOnChangeAction_;
    /// <summary>
    /// 切换动作时删除音效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRemoveOnChangeAction {
      get { return isRemoveOnChangeAction_; }
      set {
        isRemoveOnChangeAction_ = value;
      }
    }

    /// <summary>Field number for the "AudioVolume" field.</summary>
    public const int AudioVolumeFieldNumber = 6;
    private float audioVolume_;
    /// <summary>
    /// 音效音量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AudioVolume {
      get { return audioVolume_; }
      set {
        audioVolume_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SoundClipConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SoundClipConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsGroup != other.IsGroup) return false;
      if (Id != other.Id) return false;
      if (IsWeaponMusci != other.IsWeaponMusci) return false;
      if (IsRemoveOnChangeSkill != other.IsRemoveOnChangeSkill) return false;
      if (IsRemoveOnChangeAction != other.IsRemoveOnChangeAction) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AudioVolume, other.AudioVolume)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsGroup != false) hash ^= IsGroup.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (IsWeaponMusci != false) hash ^= IsWeaponMusci.GetHashCode();
      if (IsRemoveOnChangeSkill != false) hash ^= IsRemoveOnChangeSkill.GetHashCode();
      if (IsRemoveOnChangeAction != false) hash ^= IsRemoveOnChangeAction.GetHashCode();
      if (AudioVolume != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AudioVolume);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsGroup != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsGroup);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      if (IsWeaponMusci != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsWeaponMusci);
      }
      if (IsRemoveOnChangeSkill != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsRemoveOnChangeSkill);
      }
      if (IsRemoveOnChangeAction != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsRemoveOnChangeAction);
      }
      if (AudioVolume != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(AudioVolume);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsGroup != false) {
        size += 1 + 1;
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (IsWeaponMusci != false) {
        size += 1 + 1;
      }
      if (IsRemoveOnChangeSkill != false) {
        size += 1 + 1;
      }
      if (IsRemoveOnChangeAction != false) {
        size += 1 + 1;
      }
      if (AudioVolume != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SoundClipConfig other) {
      if (other == null) {
        return;
      }
      if (other.IsGroup != false) {
        IsGroup = other.IsGroup;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.IsWeaponMusci != false) {
        IsWeaponMusci = other.IsWeaponMusci;
      }
      if (other.IsRemoveOnChangeSkill != false) {
        IsRemoveOnChangeSkill = other.IsRemoveOnChangeSkill;
      }
      if (other.IsRemoveOnChangeAction != false) {
        IsRemoveOnChangeAction = other.IsRemoveOnChangeAction;
      }
      if (other.AudioVolume != 0F) {
        AudioVolume = other.AudioVolume;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsGroup = input.ReadBool();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
          case 24: {
            IsWeaponMusci = input.ReadBool();
            break;
          }
          case 32: {
            IsRemoveOnChangeSkill = input.ReadBool();
            break;
          }
          case 40: {
            IsRemoveOnChangeAction = input.ReadBool();
            break;
          }
          case 53: {
            AudioVolume = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AttackConfig : pb::IMessage<AttackConfig> {
    private static readonly pb::MessageParser<AttackConfig> _parser = new pb::MessageParser<AttackConfig>(() => new AttackConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttackConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackConfig(AttackConfig other) : this() {
      key_ = other.key_;
      hurtId_ = other.hurtId_;
      hitInfo_ = other.hitInfo_ != null ? other.hitInfo_.Clone() : null;
      attackBoxGroupList_ = other.attackBoxGroupList_.Clone();
      useSameSkillInfo_ = other.useSameSkillInfo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackConfig Clone() {
      return new AttackConfig(this);
    }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 2;
    private int key_;
    /// <summary>
    /// 转换map的key，帧号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "HurtId" field.</summary>
    public const int HurtIdFieldNumber = 3;
    private int hurtId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HurtId {
      get { return hurtId_; }
      set {
        hurtId_ = value;
      }
    }

    /// <summary>Field number for the "HitInfo" field.</summary>
    public const int HitInfoFieldNumber = 4;
    private global::Pbe.HitEffect hitInfo_;
    /// <summary>
    /// 打击表现
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.HitEffect HitInfo {
      get { return hitInfo_; }
      set {
        hitInfo_ = value;
      }
    }

    /// <summary>Field number for the "AttackBoxGroupList" field.</summary>
    public const int AttackBoxGroupListFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Pbe.AttackBoxList> _repeated_attackBoxGroupList_codec
        = pb::FieldCodec.ForMessage(42, global::Pbe.AttackBoxList.Parser);
    private readonly pbc::RepeatedField<global::Pbe.AttackBoxList> attackBoxGroupList_ = new pbc::RepeatedField<global::Pbe.AttackBoxList>();
    /// <summary>
    /// 攻击盒列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.AttackBoxList> AttackBoxGroupList {
      get { return attackBoxGroupList_; }
    }

    /// <summary>Field number for the "UseSameSkillInfo" field.</summary>
    public const int UseSameSkillInfoFieldNumber = 6;
    private bool useSameSkillInfo_;
    /// <summary>
    /// 攻击盒使用统一的技能效果,仅为true时攻击间隔重置生效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseSameSkillInfo {
      get { return useSameSkillInfo_; }
      set {
        useSameSkillInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttackConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttackConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (HurtId != other.HurtId) return false;
      if (!object.Equals(HitInfo, other.HitInfo)) return false;
      if(!attackBoxGroupList_.Equals(other.attackBoxGroupList_)) return false;
      if (UseSameSkillInfo != other.UseSameSkillInfo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key != 0) hash ^= Key.GetHashCode();
      if (HurtId != 0) hash ^= HurtId.GetHashCode();
      if (hitInfo_ != null) hash ^= HitInfo.GetHashCode();
      hash ^= attackBoxGroupList_.GetHashCode();
      if (UseSameSkillInfo != false) hash ^= UseSameSkillInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Key);
      }
      if (HurtId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HurtId);
      }
      if (hitInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(HitInfo);
      }
      attackBoxGroupList_.WriteTo(output, _repeated_attackBoxGroupList_codec);
      if (UseSameSkillInfo != false) {
        output.WriteRawTag(48);
        output.WriteBool(UseSameSkillInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key);
      }
      if (HurtId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HurtId);
      }
      if (hitInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HitInfo);
      }
      size += attackBoxGroupList_.CalculateSize(_repeated_attackBoxGroupList_codec);
      if (UseSameSkillInfo != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttackConfig other) {
      if (other == null) {
        return;
      }
      if (other.Key != 0) {
        Key = other.Key;
      }
      if (other.HurtId != 0) {
        HurtId = other.HurtId;
      }
      if (other.hitInfo_ != null) {
        if (hitInfo_ == null) {
          hitInfo_ = new global::Pbe.HitEffect();
        }
        HitInfo.MergeFrom(other.HitInfo);
      }
      attackBoxGroupList_.Add(other.attackBoxGroupList_);
      if (other.UseSameSkillInfo != false) {
        UseSameSkillInfo = other.UseSameSkillInfo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            Key = input.ReadInt32();
            break;
          }
          case 24: {
            HurtId = input.ReadInt32();
            break;
          }
          case 34: {
            if (hitInfo_ == null) {
              hitInfo_ = new global::Pbe.HitEffect();
            }
            input.ReadMessage(hitInfo_);
            break;
          }
          case 42: {
            attackBoxGroupList_.AddEntriesFrom(input, _repeated_attackBoxGroupList_codec);
            break;
          }
          case 48: {
            UseSameSkillInfo = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///吸附抓取
  /// </summary>
  public sealed partial class AttractConfig : pb::IMessage<AttractConfig> {
    private static readonly pb::MessageParser<AttractConfig> _parser = new pb::MessageParser<AttractConfig>(() => new AttractConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttractConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttractConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttractConfig(AttractConfig other) : this() {
      key_ = other.key_;
      attractDuration_ = other.attractDuration_;
      speed_ = other.speed_;
      isHitForce_ = other.isHitForce_;
      hitForceX_ = other.hitForceX_;
      hitForceY_ = other.hitForceY_;
      attractPosGroup_ = other.attractPosGroup_.Clone();
      moveX_ = other.moveX_;
      moveY_ = other.moveY_;
      moveZ_ = other.moveZ_;
      removeOnSkillEnd_ = other.removeOnSkillEnd_;
      single_ = other.single_;
      isAttackHint_ = other.isAttackHint_;
      attackSkillInfoId_ = other.attackSkillInfoId_;
      speedGrowth_ = other.speedGrowth_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttractConfig Clone() {
      return new AttractConfig(this);
    }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 1;
    private int key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "AttractDuration" field.</summary>
    public const int AttractDurationFieldNumber = 2;
    private int attractDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttractDuration {
      get { return attractDuration_; }
      set {
        attractDuration_ = value;
      }
    }

    /// <summary>Field number for the "Speed" field.</summary>
    public const int SpeedFieldNumber = 3;
    private int speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "IsHitForce" field.</summary>
    public const int IsHitForceFieldNumber = 4;
    private bool isHitForce_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHitForce {
      get { return isHitForce_; }
      set {
        isHitForce_ = value;
      }
    }

    /// <summary>Field number for the "HitForceX" field.</summary>
    public const int HitForceXFieldNumber = 5;
    private int hitForceX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitForceX {
      get { return hitForceX_; }
      set {
        hitForceX_ = value;
      }
    }

    /// <summary>Field number for the "HitForceY" field.</summary>
    public const int HitForceYFieldNumber = 6;
    private int hitForceY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitForceY {
      get { return hitForceY_; }
      set {
        hitForceY_ = value;
      }
    }

    /// <summary>Field number for the "AttractPosGroup" field.</summary>
    public const int AttractPosGroupFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Pbe.AttractPosGroup> _repeated_attractPosGroup_codec
        = pb::FieldCodec.ForMessage(58, global::Pbe.AttractPosGroup.Parser);
    private readonly pbc::RepeatedField<global::Pbe.AttractPosGroup> attractPosGroup_ = new pbc::RepeatedField<global::Pbe.AttractPosGroup>();
    /// <summary>
    ///吸附位置信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.AttractPosGroup> AttractPosGroup {
      get { return attractPosGroup_; }
    }

    /// <summary>Field number for the "MoveX" field.</summary>
    public const int MoveXFieldNumber = 8;
    private bool moveX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MoveX {
      get { return moveX_; }
      set {
        moveX_ = value;
      }
    }

    /// <summary>Field number for the "MoveY" field.</summary>
    public const int MoveYFieldNumber = 9;
    private bool moveY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MoveY {
      get { return moveY_; }
      set {
        moveY_ = value;
      }
    }

    /// <summary>Field number for the "MoveZ" field.</summary>
    public const int MoveZFieldNumber = 10;
    private bool moveZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MoveZ {
      get { return moveZ_; }
      set {
        moveZ_ = value;
      }
    }

    /// <summary>Field number for the "RemoveOnSkillEnd" field.</summary>
    public const int RemoveOnSkillEndFieldNumber = 11;
    private bool removeOnSkillEnd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RemoveOnSkillEnd {
      get { return removeOnSkillEnd_; }
      set {
        removeOnSkillEnd_ = value;
      }
    }

    /// <summary>Field number for the "Single" field.</summary>
    public const int SingleFieldNumber = 12;
    private bool single_;
    /// <summary>
    ///不共用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Single {
      get { return single_; }
      set {
        single_ = value;
      }
    }

    /// <summary>Field number for the "IsAttackHint" field.</summary>
    public const int IsAttackHintFieldNumber = 13;
    private bool isAttackHint_;
    /// <summary>
    /// 攻击命中的列表中再判定吸附
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAttackHint {
      get { return isAttackHint_; }
      set {
        isAttackHint_ = value;
      }
    }

    /// <summary>Field number for the "AttackSkillInfoId" field.</summary>
    public const int AttackSkillInfoIdFieldNumber = 14;
    private int attackSkillInfoId_;
    /// <summary>
    /// 对应攻击效果表Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackSkillInfoId {
      get { return attackSkillInfoId_; }
      set {
        attackSkillInfoId_ = value;
      }
    }

    /// <summary>Field number for the "SpeedGrowth" field.</summary>
    public const int SpeedGrowthFieldNumber = 15;
    private int speedGrowth_;
    /// <summary>
    ///速度成长
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpeedGrowth {
      get { return speedGrowth_; }
      set {
        speedGrowth_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttractConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttractConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (AttractDuration != other.AttractDuration) return false;
      if (Speed != other.Speed) return false;
      if (IsHitForce != other.IsHitForce) return false;
      if (HitForceX != other.HitForceX) return false;
      if (HitForceY != other.HitForceY) return false;
      if(!attractPosGroup_.Equals(other.attractPosGroup_)) return false;
      if (MoveX != other.MoveX) return false;
      if (MoveY != other.MoveY) return false;
      if (MoveZ != other.MoveZ) return false;
      if (RemoveOnSkillEnd != other.RemoveOnSkillEnd) return false;
      if (Single != other.Single) return false;
      if (IsAttackHint != other.IsAttackHint) return false;
      if (AttackSkillInfoId != other.AttackSkillInfoId) return false;
      if (SpeedGrowth != other.SpeedGrowth) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key != 0) hash ^= Key.GetHashCode();
      if (AttractDuration != 0) hash ^= AttractDuration.GetHashCode();
      if (Speed != 0) hash ^= Speed.GetHashCode();
      if (IsHitForce != false) hash ^= IsHitForce.GetHashCode();
      if (HitForceX != 0) hash ^= HitForceX.GetHashCode();
      if (HitForceY != 0) hash ^= HitForceY.GetHashCode();
      hash ^= attractPosGroup_.GetHashCode();
      if (MoveX != false) hash ^= MoveX.GetHashCode();
      if (MoveY != false) hash ^= MoveY.GetHashCode();
      if (MoveZ != false) hash ^= MoveZ.GetHashCode();
      if (RemoveOnSkillEnd != false) hash ^= RemoveOnSkillEnd.GetHashCode();
      if (Single != false) hash ^= Single.GetHashCode();
      if (IsAttackHint != false) hash ^= IsAttackHint.GetHashCode();
      if (AttackSkillInfoId != 0) hash ^= AttackSkillInfoId.GetHashCode();
      if (SpeedGrowth != 0) hash ^= SpeedGrowth.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Key);
      }
      if (AttractDuration != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AttractDuration);
      }
      if (Speed != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Speed);
      }
      if (IsHitForce != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsHitForce);
      }
      if (HitForceX != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(HitForceX);
      }
      if (HitForceY != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(HitForceY);
      }
      attractPosGroup_.WriteTo(output, _repeated_attractPosGroup_codec);
      if (MoveX != false) {
        output.WriteRawTag(64);
        output.WriteBool(MoveX);
      }
      if (MoveY != false) {
        output.WriteRawTag(72);
        output.WriteBool(MoveY);
      }
      if (MoveZ != false) {
        output.WriteRawTag(80);
        output.WriteBool(MoveZ);
      }
      if (RemoveOnSkillEnd != false) {
        output.WriteRawTag(88);
        output.WriteBool(RemoveOnSkillEnd);
      }
      if (Single != false) {
        output.WriteRawTag(96);
        output.WriteBool(Single);
      }
      if (IsAttackHint != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsAttackHint);
      }
      if (AttackSkillInfoId != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(AttackSkillInfoId);
      }
      if (SpeedGrowth != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(SpeedGrowth);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key);
      }
      if (AttractDuration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttractDuration);
      }
      if (Speed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Speed);
      }
      if (IsHitForce != false) {
        size += 1 + 1;
      }
      if (HitForceX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitForceX);
      }
      if (HitForceY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitForceY);
      }
      size += attractPosGroup_.CalculateSize(_repeated_attractPosGroup_codec);
      if (MoveX != false) {
        size += 1 + 1;
      }
      if (MoveY != false) {
        size += 1 + 1;
      }
      if (MoveZ != false) {
        size += 1 + 1;
      }
      if (RemoveOnSkillEnd != false) {
        size += 1 + 1;
      }
      if (Single != false) {
        size += 1 + 1;
      }
      if (IsAttackHint != false) {
        size += 1 + 1;
      }
      if (AttackSkillInfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackSkillInfoId);
      }
      if (SpeedGrowth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpeedGrowth);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttractConfig other) {
      if (other == null) {
        return;
      }
      if (other.Key != 0) {
        Key = other.Key;
      }
      if (other.AttractDuration != 0) {
        AttractDuration = other.AttractDuration;
      }
      if (other.Speed != 0) {
        Speed = other.Speed;
      }
      if (other.IsHitForce != false) {
        IsHitForce = other.IsHitForce;
      }
      if (other.HitForceX != 0) {
        HitForceX = other.HitForceX;
      }
      if (other.HitForceY != 0) {
        HitForceY = other.HitForceY;
      }
      attractPosGroup_.Add(other.attractPosGroup_);
      if (other.MoveX != false) {
        MoveX = other.MoveX;
      }
      if (other.MoveY != false) {
        MoveY = other.MoveY;
      }
      if (other.MoveZ != false) {
        MoveZ = other.MoveZ;
      }
      if (other.RemoveOnSkillEnd != false) {
        RemoveOnSkillEnd = other.RemoveOnSkillEnd;
      }
      if (other.Single != false) {
        Single = other.Single;
      }
      if (other.IsAttackHint != false) {
        IsAttackHint = other.IsAttackHint;
      }
      if (other.AttackSkillInfoId != 0) {
        AttackSkillInfoId = other.AttackSkillInfoId;
      }
      if (other.SpeedGrowth != 0) {
        SpeedGrowth = other.SpeedGrowth;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Key = input.ReadInt32();
            break;
          }
          case 16: {
            AttractDuration = input.ReadInt32();
            break;
          }
          case 24: {
            Speed = input.ReadInt32();
            break;
          }
          case 32: {
            IsHitForce = input.ReadBool();
            break;
          }
          case 40: {
            HitForceX = input.ReadInt32();
            break;
          }
          case 48: {
            HitForceY = input.ReadInt32();
            break;
          }
          case 58: {
            attractPosGroup_.AddEntriesFrom(input, _repeated_attractPosGroup_codec);
            break;
          }
          case 64: {
            MoveX = input.ReadBool();
            break;
          }
          case 72: {
            MoveY = input.ReadBool();
            break;
          }
          case 80: {
            MoveZ = input.ReadBool();
            break;
          }
          case 88: {
            RemoveOnSkillEnd = input.ReadBool();
            break;
          }
          case 96: {
            Single = input.ReadBool();
            break;
          }
          case 104: {
            IsAttackHint = input.ReadBool();
            break;
          }
          case 112: {
            AttackSkillInfoId = input.ReadInt32();
            break;
          }
          case 120: {
            SpeedGrowth = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///吸附位置
  /// </summary>
  public sealed partial class AttractPosGroup : pb::IMessage<AttractPosGroup> {
    private static readonly pb::MessageParser<AttractPosGroup> _parser = new pb::MessageParser<AttractPosGroup>(() => new AttractPosGroup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttractPosGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttractPosGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttractPosGroup(AttractPosGroup other) : this() {
      box_ = other.box_ != null ? other.box_.Clone() : null;
      selfPos_ = other.selfPos_ != null ? other.selfPos_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttractPosGroup Clone() {
      return new AttractPosGroup(this);
    }

    /// <summary>Field number for the "Box" field.</summary>
    public const int BoxFieldNumber = 1;
    private global::Pbe.Box box_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.Box Box {
      get { return box_; }
      set {
        box_ = value;
      }
    }

    /// <summary>Field number for the "SelfPos" field.</summary>
    public const int SelfPosFieldNumber = 2;
    private global::Pbe.Vec3 selfPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.Vec3 SelfPos {
      get { return selfPos_; }
      set {
        selfPos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttractPosGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttractPosGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Box, other.Box)) return false;
      if (!object.Equals(SelfPos, other.SelfPos)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (box_ != null) hash ^= Box.GetHashCode();
      if (selfPos_ != null) hash ^= SelfPos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (box_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Box);
      }
      if (selfPos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SelfPos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (box_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Box);
      }
      if (selfPos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelfPos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttractPosGroup other) {
      if (other == null) {
        return;
      }
      if (other.box_ != null) {
        if (box_ == null) {
          box_ = new global::Pbe.Box();
        }
        Box.MergeFrom(other.Box);
      }
      if (other.selfPos_ != null) {
        if (selfPos_ == null) {
          selfPos_ = new global::Pbe.Vec3();
        }
        SelfPos.MergeFrom(other.SelfPos);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (box_ == null) {
              box_ = new global::Pbe.Box();
            }
            input.ReadMessage(box_);
            break;
          }
          case 18: {
            if (selfPos_ == null) {
              selfPos_ = new global::Pbe.Vec3();
            }
            input.ReadMessage(selfPos_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Vec3 : pb::IMessage<Vec3> {
    private static readonly pb::MessageParser<Vec3> _parser = new pb::MessageParser<Vec3>(() => new Vec3());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vec3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vec3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vec3(Vec3 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vec3 Clone() {
      return new Vec3(this);
    }

    /// <summary>Field number for the "X" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "Y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "Z" field.</summary>
    public const int ZFieldNumber = 3;
    private int z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vec3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vec3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (Z != 0) hash ^= Z.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (Z != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (Z != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Z);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vec3 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.Z != 0) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            Z = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BoolVec3 : pb::IMessage<BoolVec3> {
    private static readonly pb::MessageParser<BoolVec3> _parser = new pb::MessageParser<BoolVec3>(() => new BoolVec3());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BoolVec3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoolVec3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoolVec3(BoolVec3 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoolVec3 Clone() {
      return new BoolVec3(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private bool x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private bool y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private bool z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BoolVec3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BoolVec3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != false) hash ^= X.GetHashCode();
      if (Y != false) hash ^= Y.GetHashCode();
      if (Z != false) hash ^= Z.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != false) {
        output.WriteRawTag(8);
        output.WriteBool(X);
      }
      if (Y != false) {
        output.WriteRawTag(16);
        output.WriteBool(Y);
      }
      if (Z != false) {
        output.WriteRawTag(24);
        output.WriteBool(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != false) {
        size += 1 + 1;
      }
      if (Y != false) {
        size += 1 + 1;
      }
      if (Z != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BoolVec3 other) {
      if (other == null) {
        return;
      }
      if (other.X != false) {
        X = other.X;
      }
      if (other.Y != false) {
        Y = other.Y;
      }
      if (other.Z != false) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadBool();
            break;
          }
          case 16: {
            Y = input.ReadBool();
            break;
          }
          case 24: {
            Z = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TrackPos : pb::IMessage<TrackPos> {
    private static readonly pb::MessageParser<TrackPos> _parser = new pb::MessageParser<TrackPos>(() => new TrackPos());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrackPos> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackPos() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackPos(TrackPos other) : this() {
      joint_ = other.joint_;
      pos_ = other.pos_ != null ? other.pos_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackPos Clone() {
      return new TrackPos(this);
    }

    /// <summary>Field number for the "Joint" field.</summary>
    public const int JointFieldNumber = 1;
    private global::Pbe.JoinId joint_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.JoinId Joint {
      get { return joint_; }
      set {
        joint_ = value;
      }
    }

    /// <summary>Field number for the "Pos" field.</summary>
    public const int PosFieldNumber = 2;
    private global::Pbe.Vec3 pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.Vec3 Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrackPos);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrackPos other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Joint != other.Joint) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Joint != 0) hash ^= Joint.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Joint != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Joint);
      }
      if (pos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Joint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Joint);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrackPos other) {
      if (other == null) {
        return;
      }
      if (other.Joint != 0) {
        Joint = other.Joint;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Pbe.Vec3();
        }
        Pos.MergeFrom(other.Pos);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            joint_ = (global::Pbe.JoinId) input.ReadEnum();
            break;
          }
          case 18: {
            if (pos_ == null) {
              pos_ = new global::Pbe.Vec3();
            }
            input.ReadMessage(pos_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HitEffect : pb::IMessage<HitEffect> {
    private static readonly pb::MessageParser<HitEffect> _parser = new pb::MessageParser<HitEffect>(() => new HitEffect());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HitEffect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitEffect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitEffect(HitEffect other) : this() {
      hitSkillType_ = other.hitSkillType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitEffect Clone() {
      return new HitEffect(this);
    }

    /// <summary>Field number for the "HitSkillType" field.</summary>
    public const int HitSkillTypeFieldNumber = 1;
    private int hitSkillType_;
    /// <summary>
    /// 受击动画名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitSkillType {
      get { return hitSkillType_; }
      set {
        hitSkillType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HitEffect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HitEffect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HitSkillType != other.HitSkillType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HitSkillType != 0) hash ^= HitSkillType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HitSkillType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HitSkillType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HitSkillType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitSkillType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HitEffect other) {
      if (other == null) {
        return;
      }
      if (other.HitSkillType != 0) {
        HitSkillType = other.HitSkillType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HitSkillType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AttackBoxList : pb::IMessage<AttackBoxList> {
    private static readonly pb::MessageParser<AttackBoxList> _parser = new pb::MessageParser<AttackBoxList>(() => new AttackBoxList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttackBoxList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackBoxList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackBoxList(AttackBoxList other) : this() {
      boxList_ = other.boxList_.Clone();
      maxTarget_ = other.maxTarget_;
      reset_ = other.reset_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackBoxList Clone() {
      return new AttackBoxList(this);
    }

    /// <summary>Field number for the "BoxList" field.</summary>
    public const int BoxListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Pbe.AttackBox> _repeated_boxList_codec
        = pb::FieldCodec.ForMessage(10, global::Pbe.AttackBox.Parser);
    private readonly pbc::RepeatedField<global::Pbe.AttackBox> boxList_ = new pbc::RepeatedField<global::Pbe.AttackBox>();
    /// <summary>
    /// 单帧攻击盒列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.AttackBox> BoxList {
      get { return boxList_; }
    }

    /// <summary>Field number for the "MaxTarget" field.</summary>
    public const int MaxTargetFieldNumber = 2;
    private int maxTarget_;
    /// <summary>
    /// 单帧最大目标个数(0代表无限制)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxTarget {
      get { return maxTarget_; }
      set {
        maxTarget_ = value;
      }
    }

    /// <summary>Field number for the "Reset" field.</summary>
    public const int ResetFieldNumber = 3;
    private bool reset_;
    /// <summary>
    /// 重置生效列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Reset {
      get { return reset_; }
      set {
        reset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttackBoxList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttackBoxList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!boxList_.Equals(other.boxList_)) return false;
      if (MaxTarget != other.MaxTarget) return false;
      if (Reset != other.Reset) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= boxList_.GetHashCode();
      if (MaxTarget != 0) hash ^= MaxTarget.GetHashCode();
      if (Reset != false) hash ^= Reset.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      boxList_.WriteTo(output, _repeated_boxList_codec);
      if (MaxTarget != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxTarget);
      }
      if (Reset != false) {
        output.WriteRawTag(24);
        output.WriteBool(Reset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += boxList_.CalculateSize(_repeated_boxList_codec);
      if (MaxTarget != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxTarget);
      }
      if (Reset != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttackBoxList other) {
      if (other == null) {
        return;
      }
      boxList_.Add(other.boxList_);
      if (other.MaxTarget != 0) {
        MaxTarget = other.MaxTarget;
      }
      if (other.Reset != false) {
        Reset = other.Reset;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            boxList_.AddEntriesFrom(input, _repeated_boxList_codec);
            break;
          }
          case 16: {
            MaxTarget = input.ReadInt32();
            break;
          }
          case 24: {
            Reset = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AttackBox : pb::IMessage<AttackBox> {
    private static readonly pb::MessageParser<AttackBox> _parser = new pb::MessageParser<AttackBox>(() => new AttackBox());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttackBox> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackBox() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackBox(AttackBox other) : this() {
      box_ = other.box_ != null ? other.box_.Clone() : null;
      sortNum_ = other.sortNum_;
      effectID_ = other.effectID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackBox Clone() {
      return new AttackBox(this);
    }

    /// <summary>Field number for the "Box" field.</summary>
    public const int BoxFieldNumber = 1;
    private global::Pbe.Box box_;
    /// <summary>
    /// 攻击盒范围
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.Box Box {
      get { return box_; }
      set {
        box_ = value;
      }
    }

    /// <summary>Field number for the "SortNum" field.</summary>
    public const int SortNumFieldNumber = 2;
    private int sortNum_;
    /// <summary>
    /// 编号(同帧命中编号小的优先)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SortNum {
      get { return sortNum_; }
      set {
        sortNum_ = value;
      }
    }

    /// <summary>Field number for the "EffectID" field.</summary>
    public const int EffectIDFieldNumber = 3;
    private int effectID_;
    /// <summary>
    /// 效果表ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EffectID {
      get { return effectID_; }
      set {
        effectID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttackBox);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttackBox other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Box, other.Box)) return false;
      if (SortNum != other.SortNum) return false;
      if (EffectID != other.EffectID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (box_ != null) hash ^= Box.GetHashCode();
      if (SortNum != 0) hash ^= SortNum.GetHashCode();
      if (EffectID != 0) hash ^= EffectID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (box_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Box);
      }
      if (SortNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SortNum);
      }
      if (EffectID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EffectID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (box_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Box);
      }
      if (SortNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SortNum);
      }
      if (EffectID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EffectID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttackBox other) {
      if (other == null) {
        return;
      }
      if (other.box_ != null) {
        if (box_ == null) {
          box_ = new global::Pbe.Box();
        }
        Box.MergeFrom(other.Box);
      }
      if (other.SortNum != 0) {
        SortNum = other.SortNum;
      }
      if (other.EffectID != 0) {
        EffectID = other.EffectID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (box_ == null) {
              box_ = new global::Pbe.Box();
            }
            input.ReadMessage(box_);
            break;
          }
          case 16: {
            SortNum = input.ReadInt32();
            break;
          }
          case 24: {
            EffectID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DefConfig : pb::IMessage<DefConfig> {
    private static readonly pb::MessageParser<DefConfig> _parser = new pb::MessageParser<DefConfig>(() => new DefConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DefConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefConfig(DefConfig other) : this() {
      key_ = other.key_;
      defBox_ = other.defBox_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefConfig Clone() {
      return new DefConfig(this);
    }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 2;
    private int key_;
    /// <summary>
    ///int32 FrameNum                                    = 1; // 帧号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "DefBox" field.</summary>
    public const int DefBoxFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Pbe.Box> _repeated_defBox_codec
        = pb::FieldCodec.ForMessage(26, global::Pbe.Box.Parser);
    private readonly pbc::RepeatedField<global::Pbe.Box> defBox_ = new pbc::RepeatedField<global::Pbe.Box>();
    /// <summary>
    ///受击盒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.Box> DefBox {
      get { return defBox_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DefConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DefConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if(!defBox_.Equals(other.defBox_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key != 0) hash ^= Key.GetHashCode();
      hash ^= defBox_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Key);
      }
      defBox_.WriteTo(output, _repeated_defBox_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key);
      }
      size += defBox_.CalculateSize(_repeated_defBox_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DefConfig other) {
      if (other == null) {
        return;
      }
      if (other.Key != 0) {
        Key = other.Key;
      }
      defBox_.Add(other.defBox_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            Key = input.ReadInt32();
            break;
          }
          case 26: {
            defBox_.AddEntriesFrom(input, _repeated_defBox_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BlockConfig : pb::IMessage<BlockConfig> {
    private static readonly pb::MessageParser<BlockConfig> _parser = new pb::MessageParser<BlockConfig>(() => new BlockConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockConfig(BlockConfig other) : this() {
      key_ = other.key_;
      block_ = other.block_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockConfig Clone() {
      return new BlockConfig(this);
    }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 1;
    private int key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "block" field.</summary>
    public const int BlockFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Pbe.Box> _repeated_block_codec
        = pb::FieldCodec.ForMessage(18, global::Pbe.Box.Parser);
    private readonly pbc::RepeatedField<global::Pbe.Box> block_ = new pbc::RepeatedField<global::Pbe.Box>();
    /// <summary>
    ///阻挡盒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.Box> Block {
      get { return block_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if(!block_.Equals(other.block_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key != 0) hash ^= Key.GetHashCode();
      hash ^= block_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Key);
      }
      block_.WriteTo(output, _repeated_block_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key);
      }
      size += block_.CalculateSize(_repeated_block_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockConfig other) {
      if (other == null) {
        return;
      }
      if (other.Key != 0) {
        Key = other.Key;
      }
      block_.Add(other.block_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Key = input.ReadInt32();
            break;
          }
          case 18: {
            block_.AddEntriesFrom(input, _repeated_block_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Box : pb::IMessage<Box> {
    private static readonly pb::MessageParser<Box> _parser = new pb::MessageParser<Box>(() => new Box());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Box> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Box() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Box(Box other) : this() {
      rangeX_ = other.rangeX_;
      rangeY_ = other.rangeY_;
      rangeZ_ = other.rangeZ_;
      offsetX_ = other.offsetX_;
      offsetY_ = other.offsetY_;
      offsetZ_ = other.offsetZ_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Box Clone() {
      return new Box(this);
    }

    /// <summary>Field number for the "RangeX" field.</summary>
    public const int RangeXFieldNumber = 1;
    private float rangeX_;
    /// <summary>
    /// X轴范围
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RangeX {
      get { return rangeX_; }
      set {
        rangeX_ = value;
      }
    }

    /// <summary>Field number for the "RangeY" field.</summary>
    public const int RangeYFieldNumber = 2;
    private float rangeY_;
    /// <summary>
    /// Y轴范围
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RangeY {
      get { return rangeY_; }
      set {
        rangeY_ = value;
      }
    }

    /// <summary>Field number for the "RangeZ" field.</summary>
    public const int RangeZFieldNumber = 3;
    private float rangeZ_;
    /// <summary>
    /// Z轴范围
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RangeZ {
      get { return rangeZ_; }
      set {
        rangeZ_ = value;
      }
    }

    /// <summary>Field number for the "OffsetX" field.</summary>
    public const int OffsetXFieldNumber = 4;
    private float offsetX_;
    /// <summary>
    /// 中心点X偏移
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OffsetX {
      get { return offsetX_; }
      set {
        offsetX_ = value;
      }
    }

    /// <summary>Field number for the "OffsetY" field.</summary>
    public const int OffsetYFieldNumber = 5;
    private float offsetY_;
    /// <summary>
    /// 中心点Y偏移
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OffsetY {
      get { return offsetY_; }
      set {
        offsetY_ = value;
      }
    }

    /// <summary>Field number for the "OffsetZ" field.</summary>
    public const int OffsetZFieldNumber = 6;
    private float offsetZ_;
    /// <summary>
    /// 中心点Z偏移 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OffsetZ {
      get { return offsetZ_; }
      set {
        offsetZ_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Box);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Box other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RangeX, other.RangeX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RangeY, other.RangeY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RangeZ, other.RangeZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OffsetX, other.OffsetX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OffsetY, other.OffsetY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OffsetZ, other.OffsetZ)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RangeX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RangeX);
      if (RangeY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RangeY);
      if (RangeZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RangeZ);
      if (OffsetX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OffsetX);
      if (OffsetY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OffsetY);
      if (OffsetZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OffsetZ);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RangeX != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(RangeX);
      }
      if (RangeY != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(RangeY);
      }
      if (RangeZ != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(RangeZ);
      }
      if (OffsetX != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(OffsetX);
      }
      if (OffsetY != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(OffsetY);
      }
      if (OffsetZ != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(OffsetZ);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RangeX != 0F) {
        size += 1 + 4;
      }
      if (RangeY != 0F) {
        size += 1 + 4;
      }
      if (RangeZ != 0F) {
        size += 1 + 4;
      }
      if (OffsetX != 0F) {
        size += 1 + 4;
      }
      if (OffsetY != 0F) {
        size += 1 + 4;
      }
      if (OffsetZ != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Box other) {
      if (other == null) {
        return;
      }
      if (other.RangeX != 0F) {
        RangeX = other.RangeX;
      }
      if (other.RangeY != 0F) {
        RangeY = other.RangeY;
      }
      if (other.RangeZ != 0F) {
        RangeZ = other.RangeZ;
      }
      if (other.OffsetX != 0F) {
        OffsetX = other.OffsetX;
      }
      if (other.OffsetY != 0F) {
        OffsetY = other.OffsetY;
      }
      if (other.OffsetZ != 0F) {
        OffsetZ = other.OffsetZ;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            RangeX = input.ReadFloat();
            break;
          }
          case 21: {
            RangeY = input.ReadFloat();
            break;
          }
          case 29: {
            RangeZ = input.ReadFloat();
            break;
          }
          case 37: {
            OffsetX = input.ReadFloat();
            break;
          }
          case 45: {
            OffsetY = input.ReadFloat();
            break;
          }
          case 53: {
            OffsetZ = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChangeSkill : pb::IMessage<ChangeSkill> {
    private static readonly pb::MessageParser<ChangeSkill> _parser = new pb::MessageParser<ChangeSkill>(() => new ChangeSkill());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeSkill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeSkill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeSkill(ChangeSkill other) : this() {
      vecChangeSkill_ = other.vecChangeSkill_.Clone();
      key_ = other.key_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeSkill Clone() {
      return new ChangeSkill(this);
    }

    /// <summary>Field number for the "VecChangeSkill" field.</summary>
    public const int VecChangeSkillFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Pbe.ChangeSkillUnit> _repeated_vecChangeSkill_codec
        = pb::FieldCodec.ForMessage(18, global::Pbe.ChangeSkillUnit.Parser);
    private readonly pbc::RepeatedField<global::Pbe.ChangeSkillUnit> vecChangeSkill_ = new pbc::RepeatedField<global::Pbe.ChangeSkillUnit>();
    /// <summary>
    ///int32 FrameNum                                    = 1; // 帧号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.ChangeSkillUnit> VecChangeSkill {
      get { return vecChangeSkill_; }
    }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 3;
    private int key_;
    /// <summary>
    /// 转换map的key，帧号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeSkill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeSkill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!vecChangeSkill_.Equals(other.vecChangeSkill_)) return false;
      if (Key != other.Key) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= vecChangeSkill_.GetHashCode();
      if (Key != 0) hash ^= Key.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      vecChangeSkill_.WriteTo(output, _repeated_vecChangeSkill_codec);
      if (Key != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Key);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += vecChangeSkill_.CalculateSize(_repeated_vecChangeSkill_codec);
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeSkill other) {
      if (other == null) {
        return;
      }
      vecChangeSkill_.Add(other.vecChangeSkill_);
      if (other.Key != 0) {
        Key = other.Key;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            vecChangeSkill_.AddEntriesFrom(input, _repeated_vecChangeSkill_codec);
            break;
          }
          case 24: {
            Key = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChangeSkillUnit : pb::IMessage<ChangeSkillUnit> {
    private static readonly pb::MessageParser<ChangeSkillUnit> _parser = new pb::MessageParser<ChangeSkillUnit>(() => new ChangeSkillUnit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeSkillUnit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeSkillUnit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeSkillUnit(ChangeSkillUnit other) : this() {
      inputSkillID_ = other.inputSkillID_;
      jumpFrameNum_ = other.jumpFrameNum_;
      resetSpeed_ = other.resetSpeed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeSkillUnit Clone() {
      return new ChangeSkillUnit(this);
    }

    /// <summary>Field number for the "InputSkillID" field.</summary>
    public const int InputSkillIDFieldNumber = 1;
    private int inputSkillID_;
    /// <summary>
    /// 跳转技能ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InputSkillID {
      get { return inputSkillID_; }
      set {
        inputSkillID_ = value;
      }
    }

    /// <summary>Field number for the "JumpFrameNum" field.</summary>
    public const int JumpFrameNumFieldNumber = 2;
    private int jumpFrameNum_;
    /// <summary>
    /// 跳转到目标技能技能的帧号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JumpFrameNum {
      get { return jumpFrameNum_; }
      set {
        jumpFrameNum_ = value;
      }
    }

    /// <summary>Field number for the "ResetSpeed" field.</summary>
    public const int ResetSpeedFieldNumber = 3;
    private bool resetSpeed_;
    /// <summary>
    /// 保留上一个技能的移动参数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ResetSpeed {
      get { return resetSpeed_; }
      set {
        resetSpeed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeSkillUnit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeSkillUnit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InputSkillID != other.InputSkillID) return false;
      if (JumpFrameNum != other.JumpFrameNum) return false;
      if (ResetSpeed != other.ResetSpeed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InputSkillID != 0) hash ^= InputSkillID.GetHashCode();
      if (JumpFrameNum != 0) hash ^= JumpFrameNum.GetHashCode();
      if (ResetSpeed != false) hash ^= ResetSpeed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InputSkillID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(InputSkillID);
      }
      if (JumpFrameNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(JumpFrameNum);
      }
      if (ResetSpeed != false) {
        output.WriteRawTag(24);
        output.WriteBool(ResetSpeed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InputSkillID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InputSkillID);
      }
      if (JumpFrameNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JumpFrameNum);
      }
      if (ResetSpeed != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeSkillUnit other) {
      if (other == null) {
        return;
      }
      if (other.InputSkillID != 0) {
        InputSkillID = other.InputSkillID;
      }
      if (other.JumpFrameNum != 0) {
        JumpFrameNum = other.JumpFrameNum;
      }
      if (other.ResetSpeed != false) {
        ResetSpeed = other.ResetSpeed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            InputSkillID = input.ReadInt32();
            break;
          }
          case 16: {
            JumpFrameNum = input.ReadInt32();
            break;
          }
          case 24: {
            ResetSpeed = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FrameBuff : pb::IMessage<FrameBuff> {
    private static readonly pb::MessageParser<FrameBuff> _parser = new pb::MessageParser<FrameBuff>(() => new FrameBuff());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FrameBuff> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameBuff() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameBuff(FrameBuff other) : this() {
      frameNum_ = other.frameNum_;
      key_ = other.key_;
      buffInfo_ = other.buffInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameBuff Clone() {
      return new FrameBuff(this);
    }

    /// <summary>Field number for the "FrameNum" field.</summary>
    public const int FrameNumFieldNumber = 1;
    private int frameNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrameNum {
      get { return frameNum_; }
      set {
        frameNum_ = value;
      }
    }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 2;
    private int key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "BuffInfo" field.</summary>
    public const int BuffInfoFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Pbe.BuffInfo> _repeated_buffInfo_codec
        = pb::FieldCodec.ForMessage(26, global::Pbe.BuffInfo.Parser);
    private readonly pbc::RepeatedField<global::Pbe.BuffInfo> buffInfo_ = new pbc::RepeatedField<global::Pbe.BuffInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.BuffInfo> BuffInfo {
      get { return buffInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FrameBuff);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FrameBuff other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FrameNum != other.FrameNum) return false;
      if (Key != other.Key) return false;
      if(!buffInfo_.Equals(other.buffInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FrameNum != 0) hash ^= FrameNum.GetHashCode();
      if (Key != 0) hash ^= Key.GetHashCode();
      hash ^= buffInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FrameNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FrameNum);
      }
      if (Key != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Key);
      }
      buffInfo_.WriteTo(output, _repeated_buffInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FrameNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameNum);
      }
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key);
      }
      size += buffInfo_.CalculateSize(_repeated_buffInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FrameBuff other) {
      if (other == null) {
        return;
      }
      if (other.FrameNum != 0) {
        FrameNum = other.FrameNum;
      }
      if (other.Key != 0) {
        Key = other.Key;
      }
      buffInfo_.Add(other.buffInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FrameNum = input.ReadInt32();
            break;
          }
          case 16: {
            Key = input.ReadInt32();
            break;
          }
          case 26: {
            buffInfo_.AddEntriesFrom(input, _repeated_buffInfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BuffInfo : pb::IMessage<BuffInfo> {
    private static readonly pb::MessageParser<BuffInfo> _parser = new pb::MessageParser<BuffInfo>(() => new BuffInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuffInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuffInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuffInfo(BuffInfo other) : this() {
      buffInfoId_ = other.buffInfoId_;
      level_ = other.level_;
      useSkillLevel_ = other.useSkillLevel_;
      deleteWhenChangeSkill_ = other.deleteWhenChangeSkill_;
      deleteWhenChangeAction_ = other.deleteWhenChangeAction_;
      duration_ = other.duration_;
      lifeCycleStyle_ = other.lifeCycleStyle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuffInfo Clone() {
      return new BuffInfo(this);
    }

    /// <summary>Field number for the "BuffInfoId" field.</summary>
    public const int BuffInfoIdFieldNumber = 1;
    private int buffInfoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuffInfoId {
      get { return buffInfoId_; }
      set {
        buffInfoId_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "UseSkillLevel" field.</summary>
    public const int UseSkillLevelFieldNumber = 3;
    private bool useSkillLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseSkillLevel {
      get { return useSkillLevel_; }
      set {
        useSkillLevel_ = value;
      }
    }

    /// <summary>Field number for the "DeleteWhenChangeSkill" field.</summary>
    public const int DeleteWhenChangeSkillFieldNumber = 4;
    private bool deleteWhenChangeSkill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DeleteWhenChangeSkill {
      get { return deleteWhenChangeSkill_; }
      set {
        deleteWhenChangeSkill_ = value;
      }
    }

    /// <summary>Field number for the "DeleteWhenChangeAction" field.</summary>
    public const int DeleteWhenChangeActionFieldNumber = 5;
    private bool deleteWhenChangeAction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DeleteWhenChangeAction {
      get { return deleteWhenChangeAction_; }
      set {
        deleteWhenChangeAction_ = value;
      }
    }

    /// <summary>Field number for the "Duration" field.</summary>
    public const int DurationFieldNumber = 6;
    private int duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "LifeCycleStyle" field.</summary>
    public const int LifeCycleStyleFieldNumber = 7;
    private int lifeCycleStyle_;
    /// <summary>
    /// 特效生命周期类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LifeCycleStyle {
      get { return lifeCycleStyle_; }
      set {
        lifeCycleStyle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuffInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuffInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BuffInfoId != other.BuffInfoId) return false;
      if (Level != other.Level) return false;
      if (UseSkillLevel != other.UseSkillLevel) return false;
      if (DeleteWhenChangeSkill != other.DeleteWhenChangeSkill) return false;
      if (DeleteWhenChangeAction != other.DeleteWhenChangeAction) return false;
      if (Duration != other.Duration) return false;
      if (LifeCycleStyle != other.LifeCycleStyle) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BuffInfoId != 0) hash ^= BuffInfoId.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (UseSkillLevel != false) hash ^= UseSkillLevel.GetHashCode();
      if (DeleteWhenChangeSkill != false) hash ^= DeleteWhenChangeSkill.GetHashCode();
      if (DeleteWhenChangeAction != false) hash ^= DeleteWhenChangeAction.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      if (LifeCycleStyle != 0) hash ^= LifeCycleStyle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BuffInfoId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BuffInfoId);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (UseSkillLevel != false) {
        output.WriteRawTag(24);
        output.WriteBool(UseSkillLevel);
      }
      if (DeleteWhenChangeSkill != false) {
        output.WriteRawTag(32);
        output.WriteBool(DeleteWhenChangeSkill);
      }
      if (DeleteWhenChangeAction != false) {
        output.WriteRawTag(40);
        output.WriteBool(DeleteWhenChangeAction);
      }
      if (Duration != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Duration);
      }
      if (LifeCycleStyle != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(LifeCycleStyle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BuffInfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuffInfoId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (UseSkillLevel != false) {
        size += 1 + 1;
      }
      if (DeleteWhenChangeSkill != false) {
        size += 1 + 1;
      }
      if (DeleteWhenChangeAction != false) {
        size += 1 + 1;
      }
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      if (LifeCycleStyle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LifeCycleStyle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuffInfo other) {
      if (other == null) {
        return;
      }
      if (other.BuffInfoId != 0) {
        BuffInfoId = other.BuffInfoId;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.UseSkillLevel != false) {
        UseSkillLevel = other.UseSkillLevel;
      }
      if (other.DeleteWhenChangeSkill != false) {
        DeleteWhenChangeSkill = other.DeleteWhenChangeSkill;
      }
      if (other.DeleteWhenChangeAction != false) {
        DeleteWhenChangeAction = other.DeleteWhenChangeAction;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      if (other.LifeCycleStyle != 0) {
        LifeCycleStyle = other.LifeCycleStyle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BuffInfoId = input.ReadInt32();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
          case 24: {
            UseSkillLevel = input.ReadBool();
            break;
          }
          case 32: {
            DeleteWhenChangeSkill = input.ReadBool();
            break;
          }
          case 40: {
            DeleteWhenChangeAction = input.ReadBool();
            break;
          }
          case 48: {
            Duration = input.ReadInt32();
            break;
          }
          case 56: {
            LifeCycleStyle = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FrameMechanism : pb::IMessage<FrameMechanism> {
    private static readonly pb::MessageParser<FrameMechanism> _parser = new pb::MessageParser<FrameMechanism>(() => new FrameMechanism());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FrameMechanism> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameMechanism() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameMechanism(FrameMechanism other) : this() {
      frameNum_ = other.frameNum_;
      key_ = other.key_;
      mechanismInfo_ = other.mechanismInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameMechanism Clone() {
      return new FrameMechanism(this);
    }

    /// <summary>Field number for the "FrameNum" field.</summary>
    public const int FrameNumFieldNumber = 1;
    private int frameNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrameNum {
      get { return frameNum_; }
      set {
        frameNum_ = value;
      }
    }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 2;
    private int key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "MechanismInfo" field.</summary>
    public const int MechanismInfoFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Pbe.MechanismInfo> _repeated_mechanismInfo_codec
        = pb::FieldCodec.ForMessage(26, global::Pbe.MechanismInfo.Parser);
    private readonly pbc::RepeatedField<global::Pbe.MechanismInfo> mechanismInfo_ = new pbc::RepeatedField<global::Pbe.MechanismInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.MechanismInfo> MechanismInfo {
      get { return mechanismInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FrameMechanism);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FrameMechanism other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FrameNum != other.FrameNum) return false;
      if (Key != other.Key) return false;
      if(!mechanismInfo_.Equals(other.mechanismInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FrameNum != 0) hash ^= FrameNum.GetHashCode();
      if (Key != 0) hash ^= Key.GetHashCode();
      hash ^= mechanismInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FrameNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FrameNum);
      }
      if (Key != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Key);
      }
      mechanismInfo_.WriteTo(output, _repeated_mechanismInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FrameNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameNum);
      }
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key);
      }
      size += mechanismInfo_.CalculateSize(_repeated_mechanismInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FrameMechanism other) {
      if (other == null) {
        return;
      }
      if (other.FrameNum != 0) {
        FrameNum = other.FrameNum;
      }
      if (other.Key != 0) {
        Key = other.Key;
      }
      mechanismInfo_.Add(other.mechanismInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FrameNum = input.ReadInt32();
            break;
          }
          case 16: {
            Key = input.ReadInt32();
            break;
          }
          case 26: {
            mechanismInfo_.AddEntriesFrom(input, _repeated_mechanismInfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MechanismInfo : pb::IMessage<MechanismInfo> {
    private static readonly pb::MessageParser<MechanismInfo> _parser = new pb::MessageParser<MechanismInfo>(() => new MechanismInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MechanismInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[81]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MechanismInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MechanismInfo(MechanismInfo other) : this() {
      mechanismID_ = other.mechanismID_;
      isAdd_ = other.isAdd_;
      useSkillLevel_ = other.useSkillLevel_;
      deleteWhenChangeSkill_ = other.deleteWhenChangeSkill_;
      deleteWhenChangeAction_ = other.deleteWhenChangeAction_;
      lifeCycleStyle_ = other.lifeCycleStyle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MechanismInfo Clone() {
      return new MechanismInfo(this);
    }

    /// <summary>Field number for the "MechanismID" field.</summary>
    public const int MechanismIDFieldNumber = 1;
    private int mechanismID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MechanismID {
      get { return mechanismID_; }
      set {
        mechanismID_ = value;
      }
    }

    /// <summary>Field number for the "IsAdd" field.</summary>
    public const int IsAddFieldNumber = 2;
    private bool isAdd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAdd {
      get { return isAdd_; }
      set {
        isAdd_ = value;
      }
    }

    /// <summary>Field number for the "UseSkillLevel" field.</summary>
    public const int UseSkillLevelFieldNumber = 3;
    private bool useSkillLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseSkillLevel {
      get { return useSkillLevel_; }
      set {
        useSkillLevel_ = value;
      }
    }

    /// <summary>Field number for the "DeleteWhenChangeSkill" field.</summary>
    public const int DeleteWhenChangeSkillFieldNumber = 4;
    private bool deleteWhenChangeSkill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DeleteWhenChangeSkill {
      get { return deleteWhenChangeSkill_; }
      set {
        deleteWhenChangeSkill_ = value;
      }
    }

    /// <summary>Field number for the "DeleteWhenChangeAction" field.</summary>
    public const int DeleteWhenChangeActionFieldNumber = 5;
    private bool deleteWhenChangeAction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DeleteWhenChangeAction {
      get { return deleteWhenChangeAction_; }
      set {
        deleteWhenChangeAction_ = value;
      }
    }

    /// <summary>Field number for the "LifeCycleStyle" field.</summary>
    public const int LifeCycleStyleFieldNumber = 6;
    private int lifeCycleStyle_;
    /// <summary>
    /// 特效生命周期类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LifeCycleStyle {
      get { return lifeCycleStyle_; }
      set {
        lifeCycleStyle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MechanismInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MechanismInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MechanismID != other.MechanismID) return false;
      if (IsAdd != other.IsAdd) return false;
      if (UseSkillLevel != other.UseSkillLevel) return false;
      if (DeleteWhenChangeSkill != other.DeleteWhenChangeSkill) return false;
      if (DeleteWhenChangeAction != other.DeleteWhenChangeAction) return false;
      if (LifeCycleStyle != other.LifeCycleStyle) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MechanismID != 0) hash ^= MechanismID.GetHashCode();
      if (IsAdd != false) hash ^= IsAdd.GetHashCode();
      if (UseSkillLevel != false) hash ^= UseSkillLevel.GetHashCode();
      if (DeleteWhenChangeSkill != false) hash ^= DeleteWhenChangeSkill.GetHashCode();
      if (DeleteWhenChangeAction != false) hash ^= DeleteWhenChangeAction.GetHashCode();
      if (LifeCycleStyle != 0) hash ^= LifeCycleStyle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MechanismID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MechanismID);
      }
      if (IsAdd != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsAdd);
      }
      if (UseSkillLevel != false) {
        output.WriteRawTag(24);
        output.WriteBool(UseSkillLevel);
      }
      if (DeleteWhenChangeSkill != false) {
        output.WriteRawTag(32);
        output.WriteBool(DeleteWhenChangeSkill);
      }
      if (DeleteWhenChangeAction != false) {
        output.WriteRawTag(40);
        output.WriteBool(DeleteWhenChangeAction);
      }
      if (LifeCycleStyle != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(LifeCycleStyle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MechanismID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MechanismID);
      }
      if (IsAdd != false) {
        size += 1 + 1;
      }
      if (UseSkillLevel != false) {
        size += 1 + 1;
      }
      if (DeleteWhenChangeSkill != false) {
        size += 1 + 1;
      }
      if (DeleteWhenChangeAction != false) {
        size += 1 + 1;
      }
      if (LifeCycleStyle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LifeCycleStyle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MechanismInfo other) {
      if (other == null) {
        return;
      }
      if (other.MechanismID != 0) {
        MechanismID = other.MechanismID;
      }
      if (other.IsAdd != false) {
        IsAdd = other.IsAdd;
      }
      if (other.UseSkillLevel != false) {
        UseSkillLevel = other.UseSkillLevel;
      }
      if (other.DeleteWhenChangeSkill != false) {
        DeleteWhenChangeSkill = other.DeleteWhenChangeSkill;
      }
      if (other.DeleteWhenChangeAction != false) {
        DeleteWhenChangeAction = other.DeleteWhenChangeAction;
      }
      if (other.LifeCycleStyle != 0) {
        LifeCycleStyle = other.LifeCycleStyle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MechanismID = input.ReadInt32();
            break;
          }
          case 16: {
            IsAdd = input.ReadBool();
            break;
          }
          case 24: {
            UseSkillLevel = input.ReadBool();
            break;
          }
          case 32: {
            DeleteWhenChangeSkill = input.ReadBool();
            break;
          }
          case 40: {
            DeleteWhenChangeAction = input.ReadBool();
            break;
          }
          case 48: {
            LifeCycleStyle = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FrameTag : pb::IMessage<FrameTag> {
    private static readonly pb::MessageParser<FrameTag> _parser = new pb::MessageParser<FrameTag>(() => new FrameTag());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FrameTag> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[82]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameTag() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameTag(FrameTag other) : this() {
      frameNum_ = other.frameNum_;
      key_ = other.key_;
      frameTagInfo_ = other.frameTagInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameTag Clone() {
      return new FrameTag(this);
    }

    /// <summary>Field number for the "FrameNum" field.</summary>
    public const int FrameNumFieldNumber = 1;
    private int frameNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrameNum {
      get { return frameNum_; }
      set {
        frameNum_ = value;
      }
    }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 2;
    private int key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "FrameTagInfo" field.</summary>
    public const int FrameTagInfoFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Pbe.FrameTagInfo> _repeated_frameTagInfo_codec
        = pb::FieldCodec.ForMessage(26, global::Pbe.FrameTagInfo.Parser);
    private readonly pbc::RepeatedField<global::Pbe.FrameTagInfo> frameTagInfo_ = new pbc::RepeatedField<global::Pbe.FrameTagInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.FrameTagInfo> FrameTagInfo {
      get { return frameTagInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FrameTag);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FrameTag other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FrameNum != other.FrameNum) return false;
      if (Key != other.Key) return false;
      if(!frameTagInfo_.Equals(other.frameTagInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FrameNum != 0) hash ^= FrameNum.GetHashCode();
      if (Key != 0) hash ^= Key.GetHashCode();
      hash ^= frameTagInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FrameNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FrameNum);
      }
      if (Key != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Key);
      }
      frameTagInfo_.WriteTo(output, _repeated_frameTagInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FrameNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameNum);
      }
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key);
      }
      size += frameTagInfo_.CalculateSize(_repeated_frameTagInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FrameTag other) {
      if (other == null) {
        return;
      }
      if (other.FrameNum != 0) {
        FrameNum = other.FrameNum;
      }
      if (other.Key != 0) {
        Key = other.Key;
      }
      frameTagInfo_.Add(other.frameTagInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FrameNum = input.ReadInt32();
            break;
          }
          case 16: {
            Key = input.ReadInt32();
            break;
          }
          case 26: {
            frameTagInfo_.AddEntriesFrom(input, _repeated_frameTagInfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FrameTagInfo : pb::IMessage<FrameTagInfo> {
    private static readonly pb::MessageParser<FrameTagInfo> _parser = new pb::MessageParser<FrameTagInfo>(() => new FrameTagInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FrameTagInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[83]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameTagInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameTagInfo(FrameTagInfo other) : this() {
      tagID_ = other.tagID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameTagInfo Clone() {
      return new FrameTagInfo(this);
    }

    /// <summary>Field number for the "TagID" field.</summary>
    public const int TagIDFieldNumber = 1;
    private int tagID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TagID {
      get { return tagID_; }
      set {
        tagID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FrameTagInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FrameTagInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TagID != other.TagID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TagID != 0) hash ^= TagID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TagID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TagID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TagID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TagID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FrameTagInfo other) {
      if (other == null) {
        return;
      }
      if (other.TagID != 0) {
        TagID = other.TagID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TagID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EffectStatePrefabConfig : pb::IMessage<EffectStatePrefabConfig> {
    private static readonly pb::MessageParser<EffectStatePrefabConfig> _parser = new pb::MessageParser<EffectStatePrefabConfig>(() => new EffectStatePrefabConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EffectStatePrefabConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[84]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectStatePrefabConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectStatePrefabConfig(EffectStatePrefabConfig other) : this() {
      key_ = other.key_;
      name_ = other.name_;
      states_ = other.states_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectStatePrefabConfig Clone() {
      return new EffectStatePrefabConfig(this);
    }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 1;
    private int key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "States" field.</summary>
    public const int StatesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Pbe.EffectStateItem> _repeated_states_codec
        = pb::FieldCodec.ForMessage(26, global::Pbe.EffectStateItem.Parser);
    private readonly pbc::RepeatedField<global::Pbe.EffectStateItem> states_ = new pbc::RepeatedField<global::Pbe.EffectStateItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.EffectStateItem> States {
      get { return states_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EffectStatePrefabConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EffectStatePrefabConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Name != other.Name) return false;
      if(!states_.Equals(other.states_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key != 0) hash ^= Key.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= states_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Key);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      states_.WriteTo(output, _repeated_states_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += states_.CalculateSize(_repeated_states_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EffectStatePrefabConfig other) {
      if (other == null) {
        return;
      }
      if (other.Key != 0) {
        Key = other.Key;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      states_.Add(other.states_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Key = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            states_.AddEntriesFrom(input, _repeated_states_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EffectStateItem : pb::IMessage<EffectStateItem> {
    private static readonly pb::MessageParser<EffectStateItem> _parser = new pb::MessageParser<EffectStateItem>(() => new EffectStateItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EffectStateItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[85]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectStateItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectStateItem(EffectStateItem other) : this() {
      respath_ = other.respath_;
      clipName_ = other.clipName_;
      resType_ = other.resType_;
      stateIndex_ = other.stateIndex_;
      skillId_ = other.skillId_;
      effectId_ = other.effectId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectStateItem Clone() {
      return new EffectStateItem(this);
    }

    /// <summary>Field number for the "Respath" field.</summary>
    public const int RespathFieldNumber = 1;
    private string respath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Respath {
      get { return respath_; }
      set {
        respath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ClipName" field.</summary>
    public const int ClipNameFieldNumber = 2;
    private string clipName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClipName {
      get { return clipName_; }
      set {
        clipName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ResType" field.</summary>
    public const int ResTypeFieldNumber = 3;
    private global::Pbe.ResType resType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.ResType ResType {
      get { return resType_; }
      set {
        resType_ = value;
      }
    }

    /// <summary>Field number for the "StateIndex" field.</summary>
    public const int StateIndexFieldNumber = 4;
    private int stateIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StateIndex {
      get { return stateIndex_; }
      set {
        stateIndex_ = value;
      }
    }

    /// <summary>Field number for the "SkillId" field.</summary>
    public const int SkillIdFieldNumber = 5;
    private int skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "EffectId" field.</summary>
    public const int EffectIdFieldNumber = 6;
    private int effectId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EffectId {
      get { return effectId_; }
      set {
        effectId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EffectStateItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EffectStateItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Respath != other.Respath) return false;
      if (ClipName != other.ClipName) return false;
      if (ResType != other.ResType) return false;
      if (StateIndex != other.StateIndex) return false;
      if (SkillId != other.SkillId) return false;
      if (EffectId != other.EffectId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Respath.Length != 0) hash ^= Respath.GetHashCode();
      if (ClipName.Length != 0) hash ^= ClipName.GetHashCode();
      if (ResType != 0) hash ^= ResType.GetHashCode();
      if (StateIndex != 0) hash ^= StateIndex.GetHashCode();
      if (SkillId != 0) hash ^= SkillId.GetHashCode();
      if (EffectId != 0) hash ^= EffectId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Respath.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Respath);
      }
      if (ClipName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClipName);
      }
      if (ResType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ResType);
      }
      if (StateIndex != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(StateIndex);
      }
      if (SkillId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SkillId);
      }
      if (EffectId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(EffectId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Respath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Respath);
      }
      if (ClipName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClipName);
      }
      if (ResType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ResType);
      }
      if (StateIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StateIndex);
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      if (EffectId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EffectId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EffectStateItem other) {
      if (other == null) {
        return;
      }
      if (other.Respath.Length != 0) {
        Respath = other.Respath;
      }
      if (other.ClipName.Length != 0) {
        ClipName = other.ClipName;
      }
      if (other.ResType != 0) {
        ResType = other.ResType;
      }
      if (other.StateIndex != 0) {
        StateIndex = other.StateIndex;
      }
      if (other.SkillId != 0) {
        SkillId = other.SkillId;
      }
      if (other.EffectId != 0) {
        EffectId = other.EffectId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Respath = input.ReadString();
            break;
          }
          case 18: {
            ClipName = input.ReadString();
            break;
          }
          case 24: {
            resType_ = (global::Pbe.ResType) input.ReadEnum();
            break;
          }
          case 32: {
            StateIndex = input.ReadInt32();
            break;
          }
          case 40: {
            SkillId = input.ReadInt32();
            break;
          }
          case 48: {
            EffectId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 抓取信息
  /// </summary>
  public sealed partial class GrabInfoConfig : pb::IMessage<GrabInfoConfig> {
    private static readonly pb::MessageParser<GrabInfoConfig> _parser = new pb::MessageParser<GrabInfoConfig>(() => new GrabInfoConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GrabInfoConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[86]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrabInfoConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrabInfoConfig(GrabInfoConfig other) : this() {
      grabType_ = other.grabType_;
      hitForceX_ = other.hitForceX_;
      hitForceY_ = other.hitForceY_;
      hitForceZ_ = other.hitForceZ_;
      isImmChangeSkill_ = other.isImmChangeSkill_;
      changeSkillId_ = other.changeSkillId_;
      grabTracks_ = other.grabTracks_.Clone();
      isHitForce_ = other.isHitForce_;
      maxGrabTargetNumber_ = other.maxGrabTargetNumber_;
      changeGrabDefLevel_ = other.changeGrabDefLevel_;
      grabLevel_ = other.grabLevel_;
      beHitName_ = other.beHitName_;
      commonGrabSkillId_ = other.commonGrabSkillId_;
      commonGrabFrame_ = other.commonGrabFrame_;
      commonHitSkillType_ = other.commonHitSkillType_;
      bindPos_ = other.bindPos_ != null ? other.bindPos_.Clone() : null;
      besierParmter_ = other.besierParmter_ != null ? other.besierParmter_.Clone() : null;
      rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
      hurtLoop_ = other.hurtLoop_;
      generateEntityId_ = other.generateEntityId_;
      ignoreViewInterpolation_ = other.ignoreViewInterpolation_;
      grabClip_ = other.grabClip_;
      selfBuffInfo_ = other.selfBuffInfo_;
      clearMyBuff_ = other.clearMyBuff_;
      targetBuffInfo_ = other.targetBuffInfo_;
      clearTargetBuff_ = other.clearTargetBuff_;
      generateEntityType_ = other.generateEntityType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrabInfoConfig Clone() {
      return new GrabInfoConfig(this);
    }

    /// <summary>Field number for the "GrabType" field.</summary>
    public const int GrabTypeFieldNumber = 1;
    private global::Pbe.EnumGrabType grabType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.EnumGrabType GrabType {
      get { return grabType_; }
      set {
        grabType_ = value;
      }
    }

    /// <summary>Field number for the "HitForceX" field.</summary>
    public const int HitForceXFieldNumber = 2;
    private int hitForceX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitForceX {
      get { return hitForceX_; }
      set {
        hitForceX_ = value;
      }
    }

    /// <summary>Field number for the "HitForceY" field.</summary>
    public const int HitForceYFieldNumber = 3;
    private int hitForceY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitForceY {
      get { return hitForceY_; }
      set {
        hitForceY_ = value;
      }
    }

    /// <summary>Field number for the "HitForceZ" field.</summary>
    public const int HitForceZFieldNumber = 4;
    private int hitForceZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitForceZ {
      get { return hitForceZ_; }
      set {
        hitForceZ_ = value;
      }
    }

    /// <summary>Field number for the "IsImmChangeSkill" field.</summary>
    public const int IsImmChangeSkillFieldNumber = 5;
    private bool isImmChangeSkill_;
    /// <summary>
    /// 立即切换技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsImmChangeSkill {
      get { return isImmChangeSkill_; }
      set {
        isImmChangeSkill_ = value;
      }
    }

    /// <summary>Field number for the "ChangeSkillId" field.</summary>
    public const int ChangeSkillIdFieldNumber = 6;
    private int changeSkillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChangeSkillId {
      get { return changeSkillId_; }
      set {
        changeSkillId_ = value;
      }
    }

    /// <summary>Field number for the "GrabTracks" field.</summary>
    public const int GrabTracksFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Pbe.GrabTrack> _repeated_grabTracks_codec
        = pb::FieldCodec.ForMessage(58, global::Pbe.GrabTrack.Parser);
    private readonly pbc::RepeatedField<global::Pbe.GrabTrack> grabTracks_ = new pbc::RepeatedField<global::Pbe.GrabTrack>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.GrabTrack> GrabTracks {
      get { return grabTracks_; }
    }

    /// <summary>Field number for the "IsHitForce" field.</summary>
    public const int IsHitForceFieldNumber = 8;
    private bool isHitForce_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHitForce {
      get { return isHitForce_; }
      set {
        isHitForce_ = value;
      }
    }

    /// <summary>Field number for the "MaxGrabTargetNumber" field.</summary>
    public const int MaxGrabTargetNumberFieldNumber = 9;
    private int maxGrabTargetNumber_;
    /// <summary>
    ///抓取最大数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxGrabTargetNumber {
      get { return maxGrabTargetNumber_; }
      set {
        maxGrabTargetNumber_ = value;
      }
    }

    /// <summary>Field number for the "ChangeGrabDefLevel" field.</summary>
    public const int ChangeGrabDefLevelFieldNumber = 10;
    private int changeGrabDefLevel_;
    /// <summary>
    ///修改抓取防御等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChangeGrabDefLevel {
      get { return changeGrabDefLevel_; }
      set {
        changeGrabDefLevel_ = value;
      }
    }

    /// <summary>Field number for the "GrabLevel" field.</summary>
    public const int GrabLevelFieldNumber = 11;
    private int grabLevel_;
    /// <summary>
    ///抓取等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GrabLevel {
      get { return grabLevel_; }
      set {
        grabLevel_ = value;
      }
    }

    /// <summary>Field number for the "BeHitName" field.</summary>
    public const int BeHitNameFieldNumber = 12;
    private int beHitName_;
    /// <summary>
    ///受击动作
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BeHitName {
      get { return beHitName_; }
      set {
        beHitName_ = value;
      }
    }

    /// <summary>Field number for the "CommonGrabSkillId" field.</summary>
    public const int CommonGrabSkillIdFieldNumber = 13;
    private int commonGrabSkillId_;
    /// <summary>
    ///通用抓取id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CommonGrabSkillId {
      get { return commonGrabSkillId_; }
      set {
        commonGrabSkillId_ = value;
      }
    }

    /// <summary>Field number for the "CommonGrabFrame" field.</summary>
    public const int CommonGrabFrameFieldNumber = 14;
    private int commonGrabFrame_;
    /// <summary>
    ///通用抓取帧数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CommonGrabFrame {
      get { return commonGrabFrame_; }
      set {
        commonGrabFrame_ = value;
      }
    }

    /// <summary>Field number for the "CommonHitSkillType" field.</summary>
    public const int CommonHitSkillTypeFieldNumber = 15;
    private int commonHitSkillType_;
    /// <summary>
    ///通用受击动作
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CommonHitSkillType {
      get { return commonHitSkillType_; }
      set {
        commonHitSkillType_ = value;
      }
    }

    /// <summary>Field number for the "BindPos" field.</summary>
    public const int BindPosFieldNumber = 16;
    private global::Pbe.TrackPos bindPos_;
    /// <summary>
    /// 绑点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.TrackPos BindPos {
      get { return bindPos_; }
      set {
        bindPos_ = value;
      }
    }

    /// <summary>Field number for the "BesierParmter" field.</summary>
    public const int BesierParmterFieldNumber = 17;
    private global::Pbe.Vec3 besierParmter_;
    /// <summary>
    ///曲线参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.Vec3 BesierParmter {
      get { return besierParmter_; }
      set {
        besierParmter_ = value;
      }
    }

    /// <summary>Field number for the "Rotation" field.</summary>
    public const int RotationFieldNumber = 18;
    private global::Pbe.Vec3 rotation_;
    /// <summary>
    ///旋转
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.Vec3 Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    /// <summary>Field number for the "HurtLoop" field.</summary>
    public const int HurtLoopFieldNumber = 19;
    private bool hurtLoop_;
    /// <summary>
    ///受伤重复播放受伤动作
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HurtLoop {
      get { return hurtLoop_; }
      set {
        hurtLoop_ = value;
      }
    }

    /// <summary>Field number for the "GenerateEntityId" field.</summary>
    public const int GenerateEntityIdFieldNumber = 20;
    private int generateEntityId_;
    /// <summary>
    ///生成的entityId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GenerateEntityId {
      get { return generateEntityId_; }
      set {
        generateEntityId_ = value;
      }
    }

    /// <summary>Field number for the "IgnoreViewInterpolation" field.</summary>
    public const int IgnoreViewInterpolationFieldNumber = 21;
    private bool ignoreViewInterpolation_;
    /// <summary>
    ///忽略显示插值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IgnoreViewInterpolation {
      get { return ignoreViewInterpolation_; }
      set {
        ignoreViewInterpolation_ = value;
      }
    }

    /// <summary>Field number for the "GrabClip" field.</summary>
    public const int GrabClipFieldNumber = 22;
    private int grabClip_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GrabClip {
      get { return grabClip_; }
      set {
        grabClip_ = value;
      }
    }

    /// <summary>Field number for the "selfBuffInfo" field.</summary>
    public const int SelfBuffInfoFieldNumber = 23;
    private int selfBuffInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SelfBuffInfo {
      get { return selfBuffInfo_; }
      set {
        selfBuffInfo_ = value;
      }
    }

    /// <summary>Field number for the "clearMyBuff" field.</summary>
    public const int ClearMyBuffFieldNumber = 24;
    private bool clearMyBuff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ClearMyBuff {
      get { return clearMyBuff_; }
      set {
        clearMyBuff_ = value;
      }
    }

    /// <summary>Field number for the "targetBuffInfo" field.</summary>
    public const int TargetBuffInfoFieldNumber = 25;
    private int targetBuffInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetBuffInfo {
      get { return targetBuffInfo_; }
      set {
        targetBuffInfo_ = value;
      }
    }

    /// <summary>Field number for the "clearTargetBuff" field.</summary>
    public const int ClearTargetBuffFieldNumber = 26;
    private bool clearTargetBuff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ClearTargetBuff {
      get { return clearTargetBuff_; }
      set {
        clearTargetBuff_ = value;
      }
    }

    /// <summary>Field number for the "GenerateEntityType" field.</summary>
    public const int GenerateEntityTypeFieldNumber = 27;
    private int generateEntityType_;
    /// <summary>
    ///生成实体类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GenerateEntityType {
      get { return generateEntityType_; }
      set {
        generateEntityType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GrabInfoConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GrabInfoConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GrabType != other.GrabType) return false;
      if (HitForceX != other.HitForceX) return false;
      if (HitForceY != other.HitForceY) return false;
      if (HitForceZ != other.HitForceZ) return false;
      if (IsImmChangeSkill != other.IsImmChangeSkill) return false;
      if (ChangeSkillId != other.ChangeSkillId) return false;
      if(!grabTracks_.Equals(other.grabTracks_)) return false;
      if (IsHitForce != other.IsHitForce) return false;
      if (MaxGrabTargetNumber != other.MaxGrabTargetNumber) return false;
      if (ChangeGrabDefLevel != other.ChangeGrabDefLevel) return false;
      if (GrabLevel != other.GrabLevel) return false;
      if (BeHitName != other.BeHitName) return false;
      if (CommonGrabSkillId != other.CommonGrabSkillId) return false;
      if (CommonGrabFrame != other.CommonGrabFrame) return false;
      if (CommonHitSkillType != other.CommonHitSkillType) return false;
      if (!object.Equals(BindPos, other.BindPos)) return false;
      if (!object.Equals(BesierParmter, other.BesierParmter)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      if (HurtLoop != other.HurtLoop) return false;
      if (GenerateEntityId != other.GenerateEntityId) return false;
      if (IgnoreViewInterpolation != other.IgnoreViewInterpolation) return false;
      if (GrabClip != other.GrabClip) return false;
      if (SelfBuffInfo != other.SelfBuffInfo) return false;
      if (ClearMyBuff != other.ClearMyBuff) return false;
      if (TargetBuffInfo != other.TargetBuffInfo) return false;
      if (ClearTargetBuff != other.ClearTargetBuff) return false;
      if (GenerateEntityType != other.GenerateEntityType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GrabType != 0) hash ^= GrabType.GetHashCode();
      if (HitForceX != 0) hash ^= HitForceX.GetHashCode();
      if (HitForceY != 0) hash ^= HitForceY.GetHashCode();
      if (HitForceZ != 0) hash ^= HitForceZ.GetHashCode();
      if (IsImmChangeSkill != false) hash ^= IsImmChangeSkill.GetHashCode();
      if (ChangeSkillId != 0) hash ^= ChangeSkillId.GetHashCode();
      hash ^= grabTracks_.GetHashCode();
      if (IsHitForce != false) hash ^= IsHitForce.GetHashCode();
      if (MaxGrabTargetNumber != 0) hash ^= MaxGrabTargetNumber.GetHashCode();
      if (ChangeGrabDefLevel != 0) hash ^= ChangeGrabDefLevel.GetHashCode();
      if (GrabLevel != 0) hash ^= GrabLevel.GetHashCode();
      if (BeHitName != 0) hash ^= BeHitName.GetHashCode();
      if (CommonGrabSkillId != 0) hash ^= CommonGrabSkillId.GetHashCode();
      if (CommonGrabFrame != 0) hash ^= CommonGrabFrame.GetHashCode();
      if (CommonHitSkillType != 0) hash ^= CommonHitSkillType.GetHashCode();
      if (bindPos_ != null) hash ^= BindPos.GetHashCode();
      if (besierParmter_ != null) hash ^= BesierParmter.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (HurtLoop != false) hash ^= HurtLoop.GetHashCode();
      if (GenerateEntityId != 0) hash ^= GenerateEntityId.GetHashCode();
      if (IgnoreViewInterpolation != false) hash ^= IgnoreViewInterpolation.GetHashCode();
      if (GrabClip != 0) hash ^= GrabClip.GetHashCode();
      if (SelfBuffInfo != 0) hash ^= SelfBuffInfo.GetHashCode();
      if (ClearMyBuff != false) hash ^= ClearMyBuff.GetHashCode();
      if (TargetBuffInfo != 0) hash ^= TargetBuffInfo.GetHashCode();
      if (ClearTargetBuff != false) hash ^= ClearTargetBuff.GetHashCode();
      if (GenerateEntityType != 0) hash ^= GenerateEntityType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GrabType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) GrabType);
      }
      if (HitForceX != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HitForceX);
      }
      if (HitForceY != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HitForceY);
      }
      if (HitForceZ != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(HitForceZ);
      }
      if (IsImmChangeSkill != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsImmChangeSkill);
      }
      if (ChangeSkillId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ChangeSkillId);
      }
      grabTracks_.WriteTo(output, _repeated_grabTracks_codec);
      if (IsHitForce != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsHitForce);
      }
      if (MaxGrabTargetNumber != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MaxGrabTargetNumber);
      }
      if (ChangeGrabDefLevel != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(ChangeGrabDefLevel);
      }
      if (GrabLevel != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(GrabLevel);
      }
      if (BeHitName != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(BeHitName);
      }
      if (CommonGrabSkillId != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(CommonGrabSkillId);
      }
      if (CommonGrabFrame != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(CommonGrabFrame);
      }
      if (CommonHitSkillType != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(CommonHitSkillType);
      }
      if (bindPos_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(BindPos);
      }
      if (besierParmter_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(BesierParmter);
      }
      if (rotation_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(Rotation);
      }
      if (HurtLoop != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(HurtLoop);
      }
      if (GenerateEntityId != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(GenerateEntityId);
      }
      if (IgnoreViewInterpolation != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(IgnoreViewInterpolation);
      }
      if (GrabClip != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(GrabClip);
      }
      if (SelfBuffInfo != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(SelfBuffInfo);
      }
      if (ClearMyBuff != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(ClearMyBuff);
      }
      if (TargetBuffInfo != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(TargetBuffInfo);
      }
      if (ClearTargetBuff != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(ClearTargetBuff);
      }
      if (GenerateEntityType != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(GenerateEntityType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GrabType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GrabType);
      }
      if (HitForceX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitForceX);
      }
      if (HitForceY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitForceY);
      }
      if (HitForceZ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitForceZ);
      }
      if (IsImmChangeSkill != false) {
        size += 1 + 1;
      }
      if (ChangeSkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChangeSkillId);
      }
      size += grabTracks_.CalculateSize(_repeated_grabTracks_codec);
      if (IsHitForce != false) {
        size += 1 + 1;
      }
      if (MaxGrabTargetNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxGrabTargetNumber);
      }
      if (ChangeGrabDefLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChangeGrabDefLevel);
      }
      if (GrabLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GrabLevel);
      }
      if (BeHitName != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BeHitName);
      }
      if (CommonGrabSkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CommonGrabSkillId);
      }
      if (CommonGrabFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CommonGrabFrame);
      }
      if (CommonHitSkillType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CommonHitSkillType);
      }
      if (bindPos_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BindPos);
      }
      if (besierParmter_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BesierParmter);
      }
      if (rotation_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (HurtLoop != false) {
        size += 2 + 1;
      }
      if (GenerateEntityId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GenerateEntityId);
      }
      if (IgnoreViewInterpolation != false) {
        size += 2 + 1;
      }
      if (GrabClip != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GrabClip);
      }
      if (SelfBuffInfo != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SelfBuffInfo);
      }
      if (ClearMyBuff != false) {
        size += 2 + 1;
      }
      if (TargetBuffInfo != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TargetBuffInfo);
      }
      if (ClearTargetBuff != false) {
        size += 2 + 1;
      }
      if (GenerateEntityType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GenerateEntityType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GrabInfoConfig other) {
      if (other == null) {
        return;
      }
      if (other.GrabType != 0) {
        GrabType = other.GrabType;
      }
      if (other.HitForceX != 0) {
        HitForceX = other.HitForceX;
      }
      if (other.HitForceY != 0) {
        HitForceY = other.HitForceY;
      }
      if (other.HitForceZ != 0) {
        HitForceZ = other.HitForceZ;
      }
      if (other.IsImmChangeSkill != false) {
        IsImmChangeSkill = other.IsImmChangeSkill;
      }
      if (other.ChangeSkillId != 0) {
        ChangeSkillId = other.ChangeSkillId;
      }
      grabTracks_.Add(other.grabTracks_);
      if (other.IsHitForce != false) {
        IsHitForce = other.IsHitForce;
      }
      if (other.MaxGrabTargetNumber != 0) {
        MaxGrabTargetNumber = other.MaxGrabTargetNumber;
      }
      if (other.ChangeGrabDefLevel != 0) {
        ChangeGrabDefLevel = other.ChangeGrabDefLevel;
      }
      if (other.GrabLevel != 0) {
        GrabLevel = other.GrabLevel;
      }
      if (other.BeHitName != 0) {
        BeHitName = other.BeHitName;
      }
      if (other.CommonGrabSkillId != 0) {
        CommonGrabSkillId = other.CommonGrabSkillId;
      }
      if (other.CommonGrabFrame != 0) {
        CommonGrabFrame = other.CommonGrabFrame;
      }
      if (other.CommonHitSkillType != 0) {
        CommonHitSkillType = other.CommonHitSkillType;
      }
      if (other.bindPos_ != null) {
        if (bindPos_ == null) {
          bindPos_ = new global::Pbe.TrackPos();
        }
        BindPos.MergeFrom(other.BindPos);
      }
      if (other.besierParmter_ != null) {
        if (besierParmter_ == null) {
          besierParmter_ = new global::Pbe.Vec3();
        }
        BesierParmter.MergeFrom(other.BesierParmter);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          rotation_ = new global::Pbe.Vec3();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      if (other.HurtLoop != false) {
        HurtLoop = other.HurtLoop;
      }
      if (other.GenerateEntityId != 0) {
        GenerateEntityId = other.GenerateEntityId;
      }
      if (other.IgnoreViewInterpolation != false) {
        IgnoreViewInterpolation = other.IgnoreViewInterpolation;
      }
      if (other.GrabClip != 0) {
        GrabClip = other.GrabClip;
      }
      if (other.SelfBuffInfo != 0) {
        SelfBuffInfo = other.SelfBuffInfo;
      }
      if (other.ClearMyBuff != false) {
        ClearMyBuff = other.ClearMyBuff;
      }
      if (other.TargetBuffInfo != 0) {
        TargetBuffInfo = other.TargetBuffInfo;
      }
      if (other.ClearTargetBuff != false) {
        ClearTargetBuff = other.ClearTargetBuff;
      }
      if (other.GenerateEntityType != 0) {
        GenerateEntityType = other.GenerateEntityType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            grabType_ = (global::Pbe.EnumGrabType) input.ReadEnum();
            break;
          }
          case 16: {
            HitForceX = input.ReadInt32();
            break;
          }
          case 24: {
            HitForceY = input.ReadInt32();
            break;
          }
          case 32: {
            HitForceZ = input.ReadInt32();
            break;
          }
          case 40: {
            IsImmChangeSkill = input.ReadBool();
            break;
          }
          case 48: {
            ChangeSkillId = input.ReadInt32();
            break;
          }
          case 58: {
            grabTracks_.AddEntriesFrom(input, _repeated_grabTracks_codec);
            break;
          }
          case 64: {
            IsHitForce = input.ReadBool();
            break;
          }
          case 72: {
            MaxGrabTargetNumber = input.ReadInt32();
            break;
          }
          case 80: {
            ChangeGrabDefLevel = input.ReadInt32();
            break;
          }
          case 88: {
            GrabLevel = input.ReadInt32();
            break;
          }
          case 96: {
            BeHitName = input.ReadInt32();
            break;
          }
          case 104: {
            CommonGrabSkillId = input.ReadInt32();
            break;
          }
          case 112: {
            CommonGrabFrame = input.ReadInt32();
            break;
          }
          case 120: {
            CommonHitSkillType = input.ReadInt32();
            break;
          }
          case 130: {
            if (bindPos_ == null) {
              bindPos_ = new global::Pbe.TrackPos();
            }
            input.ReadMessage(bindPos_);
            break;
          }
          case 138: {
            if (besierParmter_ == null) {
              besierParmter_ = new global::Pbe.Vec3();
            }
            input.ReadMessage(besierParmter_);
            break;
          }
          case 146: {
            if (rotation_ == null) {
              rotation_ = new global::Pbe.Vec3();
            }
            input.ReadMessage(rotation_);
            break;
          }
          case 152: {
            HurtLoop = input.ReadBool();
            break;
          }
          case 160: {
            GenerateEntityId = input.ReadInt32();
            break;
          }
          case 168: {
            IgnoreViewInterpolation = input.ReadBool();
            break;
          }
          case 176: {
            GrabClip = input.ReadInt32();
            break;
          }
          case 184: {
            SelfBuffInfo = input.ReadInt32();
            break;
          }
          case 192: {
            ClearMyBuff = input.ReadBool();
            break;
          }
          case 200: {
            TargetBuffInfo = input.ReadInt32();
            break;
          }
          case 208: {
            ClearTargetBuff = input.ReadBool();
            break;
          }
          case 216: {
            GenerateEntityType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///抓取曲线
  /// </summary>
  public sealed partial class GrabTrack : pb::IMessage<GrabTrack> {
    private static readonly pb::MessageParser<GrabTrack> _parser = new pb::MessageParser<GrabTrack>(() => new GrabTrack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GrabTrack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[87]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrabTrack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrabTrack(GrabTrack other) : this() {
      starFrame_ = other.starFrame_;
      totalFrame_ = other.totalFrame_;
      offSetPos_ = other.offSetPos_ != null ? other.offSetPos_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrabTrack Clone() {
      return new GrabTrack(this);
    }

    /// <summary>Field number for the "StarFrame" field.</summary>
    public const int StarFrameFieldNumber = 1;
    private int starFrame_;
    /// <summary>
    ///开始帧
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StarFrame {
      get { return starFrame_; }
      set {
        starFrame_ = value;
      }
    }

    /// <summary>Field number for the "TotalFrame" field.</summary>
    public const int TotalFrameFieldNumber = 2;
    private int totalFrame_;
    /// <summary>
    ///移动时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalFrame {
      get { return totalFrame_; }
      set {
        totalFrame_ = value;
      }
    }

    /// <summary>Field number for the "OffSetPos" field.</summary>
    public const int OffSetPosFieldNumber = 3;
    private global::Pbe.Vec3 offSetPos_;
    /// <summary>
    ///偏移位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.Vec3 OffSetPos {
      get { return offSetPos_; }
      set {
        offSetPos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GrabTrack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GrabTrack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StarFrame != other.StarFrame) return false;
      if (TotalFrame != other.TotalFrame) return false;
      if (!object.Equals(OffSetPos, other.OffSetPos)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StarFrame != 0) hash ^= StarFrame.GetHashCode();
      if (TotalFrame != 0) hash ^= TotalFrame.GetHashCode();
      if (offSetPos_ != null) hash ^= OffSetPos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StarFrame != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StarFrame);
      }
      if (TotalFrame != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TotalFrame);
      }
      if (offSetPos_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(OffSetPos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StarFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StarFrame);
      }
      if (TotalFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalFrame);
      }
      if (offSetPos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OffSetPos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GrabTrack other) {
      if (other == null) {
        return;
      }
      if (other.StarFrame != 0) {
        StarFrame = other.StarFrame;
      }
      if (other.TotalFrame != 0) {
        TotalFrame = other.TotalFrame;
      }
      if (other.offSetPos_ != null) {
        if (offSetPos_ == null) {
          offSetPos_ = new global::Pbe.Vec3();
        }
        OffSetPos.MergeFrom(other.OffSetPos);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StarFrame = input.ReadInt32();
            break;
          }
          case 16: {
            TotalFrame = input.ReadInt32();
            break;
          }
          case 26: {
            if (offSetPos_ == null) {
              offSetPos_ = new global::Pbe.Vec3();
            }
            input.ReadMessage(offSetPos_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 抓取事件
  /// </summary>
  public sealed partial class GrabEventConfig : pb::IMessage<GrabEventConfig> {
    private static readonly pb::MessageParser<GrabEventConfig> _parser = new pb::MessageParser<GrabEventConfig>(() => new GrabEventConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GrabEventConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[88]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrabEventConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrabEventConfig(GrabEventConfig other) : this() {
      key_ = other.key_;
      state_ = other.state_;
      changeSkillId_ = other.changeSkillId_;
      judgeFrame_ = other.judgeFrame_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrabEventConfig Clone() {
      return new GrabEventConfig(this);
    }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 1;
    private int key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "State" field.</summary>
    public const int StateFieldNumber = 2;
    private global::Pbe.EnumGrabEvent state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.EnumGrabEvent State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "ChangeSkillId" field.</summary>
    public const int ChangeSkillIdFieldNumber = 3;
    private int changeSkillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChangeSkillId {
      get { return changeSkillId_; }
      set {
        changeSkillId_ = value;
      }
    }

    /// <summary>Field number for the "JudgeFrame" field.</summary>
    public const int JudgeFrameFieldNumber = 4;
    private int judgeFrame_;
    /// <summary>
    /// 判定时长
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JudgeFrame {
      get { return judgeFrame_; }
      set {
        judgeFrame_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GrabEventConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GrabEventConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (State != other.State) return false;
      if (ChangeSkillId != other.ChangeSkillId) return false;
      if (JudgeFrame != other.JudgeFrame) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key != 0) hash ^= Key.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (ChangeSkillId != 0) hash ^= ChangeSkillId.GetHashCode();
      if (JudgeFrame != 0) hash ^= JudgeFrame.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Key);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) State);
      }
      if (ChangeSkillId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ChangeSkillId);
      }
      if (JudgeFrame != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(JudgeFrame);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (ChangeSkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChangeSkillId);
      }
      if (JudgeFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JudgeFrame);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GrabEventConfig other) {
      if (other == null) {
        return;
      }
      if (other.Key != 0) {
        Key = other.Key;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.ChangeSkillId != 0) {
        ChangeSkillId = other.ChangeSkillId;
      }
      if (other.JudgeFrame != 0) {
        JudgeFrame = other.JudgeFrame;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Key = input.ReadInt32();
            break;
          }
          case 16: {
            state_ = (global::Pbe.EnumGrabEvent) input.ReadEnum();
            break;
          }
          case 24: {
            ChangeSkillId = input.ReadInt32();
            break;
          }
          case 32: {
            JudgeFrame = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AITreeNode : pb::IMessage<AITreeNode> {
    private static readonly pb::MessageParser<AITreeNode> _parser = new pb::MessageParser<AITreeNode>(() => new AITreeNode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AITreeNode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[89]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AITreeNode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AITreeNode(AITreeNode other) : this() {
      nodeID_ = other.nodeID_;
      nodeType_ = other.nodeType_;
      switch (other.LeafCase) {
        case LeafOneofCase.Task:
          Task = other.Task.Clone();
          break;
        case LeafOneofCase.Deco:
          Deco = other.Deco.Clone();
          break;
      }

      switch (other.ConfigCase) {
        case ConfigOneofCase.ProbabilitySelectorConfig:
          ProbabilitySelectorConfig = other.ProbabilitySelectorConfig.Clone();
          break;
        case ConfigOneofCase.ParallelConfig:
          ParallelConfig = other.ParallelConfig.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AITreeNode Clone() {
      return new AITreeNode(this);
    }

    /// <summary>Field number for the "nodeID" field.</summary>
    public const int NodeIDFieldNumber = 1;
    private int nodeID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NodeID {
      get { return nodeID_; }
      set {
        nodeID_ = value;
      }
    }

    /// <summary>Field number for the "nodeType" field.</summary>
    public const int NodeTypeFieldNumber = 2;
    private int nodeType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NodeType {
      get { return nodeType_; }
      set {
        nodeType_ = value;
      }
    }

    /// <summary>Field number for the "task" field.</summary>
    public const int TaskFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AITask Task {
      get { return leafCase_ == LeafOneofCase.Task ? (global::Pbe.AITask) leaf_ : null; }
      set {
        leaf_ = value;
        leafCase_ = value == null ? LeafOneofCase.None : LeafOneofCase.Task;
      }
    }

    /// <summary>Field number for the "deco" field.</summary>
    public const int DecoFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIDecorator Deco {
      get { return leafCase_ == LeafOneofCase.Deco ? (global::Pbe.AIDecorator) leaf_ : null; }
      set {
        leaf_ = value;
        leafCase_ = value == null ? LeafOneofCase.None : LeafOneofCase.Deco;
      }
    }

    /// <summary>Field number for the "probabilitySelectorConfig" field.</summary>
    public const int ProbabilitySelectorConfigFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIProbabilitySelectorConfig ProbabilitySelectorConfig {
      get { return configCase_ == ConfigOneofCase.ProbabilitySelectorConfig ? (global::Pbe.AIProbabilitySelectorConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.ProbabilitySelectorConfig;
      }
    }

    /// <summary>Field number for the "parallelConfig" field.</summary>
    public const int ParallelConfigFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIParallelConfig ParallelConfig {
      get { return configCase_ == ConfigOneofCase.ParallelConfig ? (global::Pbe.AIParallelConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.ParallelConfig;
      }
    }

    private object leaf_;
    /// <summary>Enum of possible cases for the "leaf" oneof.</summary>
    public enum LeafOneofCase {
      None = 0,
      Task = 3,
      Deco = 4,
    }
    private LeafOneofCase leafCase_ = LeafOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeafOneofCase LeafCase {
      get { return leafCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLeaf() {
      leafCase_ = LeafOneofCase.None;
      leaf_ = null;
    }

    private object config_;
    /// <summary>Enum of possible cases for the "config" oneof.</summary>
    public enum ConfigOneofCase {
      None = 0,
      ProbabilitySelectorConfig = 6,
      ParallelConfig = 7,
    }
    private ConfigOneofCase configCase_ = ConfigOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigOneofCase ConfigCase {
      get { return configCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConfig() {
      configCase_ = ConfigOneofCase.None;
      config_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AITreeNode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AITreeNode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeID != other.NodeID) return false;
      if (NodeType != other.NodeType) return false;
      if (!object.Equals(Task, other.Task)) return false;
      if (!object.Equals(Deco, other.Deco)) return false;
      if (!object.Equals(ProbabilitySelectorConfig, other.ProbabilitySelectorConfig)) return false;
      if (!object.Equals(ParallelConfig, other.ParallelConfig)) return false;
      if (LeafCase != other.LeafCase) return false;
      if (ConfigCase != other.ConfigCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeID != 0) hash ^= NodeID.GetHashCode();
      if (NodeType != 0) hash ^= NodeType.GetHashCode();
      if (leafCase_ == LeafOneofCase.Task) hash ^= Task.GetHashCode();
      if (leafCase_ == LeafOneofCase.Deco) hash ^= Deco.GetHashCode();
      if (configCase_ == ConfigOneofCase.ProbabilitySelectorConfig) hash ^= ProbabilitySelectorConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.ParallelConfig) hash ^= ParallelConfig.GetHashCode();
      hash ^= (int) leafCase_;
      hash ^= (int) configCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NodeID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NodeID);
      }
      if (NodeType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NodeType);
      }
      if (leafCase_ == LeafOneofCase.Task) {
        output.WriteRawTag(26);
        output.WriteMessage(Task);
      }
      if (leafCase_ == LeafOneofCase.Deco) {
        output.WriteRawTag(34);
        output.WriteMessage(Deco);
      }
      if (configCase_ == ConfigOneofCase.ProbabilitySelectorConfig) {
        output.WriteRawTag(50);
        output.WriteMessage(ProbabilitySelectorConfig);
      }
      if (configCase_ == ConfigOneofCase.ParallelConfig) {
        output.WriteRawTag(58);
        output.WriteMessage(ParallelConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NodeID);
      }
      if (NodeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NodeType);
      }
      if (leafCase_ == LeafOneofCase.Task) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Task);
      }
      if (leafCase_ == LeafOneofCase.Deco) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deco);
      }
      if (configCase_ == ConfigOneofCase.ProbabilitySelectorConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProbabilitySelectorConfig);
      }
      if (configCase_ == ConfigOneofCase.ParallelConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ParallelConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AITreeNode other) {
      if (other == null) {
        return;
      }
      if (other.NodeID != 0) {
        NodeID = other.NodeID;
      }
      if (other.NodeType != 0) {
        NodeType = other.NodeType;
      }
      switch (other.LeafCase) {
        case LeafOneofCase.Task:
          if (Task == null) {
            Task = new global::Pbe.AITask();
          }
          Task.MergeFrom(other.Task);
          break;
        case LeafOneofCase.Deco:
          if (Deco == null) {
            Deco = new global::Pbe.AIDecorator();
          }
          Deco.MergeFrom(other.Deco);
          break;
      }

      switch (other.ConfigCase) {
        case ConfigOneofCase.ProbabilitySelectorConfig:
          if (ProbabilitySelectorConfig == null) {
            ProbabilitySelectorConfig = new global::Pbe.AIProbabilitySelectorConfig();
          }
          ProbabilitySelectorConfig.MergeFrom(other.ProbabilitySelectorConfig);
          break;
        case ConfigOneofCase.ParallelConfig:
          if (ParallelConfig == null) {
            ParallelConfig = new global::Pbe.AIParallelConfig();
          }
          ParallelConfig.MergeFrom(other.ParallelConfig);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NodeID = input.ReadInt32();
            break;
          }
          case 16: {
            NodeType = input.ReadInt32();
            break;
          }
          case 26: {
            global::Pbe.AITask subBuilder = new global::Pbe.AITask();
            if (leafCase_ == LeafOneofCase.Task) {
              subBuilder.MergeFrom(Task);
            }
            input.ReadMessage(subBuilder);
            Task = subBuilder;
            break;
          }
          case 34: {
            global::Pbe.AIDecorator subBuilder = new global::Pbe.AIDecorator();
            if (leafCase_ == LeafOneofCase.Deco) {
              subBuilder.MergeFrom(Deco);
            }
            input.ReadMessage(subBuilder);
            Deco = subBuilder;
            break;
          }
          case 50: {
            global::Pbe.AIProbabilitySelectorConfig subBuilder = new global::Pbe.AIProbabilitySelectorConfig();
            if (configCase_ == ConfigOneofCase.ProbabilitySelectorConfig) {
              subBuilder.MergeFrom(ProbabilitySelectorConfig);
            }
            input.ReadMessage(subBuilder);
            ProbabilitySelectorConfig = subBuilder;
            break;
          }
          case 58: {
            global::Pbe.AIParallelConfig subBuilder = new global::Pbe.AIParallelConfig();
            if (configCase_ == ConfigOneofCase.ParallelConfig) {
              subBuilder.MergeFrom(ParallelConfig);
            }
            input.ReadMessage(subBuilder);
            ParallelConfig = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class AITask : pb::IMessage<AITask> {
    private static readonly pb::MessageParser<AITask> _parser = new pb::MessageParser<AITask>(() => new AITask());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AITask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[90]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AITask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AITask(AITask other) : this() {
      detailType_ = other.detailType_;
      invert_ = other.invert_;
      switch (other.ConfigCase) {
        case ConfigOneofCase.ApproachConfig:
          ApproachConfig = other.ApproachConfig.Clone();
          break;
        case ConfigOneofCase.AttackConfig:
          AttackConfig = other.AttackConfig.Clone();
          break;
        case ConfigOneofCase.AwayTargetConfig:
          AwayTargetConfig = other.AwayTargetConfig.Clone();
          break;
        case ConfigOneofCase.CloseConfig:
          CloseConfig = other.CloseConfig.Clone();
          break;
        case ConfigOneofCase.CloseTargetConfig:
          CloseTargetConfig = other.CloseTargetConfig.Clone();
          break;
        case ConfigOneofCase.CycleCloseConfig:
          CycleCloseConfig = other.CycleCloseConfig.Clone();
          break;
        case ConfigOneofCase.IdleConfig:
          IdleConfig = other.IdleConfig.Clone();
          break;
        case ConfigOneofCase.WanderConfig:
          WanderConfig = other.WanderConfig.Clone();
          break;
        case ConfigOneofCase.ZigApproachConfig:
          ZigApproachConfig = other.ZigApproachConfig.Clone();
          break;
        case ConfigOneofCase.SetFaceConfig:
          SetFaceConfig = other.SetFaceConfig.Clone();
          break;
        case ConfigOneofCase.GetOwnerIDConfig:
          GetOwnerIDConfig = other.GetOwnerIDConfig.Clone();
          break;
        case ConfigOneofCase.GetTargetIDConfig:
          GetTargetIDConfig = other.GetTargetIDConfig.Clone();
          break;
        case ConfigOneofCase.DistanceXYConfig:
          DistanceXYConfig = other.DistanceXYConfig.Clone();
          break;
        case ConfigOneofCase.DistanceTargetConfig:
          DistanceTargetConfig = other.DistanceTargetConfig.Clone();
          break;
        case ConfigOneofCase.ExecuteTreeConfig:
          ExecuteTreeConfig = other.ExecuteTreeConfig.Clone();
          break;
        case ConfigOneofCase.WaitConfig:
          WaitConfig = other.WaitConfig.Clone();
          break;
        case ConfigOneofCase.SetBBIntegerConfig:
          SetBBIntegerConfig = other.SetBBIntegerConfig.Clone();
          break;
        case ConfigOneofCase.CheckBBIntegerConfig:
          CheckBBIntegerConfig = other.CheckBBIntegerConfig.Clone();
          break;
        case ConfigOneofCase.DoSkillConfig:
          DoSkillConfig = other.DoSkillConfig.Clone();
          break;
        case ConfigOneofCase.DoActionConfig:
          DoActionConfig = other.DoActionConfig.Clone();
          break;
        case ConfigOneofCase.AddBuffConfig:
          AddBuffConfig = other.AddBuffConfig.Clone();
          break;
        case ConfigOneofCase.AddBuffInfoConfig:
          AddBuffInfoConfig = other.AddBuffInfoConfig.Clone();
          break;
        case ConfigOneofCase.CheckHPConfig:
          CheckHPConfig = other.CheckHPConfig.Clone();
          break;
        case ConfigOneofCase.HasBuffConfig:
          HasBuffConfig = other.HasBuffConfig.Clone();
          break;
        case ConfigOneofCase.UsingSkillConfig:
          UsingSkillConfig = other.UsingSkillConfig.Clone();
          break;
        case ConfigOneofCase.CanUseSkillConfig:
          CanUseSkillConfig = other.CanUseSkillConfig.Clone();
          break;
        case ConfigOneofCase.BeConstraintConfig:
          BeConstraintConfig = other.BeConstraintConfig.Clone();
          break;
        case ConfigOneofCase.RemoveBuffConfig:
          RemoveBuffConfig = other.RemoveBuffConfig.Clone();
          break;
        case ConfigOneofCase.RemoveBuffInfoConfig:
          RemoveBuffInfoConfig = other.RemoveBuffInfoConfig.Clone();
          break;
        case ConfigOneofCase.MoveConfig:
          MoveConfig = other.MoveConfig.Clone();
          break;
        case ConfigOneofCase.GetUnitIDConfig:
          GetUnitIDConfig = other.GetUnitIDConfig.Clone();
          break;
        case ConfigOneofCase.GetRangedMonsterCountConfig:
          GetRangedMonsterCountConfig = other.GetRangedMonsterCountConfig.Clone();
          break;
        case ConfigOneofCase.LoafConfig:
          LoafConfig = other.LoafConfig.Clone();
          break;
        case ConfigOneofCase.SuicideConfig:
          SuicideConfig = other.SuicideConfig.Clone();
          break;
        case ConfigOneofCase.BubbleConfig:
          BubbleConfig = other.BubbleConfig.Clone();
          break;
        case ConfigOneofCase.BlackBarConfig:
          BlackBarConfig = other.BlackBarConfig.Clone();
          break;
        case ConfigOneofCase.GetPlayerUnitIDConfig:
          GetPlayerUnitIDConfig = other.GetPlayerUnitIDConfig.Clone();
          break;
        case ConfigOneofCase.FindBackapproachConfig:
          FindBackapproachConfig = other.FindBackapproachConfig.Clone();
          break;
        case ConfigOneofCase.BattleTipsConfig:
          BattleTipsConfig = other.BattleTipsConfig.Clone();
          break;
        case ConfigOneofCase.ScenarioConfig:
          ScenarioConfig = other.ScenarioConfig.Clone();
          break;
        case ConfigOneofCase.CheckUnitStateConfig:
          CheckUnitStateConfig = other.CheckUnitStateConfig.Clone();
          break;
        case ConfigOneofCase.ButtonStateConfig:
          ButtonStateConfig = other.ButtonStateConfig.Clone();
          break;
        case ConfigOneofCase.StartCameraOffsetConfig:
          StartCameraOffsetConfig = other.StartCameraOffsetConfig.Clone();
          break;
        case ConfigOneofCase.CameraResetConfig:
          CameraResetConfig = other.CameraResetConfig.Clone();
          break;
        case ConfigOneofCase.ElementDamageConfig:
          ElementDamageConfig = other.ElementDamageConfig.Clone();
          break;
        case ConfigOneofCase.SetPositionConfig:
          SetPositionConfig = other.SetPositionConfig.Clone();
          break;
        case ConfigOneofCase.GetMonsterUnitIDConfig:
          GetMonsterUnitIDConfig = other.GetMonsterUnitIDConfig.Clone();
          break;
        case ConfigOneofCase.AttackListConfig:
          AttackListConfig = other.AttackListConfig.Clone();
          break;
        case ConfigOneofCase.GetSectionDifConfig:
          GetSectionDifConfig = other.GetSectionDifConfig.Clone();
          break;
        case ConfigOneofCase.RemoveSceneItemConfig:
          RemoveSceneItemConfig = other.RemoveSceneItemConfig.Clone();
          break;
        case ConfigOneofCase.FullScreenMaskShowConfig:
          FullScreenMaskShowConfig = other.FullScreenMaskShowConfig.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AITask Clone() {
      return new AITask(this);
    }

    /// <summary>Field number for the "detailType" field.</summary>
    public const int DetailTypeFieldNumber = 1;
    private int detailType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DetailType {
      get { return detailType_; }
      set {
        detailType_ = value;
      }
    }

    /// <summary>Field number for the "invert" field.</summary>
    public const int InvertFieldNumber = 2;
    private bool invert_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Invert {
      get { return invert_; }
      set {
        invert_ = value;
      }
    }

    /// <summary>Field number for the "approachConfig" field.</summary>
    public const int ApproachConfigFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIActionDirectlyApproachConfig ApproachConfig {
      get { return configCase_ == ConfigOneofCase.ApproachConfig ? (global::Pbe.AIActionDirectlyApproachConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.ApproachConfig;
      }
    }

    /// <summary>Field number for the "attackConfig" field.</summary>
    public const int AttackConfigFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIActionAttackConfig AttackConfig {
      get { return configCase_ == ConfigOneofCase.AttackConfig ? (global::Pbe.AIActionAttackConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.AttackConfig;
      }
    }

    /// <summary>Field number for the "awayTargetConfig" field.</summary>
    public const int AwayTargetConfigFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIActionAwayTargetConfig AwayTargetConfig {
      get { return configCase_ == ConfigOneofCase.AwayTargetConfig ? (global::Pbe.AIActionAwayTargetConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.AwayTargetConfig;
      }
    }

    /// <summary>Field number for the "closeConfig" field.</summary>
    public const int CloseConfigFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIActionCloseConfig CloseConfig {
      get { return configCase_ == ConfigOneofCase.CloseConfig ? (global::Pbe.AIActionCloseConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.CloseConfig;
      }
    }

    /// <summary>Field number for the "closeTargetConfig" field.</summary>
    public const int CloseTargetConfigFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIActionCloseTargetConfig CloseTargetConfig {
      get { return configCase_ == ConfigOneofCase.CloseTargetConfig ? (global::Pbe.AIActionCloseTargetConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.CloseTargetConfig;
      }
    }

    /// <summary>Field number for the "cycleCloseConfig" field.</summary>
    public const int CycleCloseConfigFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIActionCycleCloseConfig CycleCloseConfig {
      get { return configCase_ == ConfigOneofCase.CycleCloseConfig ? (global::Pbe.AIActionCycleCloseConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.CycleCloseConfig;
      }
    }

    /// <summary>Field number for the "idleConfig" field.</summary>
    public const int IdleConfigFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIActionIdleConfig IdleConfig {
      get { return configCase_ == ConfigOneofCase.IdleConfig ? (global::Pbe.AIActionIdleConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.IdleConfig;
      }
    }

    /// <summary>Field number for the "wanderConfig" field.</summary>
    public const int WanderConfigFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIActionWanderConfig WanderConfig {
      get { return configCase_ == ConfigOneofCase.WanderConfig ? (global::Pbe.AIActionWanderConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.WanderConfig;
      }
    }

    /// <summary>Field number for the "zigApproachConfig" field.</summary>
    public const int ZigApproachConfigFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIActionZigApproachConfig ZigApproachConfig {
      get { return configCase_ == ConfigOneofCase.ZigApproachConfig ? (global::Pbe.AIActionZigApproachConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.ZigApproachConfig;
      }
    }

    /// <summary>Field number for the "setFaceConfig" field.</summary>
    public const int SetFaceConfigFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIActionSetFaceConfig SetFaceConfig {
      get { return configCase_ == ConfigOneofCase.SetFaceConfig ? (global::Pbe.AIActionSetFaceConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.SetFaceConfig;
      }
    }

    /// <summary>Field number for the "getOwnerIDConfig" field.</summary>
    public const int GetOwnerIDConfigFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIActionGetOwnerIDConfig GetOwnerIDConfig {
      get { return configCase_ == ConfigOneofCase.GetOwnerIDConfig ? (global::Pbe.AIActionGetOwnerIDConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.GetOwnerIDConfig;
      }
    }

    /// <summary>Field number for the "getTargetIDConfig" field.</summary>
    public const int GetTargetIDConfigFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIActionGetTargetIDConfig GetTargetIDConfig {
      get { return configCase_ == ConfigOneofCase.GetTargetIDConfig ? (global::Pbe.AIActionGetTargetIDConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.GetTargetIDConfig;
      }
    }

    /// <summary>Field number for the "distanceXYConfig" field.</summary>
    public const int DistanceXYConfigFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIConditionDistanceXYConfig DistanceXYConfig {
      get { return configCase_ == ConfigOneofCase.DistanceXYConfig ? (global::Pbe.AIConditionDistanceXYConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.DistanceXYConfig;
      }
    }

    /// <summary>Field number for the "distanceTargetConfig" field.</summary>
    public const int DistanceTargetConfigFieldNumber = 18;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIConditionDistanceTarget DistanceTargetConfig {
      get { return configCase_ == ConfigOneofCase.DistanceTargetConfig ? (global::Pbe.AIConditionDistanceTarget) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.DistanceTargetConfig;
      }
    }

    /// <summary>Field number for the "executeTreeConfig" field.</summary>
    public const int ExecuteTreeConfigFieldNumber = 19;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIActionExecuteTreeConfig ExecuteTreeConfig {
      get { return configCase_ == ConfigOneofCase.ExecuteTreeConfig ? (global::Pbe.AIActionExecuteTreeConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.ExecuteTreeConfig;
      }
    }

    /// <summary>Field number for the "waitConfig" field.</summary>
    public const int WaitConfigFieldNumber = 20;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIActionWaitConfig WaitConfig {
      get { return configCase_ == ConfigOneofCase.WaitConfig ? (global::Pbe.AIActionWaitConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.WaitConfig;
      }
    }

    /// <summary>Field number for the "setBBIntegerConfig" field.</summary>
    public const int SetBBIntegerConfigFieldNumber = 21;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIActionSetBBIntegerConfig SetBBIntegerConfig {
      get { return configCase_ == ConfigOneofCase.SetBBIntegerConfig ? (global::Pbe.AIActionSetBBIntegerConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.SetBBIntegerConfig;
      }
    }

    /// <summary>Field number for the "checkBBIntegerConfig" field.</summary>
    public const int CheckBBIntegerConfigFieldNumber = 22;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIConditionCheckBBIntegerConfig CheckBBIntegerConfig {
      get { return configCase_ == ConfigOneofCase.CheckBBIntegerConfig ? (global::Pbe.AIConditionCheckBBIntegerConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.CheckBBIntegerConfig;
      }
    }

    /// <summary>Field number for the "doSkillConfig" field.</summary>
    public const int DoSkillConfigFieldNumber = 23;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIActionDoSkillConfig DoSkillConfig {
      get { return configCase_ == ConfigOneofCase.DoSkillConfig ? (global::Pbe.AIActionDoSkillConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.DoSkillConfig;
      }
    }

    /// <summary>Field number for the "doActionConfig" field.</summary>
    public const int DoActionConfigFieldNumber = 24;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIActionDoActionConfig DoActionConfig {
      get { return configCase_ == ConfigOneofCase.DoActionConfig ? (global::Pbe.AIActionDoActionConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.DoActionConfig;
      }
    }

    /// <summary>Field number for the "addBuffConfig" field.</summary>
    public const int AddBuffConfigFieldNumber = 25;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIActionAddBuffConfig AddBuffConfig {
      get { return configCase_ == ConfigOneofCase.AddBuffConfig ? (global::Pbe.AIActionAddBuffConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.AddBuffConfig;
      }
    }

    /// <summary>Field number for the "addBuffInfoConfig" field.</summary>
    public const int AddBuffInfoConfigFieldNumber = 26;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIActionAddBuffInfoConfig AddBuffInfoConfig {
      get { return configCase_ == ConfigOneofCase.AddBuffInfoConfig ? (global::Pbe.AIActionAddBuffInfoConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.AddBuffInfoConfig;
      }
    }

    /// <summary>Field number for the "checkHPConfig" field.</summary>
    public const int CheckHPConfigFieldNumber = 27;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIConditionCheckHPConfig CheckHPConfig {
      get { return configCase_ == ConfigOneofCase.CheckHPConfig ? (global::Pbe.AIConditionCheckHPConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.CheckHPConfig;
      }
    }

    /// <summary>Field number for the "hasBuffConfig" field.</summary>
    public const int HasBuffConfigFieldNumber = 28;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIConditionHasBuffConfig HasBuffConfig {
      get { return configCase_ == ConfigOneofCase.HasBuffConfig ? (global::Pbe.AIConditionHasBuffConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.HasBuffConfig;
      }
    }

    /// <summary>Field number for the "usingSkillConfig" field.</summary>
    public const int UsingSkillConfigFieldNumber = 29;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIConditionUsingSkillConfig UsingSkillConfig {
      get { return configCase_ == ConfigOneofCase.UsingSkillConfig ? (global::Pbe.AIConditionUsingSkillConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.UsingSkillConfig;
      }
    }

    /// <summary>Field number for the "canUseSkillConfig" field.</summary>
    public const int CanUseSkillConfigFieldNumber = 30;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIConditionCanUseSkillConfig CanUseSkillConfig {
      get { return configCase_ == ConfigOneofCase.CanUseSkillConfig ? (global::Pbe.AIConditionCanUseSkillConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.CanUseSkillConfig;
      }
    }

    /// <summary>Field number for the "beConstraintConfig" field.</summary>
    public const int BeConstraintConfigFieldNumber = 31;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIConditionBeContraintConfig BeConstraintConfig {
      get { return configCase_ == ConfigOneofCase.BeConstraintConfig ? (global::Pbe.AIConditionBeContraintConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.BeConstraintConfig;
      }
    }

    /// <summary>Field number for the "removeBuffConfig" field.</summary>
    public const int RemoveBuffConfigFieldNumber = 32;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIActionRemoveBuffConfig RemoveBuffConfig {
      get { return configCase_ == ConfigOneofCase.RemoveBuffConfig ? (global::Pbe.AIActionRemoveBuffConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.RemoveBuffConfig;
      }
    }

    /// <summary>Field number for the "removeBuffInfoConfig" field.</summary>
    public const int RemoveBuffInfoConfigFieldNumber = 33;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIActionRemoveBuffInfoConfig RemoveBuffInfoConfig {
      get { return configCase_ == ConfigOneofCase.RemoveBuffInfoConfig ? (global::Pbe.AIActionRemoveBuffInfoConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.RemoveBuffInfoConfig;
      }
    }

    /// <summary>Field number for the "moveConfig" field.</summary>
    public const int MoveConfigFieldNumber = 34;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIActionMoveConfig MoveConfig {
      get { return configCase_ == ConfigOneofCase.MoveConfig ? (global::Pbe.AIActionMoveConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.MoveConfig;
      }
    }

    /// <summary>Field number for the "getUnitIDConfig" field.</summary>
    public const int GetUnitIDConfigFieldNumber = 35;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIActionGetUnitIDConfig GetUnitIDConfig {
      get { return configCase_ == ConfigOneofCase.GetUnitIDConfig ? (global::Pbe.AIActionGetUnitIDConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.GetUnitIDConfig;
      }
    }

    /// <summary>Field number for the "getRangedMonsterCountConfig" field.</summary>
    public const int GetRangedMonsterCountConfigFieldNumber = 36;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIActionGetMonsterCountInRange GetRangedMonsterCountConfig {
      get { return configCase_ == ConfigOneofCase.GetRangedMonsterCountConfig ? (global::Pbe.AIActionGetMonsterCountInRange) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.GetRangedMonsterCountConfig;
      }
    }

    /// <summary>Field number for the "loafConfig" field.</summary>
    public const int LoafConfigFieldNumber = 37;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIActionLoafConfig LoafConfig {
      get { return configCase_ == ConfigOneofCase.LoafConfig ? (global::Pbe.AIActionLoafConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.LoafConfig;
      }
    }

    /// <summary>Field number for the "suicideConfig" field.</summary>
    public const int SuicideConfigFieldNumber = 38;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIActionSuicideConfig SuicideConfig {
      get { return configCase_ == ConfigOneofCase.SuicideConfig ? (global::Pbe.AIActionSuicideConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.SuicideConfig;
      }
    }

    /// <summary>Field number for the "bubbleConfig" field.</summary>
    public const int BubbleConfigFieldNumber = 39;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIActionBubbleConfig BubbleConfig {
      get { return configCase_ == ConfigOneofCase.BubbleConfig ? (global::Pbe.AIActionBubbleConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.BubbleConfig;
      }
    }

    /// <summary>Field number for the "blackBarConfig" field.</summary>
    public const int BlackBarConfigFieldNumber = 40;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIActionBlackBarConfig BlackBarConfig {
      get { return configCase_ == ConfigOneofCase.BlackBarConfig ? (global::Pbe.AIActionBlackBarConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.BlackBarConfig;
      }
    }

    /// <summary>Field number for the "getPlayerUnitIDConfig" field.</summary>
    public const int GetPlayerUnitIDConfigFieldNumber = 41;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIActionGetPlayerUnitIDConfig GetPlayerUnitIDConfig {
      get { return configCase_ == ConfigOneofCase.GetPlayerUnitIDConfig ? (global::Pbe.AIActionGetPlayerUnitIDConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.GetPlayerUnitIDConfig;
      }
    }

    /// <summary>Field number for the "findBackapproachConfig" field.</summary>
    public const int FindBackapproachConfigFieldNumber = 42;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIActionFindBackApproachConfig FindBackapproachConfig {
      get { return configCase_ == ConfigOneofCase.FindBackapproachConfig ? (global::Pbe.AIActionFindBackApproachConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.FindBackapproachConfig;
      }
    }

    /// <summary>Field number for the "battleTipsConfig" field.</summary>
    public const int BattleTipsConfigFieldNumber = 43;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIActionBattleTipsConfig BattleTipsConfig {
      get { return configCase_ == ConfigOneofCase.BattleTipsConfig ? (global::Pbe.AIActionBattleTipsConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.BattleTipsConfig;
      }
    }

    /// <summary>Field number for the "scenarioConfig" field.</summary>
    public const int ScenarioConfigFieldNumber = 44;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIActionScenarioConfig ScenarioConfig {
      get { return configCase_ == ConfigOneofCase.ScenarioConfig ? (global::Pbe.AIActionScenarioConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.ScenarioConfig;
      }
    }

    /// <summary>Field number for the "checkUnitStateConfig" field.</summary>
    public const int CheckUnitStateConfigFieldNumber = 45;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIConditionCheckUnitStateConfig CheckUnitStateConfig {
      get { return configCase_ == ConfigOneofCase.CheckUnitStateConfig ? (global::Pbe.AIConditionCheckUnitStateConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.CheckUnitStateConfig;
      }
    }

    /// <summary>Field number for the "buttonStateConfig" field.</summary>
    public const int ButtonStateConfigFieldNumber = 46;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIActionButtonStateConfig ButtonStateConfig {
      get { return configCase_ == ConfigOneofCase.ButtonStateConfig ? (global::Pbe.AIActionButtonStateConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.ButtonStateConfig;
      }
    }

    /// <summary>Field number for the "startCameraOffsetConfig" field.</summary>
    public const int StartCameraOffsetConfigFieldNumber = 47;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIActionStartCameraOffsetConfig StartCameraOffsetConfig {
      get { return configCase_ == ConfigOneofCase.StartCameraOffsetConfig ? (global::Pbe.AIActionStartCameraOffsetConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.StartCameraOffsetConfig;
      }
    }

    /// <summary>Field number for the "cameraResetConfig" field.</summary>
    public const int CameraResetConfigFieldNumber = 48;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIActionCameraResetConfig CameraResetConfig {
      get { return configCase_ == ConfigOneofCase.CameraResetConfig ? (global::Pbe.AIActionCameraResetConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.CameraResetConfig;
      }
    }

    /// <summary>Field number for the "ElementDamageConfig" field.</summary>
    public const int ElementDamageConfigFieldNumber = 49;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIConditionElementDamageConfig ElementDamageConfig {
      get { return configCase_ == ConfigOneofCase.ElementDamageConfig ? (global::Pbe.AIConditionElementDamageConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.ElementDamageConfig;
      }
    }

    /// <summary>Field number for the "setPositionConfig" field.</summary>
    public const int SetPositionConfigFieldNumber = 50;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIActionSetPositionConfig SetPositionConfig {
      get { return configCase_ == ConfigOneofCase.SetPositionConfig ? (global::Pbe.AIActionSetPositionConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.SetPositionConfig;
      }
    }

    /// <summary>Field number for the "getMonsterUnitIDConfig" field.</summary>
    public const int GetMonsterUnitIDConfigFieldNumber = 51;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIActionGetMonsterUnitIDConfig GetMonsterUnitIDConfig {
      get { return configCase_ == ConfigOneofCase.GetMonsterUnitIDConfig ? (global::Pbe.AIActionGetMonsterUnitIDConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.GetMonsterUnitIDConfig;
      }
    }

    /// <summary>Field number for the "attackListConfig" field.</summary>
    public const int AttackListConfigFieldNumber = 52;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIActionAttackListConfig AttackListConfig {
      get { return configCase_ == ConfigOneofCase.AttackListConfig ? (global::Pbe.AIActionAttackListConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.AttackListConfig;
      }
    }

    /// <summary>Field number for the "getSectionDifConfig" field.</summary>
    public const int GetSectionDifConfigFieldNumber = 53;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIActionGetSectionDifConfig GetSectionDifConfig {
      get { return configCase_ == ConfigOneofCase.GetSectionDifConfig ? (global::Pbe.AIActionGetSectionDifConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.GetSectionDifConfig;
      }
    }

    /// <summary>Field number for the "removeSceneItemConfig" field.</summary>
    public const int RemoveSceneItemConfigFieldNumber = 54;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIActionRemoveSceneItem RemoveSceneItemConfig {
      get { return configCase_ == ConfigOneofCase.RemoveSceneItemConfig ? (global::Pbe.AIActionRemoveSceneItem) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.RemoveSceneItemConfig;
      }
    }

    /// <summary>Field number for the "fullScreenMaskShowConfig" field.</summary>
    public const int FullScreenMaskShowConfigFieldNumber = 55;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIActionFullScreenMaskShow FullScreenMaskShowConfig {
      get { return configCase_ == ConfigOneofCase.FullScreenMaskShowConfig ? (global::Pbe.AIActionFullScreenMaskShow) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.FullScreenMaskShowConfig;
      }
    }

    private object config_;
    /// <summary>Enum of possible cases for the "config" oneof.</summary>
    public enum ConfigOneofCase {
      None = 0,
      ApproachConfig = 5,
      AttackConfig = 6,
      AwayTargetConfig = 7,
      CloseConfig = 8,
      CloseTargetConfig = 9,
      CycleCloseConfig = 10,
      IdleConfig = 11,
      WanderConfig = 12,
      ZigApproachConfig = 13,
      SetFaceConfig = 14,
      GetOwnerIDConfig = 15,
      GetTargetIDConfig = 16,
      DistanceXYConfig = 17,
      DistanceTargetConfig = 18,
      ExecuteTreeConfig = 19,
      WaitConfig = 20,
      SetBBIntegerConfig = 21,
      CheckBBIntegerConfig = 22,
      DoSkillConfig = 23,
      DoActionConfig = 24,
      AddBuffConfig = 25,
      AddBuffInfoConfig = 26,
      CheckHPConfig = 27,
      HasBuffConfig = 28,
      UsingSkillConfig = 29,
      CanUseSkillConfig = 30,
      BeConstraintConfig = 31,
      RemoveBuffConfig = 32,
      RemoveBuffInfoConfig = 33,
      MoveConfig = 34,
      GetUnitIDConfig = 35,
      GetRangedMonsterCountConfig = 36,
      LoafConfig = 37,
      SuicideConfig = 38,
      BubbleConfig = 39,
      BlackBarConfig = 40,
      GetPlayerUnitIDConfig = 41,
      FindBackapproachConfig = 42,
      BattleTipsConfig = 43,
      ScenarioConfig = 44,
      CheckUnitStateConfig = 45,
      ButtonStateConfig = 46,
      StartCameraOffsetConfig = 47,
      CameraResetConfig = 48,
      ElementDamageConfig = 49,
      SetPositionConfig = 50,
      GetMonsterUnitIDConfig = 51,
      AttackListConfig = 52,
      GetSectionDifConfig = 53,
      RemoveSceneItemConfig = 54,
      FullScreenMaskShowConfig = 55,
    }
    private ConfigOneofCase configCase_ = ConfigOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigOneofCase ConfigCase {
      get { return configCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConfig() {
      configCase_ = ConfigOneofCase.None;
      config_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AITask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AITask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DetailType != other.DetailType) return false;
      if (Invert != other.Invert) return false;
      if (!object.Equals(ApproachConfig, other.ApproachConfig)) return false;
      if (!object.Equals(AttackConfig, other.AttackConfig)) return false;
      if (!object.Equals(AwayTargetConfig, other.AwayTargetConfig)) return false;
      if (!object.Equals(CloseConfig, other.CloseConfig)) return false;
      if (!object.Equals(CloseTargetConfig, other.CloseTargetConfig)) return false;
      if (!object.Equals(CycleCloseConfig, other.CycleCloseConfig)) return false;
      if (!object.Equals(IdleConfig, other.IdleConfig)) return false;
      if (!object.Equals(WanderConfig, other.WanderConfig)) return false;
      if (!object.Equals(ZigApproachConfig, other.ZigApproachConfig)) return false;
      if (!object.Equals(SetFaceConfig, other.SetFaceConfig)) return false;
      if (!object.Equals(GetOwnerIDConfig, other.GetOwnerIDConfig)) return false;
      if (!object.Equals(GetTargetIDConfig, other.GetTargetIDConfig)) return false;
      if (!object.Equals(DistanceXYConfig, other.DistanceXYConfig)) return false;
      if (!object.Equals(DistanceTargetConfig, other.DistanceTargetConfig)) return false;
      if (!object.Equals(ExecuteTreeConfig, other.ExecuteTreeConfig)) return false;
      if (!object.Equals(WaitConfig, other.WaitConfig)) return false;
      if (!object.Equals(SetBBIntegerConfig, other.SetBBIntegerConfig)) return false;
      if (!object.Equals(CheckBBIntegerConfig, other.CheckBBIntegerConfig)) return false;
      if (!object.Equals(DoSkillConfig, other.DoSkillConfig)) return false;
      if (!object.Equals(DoActionConfig, other.DoActionConfig)) return false;
      if (!object.Equals(AddBuffConfig, other.AddBuffConfig)) return false;
      if (!object.Equals(AddBuffInfoConfig, other.AddBuffInfoConfig)) return false;
      if (!object.Equals(CheckHPConfig, other.CheckHPConfig)) return false;
      if (!object.Equals(HasBuffConfig, other.HasBuffConfig)) return false;
      if (!object.Equals(UsingSkillConfig, other.UsingSkillConfig)) return false;
      if (!object.Equals(CanUseSkillConfig, other.CanUseSkillConfig)) return false;
      if (!object.Equals(BeConstraintConfig, other.BeConstraintConfig)) return false;
      if (!object.Equals(RemoveBuffConfig, other.RemoveBuffConfig)) return false;
      if (!object.Equals(RemoveBuffInfoConfig, other.RemoveBuffInfoConfig)) return false;
      if (!object.Equals(MoveConfig, other.MoveConfig)) return false;
      if (!object.Equals(GetUnitIDConfig, other.GetUnitIDConfig)) return false;
      if (!object.Equals(GetRangedMonsterCountConfig, other.GetRangedMonsterCountConfig)) return false;
      if (!object.Equals(LoafConfig, other.LoafConfig)) return false;
      if (!object.Equals(SuicideConfig, other.SuicideConfig)) return false;
      if (!object.Equals(BubbleConfig, other.BubbleConfig)) return false;
      if (!object.Equals(BlackBarConfig, other.BlackBarConfig)) return false;
      if (!object.Equals(GetPlayerUnitIDConfig, other.GetPlayerUnitIDConfig)) return false;
      if (!object.Equals(FindBackapproachConfig, other.FindBackapproachConfig)) return false;
      if (!object.Equals(BattleTipsConfig, other.BattleTipsConfig)) return false;
      if (!object.Equals(ScenarioConfig, other.ScenarioConfig)) return false;
      if (!object.Equals(CheckUnitStateConfig, other.CheckUnitStateConfig)) return false;
      if (!object.Equals(ButtonStateConfig, other.ButtonStateConfig)) return false;
      if (!object.Equals(StartCameraOffsetConfig, other.StartCameraOffsetConfig)) return false;
      if (!object.Equals(CameraResetConfig, other.CameraResetConfig)) return false;
      if (!object.Equals(ElementDamageConfig, other.ElementDamageConfig)) return false;
      if (!object.Equals(SetPositionConfig, other.SetPositionConfig)) return false;
      if (!object.Equals(GetMonsterUnitIDConfig, other.GetMonsterUnitIDConfig)) return false;
      if (!object.Equals(AttackListConfig, other.AttackListConfig)) return false;
      if (!object.Equals(GetSectionDifConfig, other.GetSectionDifConfig)) return false;
      if (!object.Equals(RemoveSceneItemConfig, other.RemoveSceneItemConfig)) return false;
      if (!object.Equals(FullScreenMaskShowConfig, other.FullScreenMaskShowConfig)) return false;
      if (ConfigCase != other.ConfigCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DetailType != 0) hash ^= DetailType.GetHashCode();
      if (Invert != false) hash ^= Invert.GetHashCode();
      if (configCase_ == ConfigOneofCase.ApproachConfig) hash ^= ApproachConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.AttackConfig) hash ^= AttackConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.AwayTargetConfig) hash ^= AwayTargetConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.CloseConfig) hash ^= CloseConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.CloseTargetConfig) hash ^= CloseTargetConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.CycleCloseConfig) hash ^= CycleCloseConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.IdleConfig) hash ^= IdleConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.WanderConfig) hash ^= WanderConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.ZigApproachConfig) hash ^= ZigApproachConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.SetFaceConfig) hash ^= SetFaceConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.GetOwnerIDConfig) hash ^= GetOwnerIDConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.GetTargetIDConfig) hash ^= GetTargetIDConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.DistanceXYConfig) hash ^= DistanceXYConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.DistanceTargetConfig) hash ^= DistanceTargetConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.ExecuteTreeConfig) hash ^= ExecuteTreeConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.WaitConfig) hash ^= WaitConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.SetBBIntegerConfig) hash ^= SetBBIntegerConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.CheckBBIntegerConfig) hash ^= CheckBBIntegerConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.DoSkillConfig) hash ^= DoSkillConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.DoActionConfig) hash ^= DoActionConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.AddBuffConfig) hash ^= AddBuffConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.AddBuffInfoConfig) hash ^= AddBuffInfoConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.CheckHPConfig) hash ^= CheckHPConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.HasBuffConfig) hash ^= HasBuffConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.UsingSkillConfig) hash ^= UsingSkillConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.CanUseSkillConfig) hash ^= CanUseSkillConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.BeConstraintConfig) hash ^= BeConstraintConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.RemoveBuffConfig) hash ^= RemoveBuffConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.RemoveBuffInfoConfig) hash ^= RemoveBuffInfoConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.MoveConfig) hash ^= MoveConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.GetUnitIDConfig) hash ^= GetUnitIDConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.GetRangedMonsterCountConfig) hash ^= GetRangedMonsterCountConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.LoafConfig) hash ^= LoafConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.SuicideConfig) hash ^= SuicideConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.BubbleConfig) hash ^= BubbleConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.BlackBarConfig) hash ^= BlackBarConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.GetPlayerUnitIDConfig) hash ^= GetPlayerUnitIDConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.FindBackapproachConfig) hash ^= FindBackapproachConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.BattleTipsConfig) hash ^= BattleTipsConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.ScenarioConfig) hash ^= ScenarioConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.CheckUnitStateConfig) hash ^= CheckUnitStateConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.ButtonStateConfig) hash ^= ButtonStateConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.StartCameraOffsetConfig) hash ^= StartCameraOffsetConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.CameraResetConfig) hash ^= CameraResetConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.ElementDamageConfig) hash ^= ElementDamageConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.SetPositionConfig) hash ^= SetPositionConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.GetMonsterUnitIDConfig) hash ^= GetMonsterUnitIDConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.AttackListConfig) hash ^= AttackListConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.GetSectionDifConfig) hash ^= GetSectionDifConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.RemoveSceneItemConfig) hash ^= RemoveSceneItemConfig.GetHashCode();
      if (configCase_ == ConfigOneofCase.FullScreenMaskShowConfig) hash ^= FullScreenMaskShowConfig.GetHashCode();
      hash ^= (int) configCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DetailType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DetailType);
      }
      if (Invert != false) {
        output.WriteRawTag(16);
        output.WriteBool(Invert);
      }
      if (configCase_ == ConfigOneofCase.ApproachConfig) {
        output.WriteRawTag(42);
        output.WriteMessage(ApproachConfig);
      }
      if (configCase_ == ConfigOneofCase.AttackConfig) {
        output.WriteRawTag(50);
        output.WriteMessage(AttackConfig);
      }
      if (configCase_ == ConfigOneofCase.AwayTargetConfig) {
        output.WriteRawTag(58);
        output.WriteMessage(AwayTargetConfig);
      }
      if (configCase_ == ConfigOneofCase.CloseConfig) {
        output.WriteRawTag(66);
        output.WriteMessage(CloseConfig);
      }
      if (configCase_ == ConfigOneofCase.CloseTargetConfig) {
        output.WriteRawTag(74);
        output.WriteMessage(CloseTargetConfig);
      }
      if (configCase_ == ConfigOneofCase.CycleCloseConfig) {
        output.WriteRawTag(82);
        output.WriteMessage(CycleCloseConfig);
      }
      if (configCase_ == ConfigOneofCase.IdleConfig) {
        output.WriteRawTag(90);
        output.WriteMessage(IdleConfig);
      }
      if (configCase_ == ConfigOneofCase.WanderConfig) {
        output.WriteRawTag(98);
        output.WriteMessage(WanderConfig);
      }
      if (configCase_ == ConfigOneofCase.ZigApproachConfig) {
        output.WriteRawTag(106);
        output.WriteMessage(ZigApproachConfig);
      }
      if (configCase_ == ConfigOneofCase.SetFaceConfig) {
        output.WriteRawTag(114);
        output.WriteMessage(SetFaceConfig);
      }
      if (configCase_ == ConfigOneofCase.GetOwnerIDConfig) {
        output.WriteRawTag(122);
        output.WriteMessage(GetOwnerIDConfig);
      }
      if (configCase_ == ConfigOneofCase.GetTargetIDConfig) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(GetTargetIDConfig);
      }
      if (configCase_ == ConfigOneofCase.DistanceXYConfig) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(DistanceXYConfig);
      }
      if (configCase_ == ConfigOneofCase.DistanceTargetConfig) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(DistanceTargetConfig);
      }
      if (configCase_ == ConfigOneofCase.ExecuteTreeConfig) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(ExecuteTreeConfig);
      }
      if (configCase_ == ConfigOneofCase.WaitConfig) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(WaitConfig);
      }
      if (configCase_ == ConfigOneofCase.SetBBIntegerConfig) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(SetBBIntegerConfig);
      }
      if (configCase_ == ConfigOneofCase.CheckBBIntegerConfig) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(CheckBBIntegerConfig);
      }
      if (configCase_ == ConfigOneofCase.DoSkillConfig) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(DoSkillConfig);
      }
      if (configCase_ == ConfigOneofCase.DoActionConfig) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(DoActionConfig);
      }
      if (configCase_ == ConfigOneofCase.AddBuffConfig) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(AddBuffConfig);
      }
      if (configCase_ == ConfigOneofCase.AddBuffInfoConfig) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(AddBuffInfoConfig);
      }
      if (configCase_ == ConfigOneofCase.CheckHPConfig) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(CheckHPConfig);
      }
      if (configCase_ == ConfigOneofCase.HasBuffConfig) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(HasBuffConfig);
      }
      if (configCase_ == ConfigOneofCase.UsingSkillConfig) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(UsingSkillConfig);
      }
      if (configCase_ == ConfigOneofCase.CanUseSkillConfig) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(CanUseSkillConfig);
      }
      if (configCase_ == ConfigOneofCase.BeConstraintConfig) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(BeConstraintConfig);
      }
      if (configCase_ == ConfigOneofCase.RemoveBuffConfig) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(RemoveBuffConfig);
      }
      if (configCase_ == ConfigOneofCase.RemoveBuffInfoConfig) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(RemoveBuffInfoConfig);
      }
      if (configCase_ == ConfigOneofCase.MoveConfig) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(MoveConfig);
      }
      if (configCase_ == ConfigOneofCase.GetUnitIDConfig) {
        output.WriteRawTag(154, 2);
        output.WriteMessage(GetUnitIDConfig);
      }
      if (configCase_ == ConfigOneofCase.GetRangedMonsterCountConfig) {
        output.WriteRawTag(162, 2);
        output.WriteMessage(GetRangedMonsterCountConfig);
      }
      if (configCase_ == ConfigOneofCase.LoafConfig) {
        output.WriteRawTag(170, 2);
        output.WriteMessage(LoafConfig);
      }
      if (configCase_ == ConfigOneofCase.SuicideConfig) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(SuicideConfig);
      }
      if (configCase_ == ConfigOneofCase.BubbleConfig) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(BubbleConfig);
      }
      if (configCase_ == ConfigOneofCase.BlackBarConfig) {
        output.WriteRawTag(194, 2);
        output.WriteMessage(BlackBarConfig);
      }
      if (configCase_ == ConfigOneofCase.GetPlayerUnitIDConfig) {
        output.WriteRawTag(202, 2);
        output.WriteMessage(GetPlayerUnitIDConfig);
      }
      if (configCase_ == ConfigOneofCase.FindBackapproachConfig) {
        output.WriteRawTag(210, 2);
        output.WriteMessage(FindBackapproachConfig);
      }
      if (configCase_ == ConfigOneofCase.BattleTipsConfig) {
        output.WriteRawTag(218, 2);
        output.WriteMessage(BattleTipsConfig);
      }
      if (configCase_ == ConfigOneofCase.ScenarioConfig) {
        output.WriteRawTag(226, 2);
        output.WriteMessage(ScenarioConfig);
      }
      if (configCase_ == ConfigOneofCase.CheckUnitStateConfig) {
        output.WriteRawTag(234, 2);
        output.WriteMessage(CheckUnitStateConfig);
      }
      if (configCase_ == ConfigOneofCase.ButtonStateConfig) {
        output.WriteRawTag(242, 2);
        output.WriteMessage(ButtonStateConfig);
      }
      if (configCase_ == ConfigOneofCase.StartCameraOffsetConfig) {
        output.WriteRawTag(250, 2);
        output.WriteMessage(StartCameraOffsetConfig);
      }
      if (configCase_ == ConfigOneofCase.CameraResetConfig) {
        output.WriteRawTag(130, 3);
        output.WriteMessage(CameraResetConfig);
      }
      if (configCase_ == ConfigOneofCase.ElementDamageConfig) {
        output.WriteRawTag(138, 3);
        output.WriteMessage(ElementDamageConfig);
      }
      if (configCase_ == ConfigOneofCase.SetPositionConfig) {
        output.WriteRawTag(146, 3);
        output.WriteMessage(SetPositionConfig);
      }
      if (configCase_ == ConfigOneofCase.GetMonsterUnitIDConfig) {
        output.WriteRawTag(154, 3);
        output.WriteMessage(GetMonsterUnitIDConfig);
      }
      if (configCase_ == ConfigOneofCase.AttackListConfig) {
        output.WriteRawTag(162, 3);
        output.WriteMessage(AttackListConfig);
      }
      if (configCase_ == ConfigOneofCase.GetSectionDifConfig) {
        output.WriteRawTag(170, 3);
        output.WriteMessage(GetSectionDifConfig);
      }
      if (configCase_ == ConfigOneofCase.RemoveSceneItemConfig) {
        output.WriteRawTag(178, 3);
        output.WriteMessage(RemoveSceneItemConfig);
      }
      if (configCase_ == ConfigOneofCase.FullScreenMaskShowConfig) {
        output.WriteRawTag(186, 3);
        output.WriteMessage(FullScreenMaskShowConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DetailType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DetailType);
      }
      if (Invert != false) {
        size += 1 + 1;
      }
      if (configCase_ == ConfigOneofCase.ApproachConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ApproachConfig);
      }
      if (configCase_ == ConfigOneofCase.AttackConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AttackConfig);
      }
      if (configCase_ == ConfigOneofCase.AwayTargetConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AwayTargetConfig);
      }
      if (configCase_ == ConfigOneofCase.CloseConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CloseConfig);
      }
      if (configCase_ == ConfigOneofCase.CloseTargetConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CloseTargetConfig);
      }
      if (configCase_ == ConfigOneofCase.CycleCloseConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CycleCloseConfig);
      }
      if (configCase_ == ConfigOneofCase.IdleConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IdleConfig);
      }
      if (configCase_ == ConfigOneofCase.WanderConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WanderConfig);
      }
      if (configCase_ == ConfigOneofCase.ZigApproachConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ZigApproachConfig);
      }
      if (configCase_ == ConfigOneofCase.SetFaceConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SetFaceConfig);
      }
      if (configCase_ == ConfigOneofCase.GetOwnerIDConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetOwnerIDConfig);
      }
      if (configCase_ == ConfigOneofCase.GetTargetIDConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetTargetIDConfig);
      }
      if (configCase_ == ConfigOneofCase.DistanceXYConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DistanceXYConfig);
      }
      if (configCase_ == ConfigOneofCase.DistanceTargetConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DistanceTargetConfig);
      }
      if (configCase_ == ConfigOneofCase.ExecuteTreeConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ExecuteTreeConfig);
      }
      if (configCase_ == ConfigOneofCase.WaitConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(WaitConfig);
      }
      if (configCase_ == ConfigOneofCase.SetBBIntegerConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SetBBIntegerConfig);
      }
      if (configCase_ == ConfigOneofCase.CheckBBIntegerConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CheckBBIntegerConfig);
      }
      if (configCase_ == ConfigOneofCase.DoSkillConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DoSkillConfig);
      }
      if (configCase_ == ConfigOneofCase.DoActionConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DoActionConfig);
      }
      if (configCase_ == ConfigOneofCase.AddBuffConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AddBuffConfig);
      }
      if (configCase_ == ConfigOneofCase.AddBuffInfoConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AddBuffInfoConfig);
      }
      if (configCase_ == ConfigOneofCase.CheckHPConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CheckHPConfig);
      }
      if (configCase_ == ConfigOneofCase.HasBuffConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HasBuffConfig);
      }
      if (configCase_ == ConfigOneofCase.UsingSkillConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UsingSkillConfig);
      }
      if (configCase_ == ConfigOneofCase.CanUseSkillConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CanUseSkillConfig);
      }
      if (configCase_ == ConfigOneofCase.BeConstraintConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BeConstraintConfig);
      }
      if (configCase_ == ConfigOneofCase.RemoveBuffConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RemoveBuffConfig);
      }
      if (configCase_ == ConfigOneofCase.RemoveBuffInfoConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RemoveBuffInfoConfig);
      }
      if (configCase_ == ConfigOneofCase.MoveConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MoveConfig);
      }
      if (configCase_ == ConfigOneofCase.GetUnitIDConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetUnitIDConfig);
      }
      if (configCase_ == ConfigOneofCase.GetRangedMonsterCountConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetRangedMonsterCountConfig);
      }
      if (configCase_ == ConfigOneofCase.LoafConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LoafConfig);
      }
      if (configCase_ == ConfigOneofCase.SuicideConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SuicideConfig);
      }
      if (configCase_ == ConfigOneofCase.BubbleConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BubbleConfig);
      }
      if (configCase_ == ConfigOneofCase.BlackBarConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BlackBarConfig);
      }
      if (configCase_ == ConfigOneofCase.GetPlayerUnitIDConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetPlayerUnitIDConfig);
      }
      if (configCase_ == ConfigOneofCase.FindBackapproachConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FindBackapproachConfig);
      }
      if (configCase_ == ConfigOneofCase.BattleTipsConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BattleTipsConfig);
      }
      if (configCase_ == ConfigOneofCase.ScenarioConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ScenarioConfig);
      }
      if (configCase_ == ConfigOneofCase.CheckUnitStateConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CheckUnitStateConfig);
      }
      if (configCase_ == ConfigOneofCase.ButtonStateConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ButtonStateConfig);
      }
      if (configCase_ == ConfigOneofCase.StartCameraOffsetConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StartCameraOffsetConfig);
      }
      if (configCase_ == ConfigOneofCase.CameraResetConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CameraResetConfig);
      }
      if (configCase_ == ConfigOneofCase.ElementDamageConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ElementDamageConfig);
      }
      if (configCase_ == ConfigOneofCase.SetPositionConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SetPositionConfig);
      }
      if (configCase_ == ConfigOneofCase.GetMonsterUnitIDConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetMonsterUnitIDConfig);
      }
      if (configCase_ == ConfigOneofCase.AttackListConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AttackListConfig);
      }
      if (configCase_ == ConfigOneofCase.GetSectionDifConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetSectionDifConfig);
      }
      if (configCase_ == ConfigOneofCase.RemoveSceneItemConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RemoveSceneItemConfig);
      }
      if (configCase_ == ConfigOneofCase.FullScreenMaskShowConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FullScreenMaskShowConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AITask other) {
      if (other == null) {
        return;
      }
      if (other.DetailType != 0) {
        DetailType = other.DetailType;
      }
      if (other.Invert != false) {
        Invert = other.Invert;
      }
      switch (other.ConfigCase) {
        case ConfigOneofCase.ApproachConfig:
          if (ApproachConfig == null) {
            ApproachConfig = new global::Pbe.AIActionDirectlyApproachConfig();
          }
          ApproachConfig.MergeFrom(other.ApproachConfig);
          break;
        case ConfigOneofCase.AttackConfig:
          if (AttackConfig == null) {
            AttackConfig = new global::Pbe.AIActionAttackConfig();
          }
          AttackConfig.MergeFrom(other.AttackConfig);
          break;
        case ConfigOneofCase.AwayTargetConfig:
          if (AwayTargetConfig == null) {
            AwayTargetConfig = new global::Pbe.AIActionAwayTargetConfig();
          }
          AwayTargetConfig.MergeFrom(other.AwayTargetConfig);
          break;
        case ConfigOneofCase.CloseConfig:
          if (CloseConfig == null) {
            CloseConfig = new global::Pbe.AIActionCloseConfig();
          }
          CloseConfig.MergeFrom(other.CloseConfig);
          break;
        case ConfigOneofCase.CloseTargetConfig:
          if (CloseTargetConfig == null) {
            CloseTargetConfig = new global::Pbe.AIActionCloseTargetConfig();
          }
          CloseTargetConfig.MergeFrom(other.CloseTargetConfig);
          break;
        case ConfigOneofCase.CycleCloseConfig:
          if (CycleCloseConfig == null) {
            CycleCloseConfig = new global::Pbe.AIActionCycleCloseConfig();
          }
          CycleCloseConfig.MergeFrom(other.CycleCloseConfig);
          break;
        case ConfigOneofCase.IdleConfig:
          if (IdleConfig == null) {
            IdleConfig = new global::Pbe.AIActionIdleConfig();
          }
          IdleConfig.MergeFrom(other.IdleConfig);
          break;
        case ConfigOneofCase.WanderConfig:
          if (WanderConfig == null) {
            WanderConfig = new global::Pbe.AIActionWanderConfig();
          }
          WanderConfig.MergeFrom(other.WanderConfig);
          break;
        case ConfigOneofCase.ZigApproachConfig:
          if (ZigApproachConfig == null) {
            ZigApproachConfig = new global::Pbe.AIActionZigApproachConfig();
          }
          ZigApproachConfig.MergeFrom(other.ZigApproachConfig);
          break;
        case ConfigOneofCase.SetFaceConfig:
          if (SetFaceConfig == null) {
            SetFaceConfig = new global::Pbe.AIActionSetFaceConfig();
          }
          SetFaceConfig.MergeFrom(other.SetFaceConfig);
          break;
        case ConfigOneofCase.GetOwnerIDConfig:
          if (GetOwnerIDConfig == null) {
            GetOwnerIDConfig = new global::Pbe.AIActionGetOwnerIDConfig();
          }
          GetOwnerIDConfig.MergeFrom(other.GetOwnerIDConfig);
          break;
        case ConfigOneofCase.GetTargetIDConfig:
          if (GetTargetIDConfig == null) {
            GetTargetIDConfig = new global::Pbe.AIActionGetTargetIDConfig();
          }
          GetTargetIDConfig.MergeFrom(other.GetTargetIDConfig);
          break;
        case ConfigOneofCase.DistanceXYConfig:
          if (DistanceXYConfig == null) {
            DistanceXYConfig = new global::Pbe.AIConditionDistanceXYConfig();
          }
          DistanceXYConfig.MergeFrom(other.DistanceXYConfig);
          break;
        case ConfigOneofCase.DistanceTargetConfig:
          if (DistanceTargetConfig == null) {
            DistanceTargetConfig = new global::Pbe.AIConditionDistanceTarget();
          }
          DistanceTargetConfig.MergeFrom(other.DistanceTargetConfig);
          break;
        case ConfigOneofCase.ExecuteTreeConfig:
          if (ExecuteTreeConfig == null) {
            ExecuteTreeConfig = new global::Pbe.AIActionExecuteTreeConfig();
          }
          ExecuteTreeConfig.MergeFrom(other.ExecuteTreeConfig);
          break;
        case ConfigOneofCase.WaitConfig:
          if (WaitConfig == null) {
            WaitConfig = new global::Pbe.AIActionWaitConfig();
          }
          WaitConfig.MergeFrom(other.WaitConfig);
          break;
        case ConfigOneofCase.SetBBIntegerConfig:
          if (SetBBIntegerConfig == null) {
            SetBBIntegerConfig = new global::Pbe.AIActionSetBBIntegerConfig();
          }
          SetBBIntegerConfig.MergeFrom(other.SetBBIntegerConfig);
          break;
        case ConfigOneofCase.CheckBBIntegerConfig:
          if (CheckBBIntegerConfig == null) {
            CheckBBIntegerConfig = new global::Pbe.AIConditionCheckBBIntegerConfig();
          }
          CheckBBIntegerConfig.MergeFrom(other.CheckBBIntegerConfig);
          break;
        case ConfigOneofCase.DoSkillConfig:
          if (DoSkillConfig == null) {
            DoSkillConfig = new global::Pbe.AIActionDoSkillConfig();
          }
          DoSkillConfig.MergeFrom(other.DoSkillConfig);
          break;
        case ConfigOneofCase.DoActionConfig:
          if (DoActionConfig == null) {
            DoActionConfig = new global::Pbe.AIActionDoActionConfig();
          }
          DoActionConfig.MergeFrom(other.DoActionConfig);
          break;
        case ConfigOneofCase.AddBuffConfig:
          if (AddBuffConfig == null) {
            AddBuffConfig = new global::Pbe.AIActionAddBuffConfig();
          }
          AddBuffConfig.MergeFrom(other.AddBuffConfig);
          break;
        case ConfigOneofCase.AddBuffInfoConfig:
          if (AddBuffInfoConfig == null) {
            AddBuffInfoConfig = new global::Pbe.AIActionAddBuffInfoConfig();
          }
          AddBuffInfoConfig.MergeFrom(other.AddBuffInfoConfig);
          break;
        case ConfigOneofCase.CheckHPConfig:
          if (CheckHPConfig == null) {
            CheckHPConfig = new global::Pbe.AIConditionCheckHPConfig();
          }
          CheckHPConfig.MergeFrom(other.CheckHPConfig);
          break;
        case ConfigOneofCase.HasBuffConfig:
          if (HasBuffConfig == null) {
            HasBuffConfig = new global::Pbe.AIConditionHasBuffConfig();
          }
          HasBuffConfig.MergeFrom(other.HasBuffConfig);
          break;
        case ConfigOneofCase.UsingSkillConfig:
          if (UsingSkillConfig == null) {
            UsingSkillConfig = new global::Pbe.AIConditionUsingSkillConfig();
          }
          UsingSkillConfig.MergeFrom(other.UsingSkillConfig);
          break;
        case ConfigOneofCase.CanUseSkillConfig:
          if (CanUseSkillConfig == null) {
            CanUseSkillConfig = new global::Pbe.AIConditionCanUseSkillConfig();
          }
          CanUseSkillConfig.MergeFrom(other.CanUseSkillConfig);
          break;
        case ConfigOneofCase.BeConstraintConfig:
          if (BeConstraintConfig == null) {
            BeConstraintConfig = new global::Pbe.AIConditionBeContraintConfig();
          }
          BeConstraintConfig.MergeFrom(other.BeConstraintConfig);
          break;
        case ConfigOneofCase.RemoveBuffConfig:
          if (RemoveBuffConfig == null) {
            RemoveBuffConfig = new global::Pbe.AIActionRemoveBuffConfig();
          }
          RemoveBuffConfig.MergeFrom(other.RemoveBuffConfig);
          break;
        case ConfigOneofCase.RemoveBuffInfoConfig:
          if (RemoveBuffInfoConfig == null) {
            RemoveBuffInfoConfig = new global::Pbe.AIActionRemoveBuffInfoConfig();
          }
          RemoveBuffInfoConfig.MergeFrom(other.RemoveBuffInfoConfig);
          break;
        case ConfigOneofCase.MoveConfig:
          if (MoveConfig == null) {
            MoveConfig = new global::Pbe.AIActionMoveConfig();
          }
          MoveConfig.MergeFrom(other.MoveConfig);
          break;
        case ConfigOneofCase.GetUnitIDConfig:
          if (GetUnitIDConfig == null) {
            GetUnitIDConfig = new global::Pbe.AIActionGetUnitIDConfig();
          }
          GetUnitIDConfig.MergeFrom(other.GetUnitIDConfig);
          break;
        case ConfigOneofCase.GetRangedMonsterCountConfig:
          if (GetRangedMonsterCountConfig == null) {
            GetRangedMonsterCountConfig = new global::Pbe.AIActionGetMonsterCountInRange();
          }
          GetRangedMonsterCountConfig.MergeFrom(other.GetRangedMonsterCountConfig);
          break;
        case ConfigOneofCase.LoafConfig:
          if (LoafConfig == null) {
            LoafConfig = new global::Pbe.AIActionLoafConfig();
          }
          LoafConfig.MergeFrom(other.LoafConfig);
          break;
        case ConfigOneofCase.SuicideConfig:
          if (SuicideConfig == null) {
            SuicideConfig = new global::Pbe.AIActionSuicideConfig();
          }
          SuicideConfig.MergeFrom(other.SuicideConfig);
          break;
        case ConfigOneofCase.BubbleConfig:
          if (BubbleConfig == null) {
            BubbleConfig = new global::Pbe.AIActionBubbleConfig();
          }
          BubbleConfig.MergeFrom(other.BubbleConfig);
          break;
        case ConfigOneofCase.BlackBarConfig:
          if (BlackBarConfig == null) {
            BlackBarConfig = new global::Pbe.AIActionBlackBarConfig();
          }
          BlackBarConfig.MergeFrom(other.BlackBarConfig);
          break;
        case ConfigOneofCase.GetPlayerUnitIDConfig:
          if (GetPlayerUnitIDConfig == null) {
            GetPlayerUnitIDConfig = new global::Pbe.AIActionGetPlayerUnitIDConfig();
          }
          GetPlayerUnitIDConfig.MergeFrom(other.GetPlayerUnitIDConfig);
          break;
        case ConfigOneofCase.FindBackapproachConfig:
          if (FindBackapproachConfig == null) {
            FindBackapproachConfig = new global::Pbe.AIActionFindBackApproachConfig();
          }
          FindBackapproachConfig.MergeFrom(other.FindBackapproachConfig);
          break;
        case ConfigOneofCase.BattleTipsConfig:
          if (BattleTipsConfig == null) {
            BattleTipsConfig = new global::Pbe.AIActionBattleTipsConfig();
          }
          BattleTipsConfig.MergeFrom(other.BattleTipsConfig);
          break;
        case ConfigOneofCase.ScenarioConfig:
          if (ScenarioConfig == null) {
            ScenarioConfig = new global::Pbe.AIActionScenarioConfig();
          }
          ScenarioConfig.MergeFrom(other.ScenarioConfig);
          break;
        case ConfigOneofCase.CheckUnitStateConfig:
          if (CheckUnitStateConfig == null) {
            CheckUnitStateConfig = new global::Pbe.AIConditionCheckUnitStateConfig();
          }
          CheckUnitStateConfig.MergeFrom(other.CheckUnitStateConfig);
          break;
        case ConfigOneofCase.ButtonStateConfig:
          if (ButtonStateConfig == null) {
            ButtonStateConfig = new global::Pbe.AIActionButtonStateConfig();
          }
          ButtonStateConfig.MergeFrom(other.ButtonStateConfig);
          break;
        case ConfigOneofCase.StartCameraOffsetConfig:
          if (StartCameraOffsetConfig == null) {
            StartCameraOffsetConfig = new global::Pbe.AIActionStartCameraOffsetConfig();
          }
          StartCameraOffsetConfig.MergeFrom(other.StartCameraOffsetConfig);
          break;
        case ConfigOneofCase.CameraResetConfig:
          if (CameraResetConfig == null) {
            CameraResetConfig = new global::Pbe.AIActionCameraResetConfig();
          }
          CameraResetConfig.MergeFrom(other.CameraResetConfig);
          break;
        case ConfigOneofCase.ElementDamageConfig:
          if (ElementDamageConfig == null) {
            ElementDamageConfig = new global::Pbe.AIConditionElementDamageConfig();
          }
          ElementDamageConfig.MergeFrom(other.ElementDamageConfig);
          break;
        case ConfigOneofCase.SetPositionConfig:
          if (SetPositionConfig == null) {
            SetPositionConfig = new global::Pbe.AIActionSetPositionConfig();
          }
          SetPositionConfig.MergeFrom(other.SetPositionConfig);
          break;
        case ConfigOneofCase.GetMonsterUnitIDConfig:
          if (GetMonsterUnitIDConfig == null) {
            GetMonsterUnitIDConfig = new global::Pbe.AIActionGetMonsterUnitIDConfig();
          }
          GetMonsterUnitIDConfig.MergeFrom(other.GetMonsterUnitIDConfig);
          break;
        case ConfigOneofCase.AttackListConfig:
          if (AttackListConfig == null) {
            AttackListConfig = new global::Pbe.AIActionAttackListConfig();
          }
          AttackListConfig.MergeFrom(other.AttackListConfig);
          break;
        case ConfigOneofCase.GetSectionDifConfig:
          if (GetSectionDifConfig == null) {
            GetSectionDifConfig = new global::Pbe.AIActionGetSectionDifConfig();
          }
          GetSectionDifConfig.MergeFrom(other.GetSectionDifConfig);
          break;
        case ConfigOneofCase.RemoveSceneItemConfig:
          if (RemoveSceneItemConfig == null) {
            RemoveSceneItemConfig = new global::Pbe.AIActionRemoveSceneItem();
          }
          RemoveSceneItemConfig.MergeFrom(other.RemoveSceneItemConfig);
          break;
        case ConfigOneofCase.FullScreenMaskShowConfig:
          if (FullScreenMaskShowConfig == null) {
            FullScreenMaskShowConfig = new global::Pbe.AIActionFullScreenMaskShow();
          }
          FullScreenMaskShowConfig.MergeFrom(other.FullScreenMaskShowConfig);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DetailType = input.ReadInt32();
            break;
          }
          case 16: {
            Invert = input.ReadBool();
            break;
          }
          case 42: {
            global::Pbe.AIActionDirectlyApproachConfig subBuilder = new global::Pbe.AIActionDirectlyApproachConfig();
            if (configCase_ == ConfigOneofCase.ApproachConfig) {
              subBuilder.MergeFrom(ApproachConfig);
            }
            input.ReadMessage(subBuilder);
            ApproachConfig = subBuilder;
            break;
          }
          case 50: {
            global::Pbe.AIActionAttackConfig subBuilder = new global::Pbe.AIActionAttackConfig();
            if (configCase_ == ConfigOneofCase.AttackConfig) {
              subBuilder.MergeFrom(AttackConfig);
            }
            input.ReadMessage(subBuilder);
            AttackConfig = subBuilder;
            break;
          }
          case 58: {
            global::Pbe.AIActionAwayTargetConfig subBuilder = new global::Pbe.AIActionAwayTargetConfig();
            if (configCase_ == ConfigOneofCase.AwayTargetConfig) {
              subBuilder.MergeFrom(AwayTargetConfig);
            }
            input.ReadMessage(subBuilder);
            AwayTargetConfig = subBuilder;
            break;
          }
          case 66: {
            global::Pbe.AIActionCloseConfig subBuilder = new global::Pbe.AIActionCloseConfig();
            if (configCase_ == ConfigOneofCase.CloseConfig) {
              subBuilder.MergeFrom(CloseConfig);
            }
            input.ReadMessage(subBuilder);
            CloseConfig = subBuilder;
            break;
          }
          case 74: {
            global::Pbe.AIActionCloseTargetConfig subBuilder = new global::Pbe.AIActionCloseTargetConfig();
            if (configCase_ == ConfigOneofCase.CloseTargetConfig) {
              subBuilder.MergeFrom(CloseTargetConfig);
            }
            input.ReadMessage(subBuilder);
            CloseTargetConfig = subBuilder;
            break;
          }
          case 82: {
            global::Pbe.AIActionCycleCloseConfig subBuilder = new global::Pbe.AIActionCycleCloseConfig();
            if (configCase_ == ConfigOneofCase.CycleCloseConfig) {
              subBuilder.MergeFrom(CycleCloseConfig);
            }
            input.ReadMessage(subBuilder);
            CycleCloseConfig = subBuilder;
            break;
          }
          case 90: {
            global::Pbe.AIActionIdleConfig subBuilder = new global::Pbe.AIActionIdleConfig();
            if (configCase_ == ConfigOneofCase.IdleConfig) {
              subBuilder.MergeFrom(IdleConfig);
            }
            input.ReadMessage(subBuilder);
            IdleConfig = subBuilder;
            break;
          }
          case 98: {
            global::Pbe.AIActionWanderConfig subBuilder = new global::Pbe.AIActionWanderConfig();
            if (configCase_ == ConfigOneofCase.WanderConfig) {
              subBuilder.MergeFrom(WanderConfig);
            }
            input.ReadMessage(subBuilder);
            WanderConfig = subBuilder;
            break;
          }
          case 106: {
            global::Pbe.AIActionZigApproachConfig subBuilder = new global::Pbe.AIActionZigApproachConfig();
            if (configCase_ == ConfigOneofCase.ZigApproachConfig) {
              subBuilder.MergeFrom(ZigApproachConfig);
            }
            input.ReadMessage(subBuilder);
            ZigApproachConfig = subBuilder;
            break;
          }
          case 114: {
            global::Pbe.AIActionSetFaceConfig subBuilder = new global::Pbe.AIActionSetFaceConfig();
            if (configCase_ == ConfigOneofCase.SetFaceConfig) {
              subBuilder.MergeFrom(SetFaceConfig);
            }
            input.ReadMessage(subBuilder);
            SetFaceConfig = subBuilder;
            break;
          }
          case 122: {
            global::Pbe.AIActionGetOwnerIDConfig subBuilder = new global::Pbe.AIActionGetOwnerIDConfig();
            if (configCase_ == ConfigOneofCase.GetOwnerIDConfig) {
              subBuilder.MergeFrom(GetOwnerIDConfig);
            }
            input.ReadMessage(subBuilder);
            GetOwnerIDConfig = subBuilder;
            break;
          }
          case 130: {
            global::Pbe.AIActionGetTargetIDConfig subBuilder = new global::Pbe.AIActionGetTargetIDConfig();
            if (configCase_ == ConfigOneofCase.GetTargetIDConfig) {
              subBuilder.MergeFrom(GetTargetIDConfig);
            }
            input.ReadMessage(subBuilder);
            GetTargetIDConfig = subBuilder;
            break;
          }
          case 138: {
            global::Pbe.AIConditionDistanceXYConfig subBuilder = new global::Pbe.AIConditionDistanceXYConfig();
            if (configCase_ == ConfigOneofCase.DistanceXYConfig) {
              subBuilder.MergeFrom(DistanceXYConfig);
            }
            input.ReadMessage(subBuilder);
            DistanceXYConfig = subBuilder;
            break;
          }
          case 146: {
            global::Pbe.AIConditionDistanceTarget subBuilder = new global::Pbe.AIConditionDistanceTarget();
            if (configCase_ == ConfigOneofCase.DistanceTargetConfig) {
              subBuilder.MergeFrom(DistanceTargetConfig);
            }
            input.ReadMessage(subBuilder);
            DistanceTargetConfig = subBuilder;
            break;
          }
          case 154: {
            global::Pbe.AIActionExecuteTreeConfig subBuilder = new global::Pbe.AIActionExecuteTreeConfig();
            if (configCase_ == ConfigOneofCase.ExecuteTreeConfig) {
              subBuilder.MergeFrom(ExecuteTreeConfig);
            }
            input.ReadMessage(subBuilder);
            ExecuteTreeConfig = subBuilder;
            break;
          }
          case 162: {
            global::Pbe.AIActionWaitConfig subBuilder = new global::Pbe.AIActionWaitConfig();
            if (configCase_ == ConfigOneofCase.WaitConfig) {
              subBuilder.MergeFrom(WaitConfig);
            }
            input.ReadMessage(subBuilder);
            WaitConfig = subBuilder;
            break;
          }
          case 170: {
            global::Pbe.AIActionSetBBIntegerConfig subBuilder = new global::Pbe.AIActionSetBBIntegerConfig();
            if (configCase_ == ConfigOneofCase.SetBBIntegerConfig) {
              subBuilder.MergeFrom(SetBBIntegerConfig);
            }
            input.ReadMessage(subBuilder);
            SetBBIntegerConfig = subBuilder;
            break;
          }
          case 178: {
            global::Pbe.AIConditionCheckBBIntegerConfig subBuilder = new global::Pbe.AIConditionCheckBBIntegerConfig();
            if (configCase_ == ConfigOneofCase.CheckBBIntegerConfig) {
              subBuilder.MergeFrom(CheckBBIntegerConfig);
            }
            input.ReadMessage(subBuilder);
            CheckBBIntegerConfig = subBuilder;
            break;
          }
          case 186: {
            global::Pbe.AIActionDoSkillConfig subBuilder = new global::Pbe.AIActionDoSkillConfig();
            if (configCase_ == ConfigOneofCase.DoSkillConfig) {
              subBuilder.MergeFrom(DoSkillConfig);
            }
            input.ReadMessage(subBuilder);
            DoSkillConfig = subBuilder;
            break;
          }
          case 194: {
            global::Pbe.AIActionDoActionConfig subBuilder = new global::Pbe.AIActionDoActionConfig();
            if (configCase_ == ConfigOneofCase.DoActionConfig) {
              subBuilder.MergeFrom(DoActionConfig);
            }
            input.ReadMessage(subBuilder);
            DoActionConfig = subBuilder;
            break;
          }
          case 202: {
            global::Pbe.AIActionAddBuffConfig subBuilder = new global::Pbe.AIActionAddBuffConfig();
            if (configCase_ == ConfigOneofCase.AddBuffConfig) {
              subBuilder.MergeFrom(AddBuffConfig);
            }
            input.ReadMessage(subBuilder);
            AddBuffConfig = subBuilder;
            break;
          }
          case 210: {
            global::Pbe.AIActionAddBuffInfoConfig subBuilder = new global::Pbe.AIActionAddBuffInfoConfig();
            if (configCase_ == ConfigOneofCase.AddBuffInfoConfig) {
              subBuilder.MergeFrom(AddBuffInfoConfig);
            }
            input.ReadMessage(subBuilder);
            AddBuffInfoConfig = subBuilder;
            break;
          }
          case 218: {
            global::Pbe.AIConditionCheckHPConfig subBuilder = new global::Pbe.AIConditionCheckHPConfig();
            if (configCase_ == ConfigOneofCase.CheckHPConfig) {
              subBuilder.MergeFrom(CheckHPConfig);
            }
            input.ReadMessage(subBuilder);
            CheckHPConfig = subBuilder;
            break;
          }
          case 226: {
            global::Pbe.AIConditionHasBuffConfig subBuilder = new global::Pbe.AIConditionHasBuffConfig();
            if (configCase_ == ConfigOneofCase.HasBuffConfig) {
              subBuilder.MergeFrom(HasBuffConfig);
            }
            input.ReadMessage(subBuilder);
            HasBuffConfig = subBuilder;
            break;
          }
          case 234: {
            global::Pbe.AIConditionUsingSkillConfig subBuilder = new global::Pbe.AIConditionUsingSkillConfig();
            if (configCase_ == ConfigOneofCase.UsingSkillConfig) {
              subBuilder.MergeFrom(UsingSkillConfig);
            }
            input.ReadMessage(subBuilder);
            UsingSkillConfig = subBuilder;
            break;
          }
          case 242: {
            global::Pbe.AIConditionCanUseSkillConfig subBuilder = new global::Pbe.AIConditionCanUseSkillConfig();
            if (configCase_ == ConfigOneofCase.CanUseSkillConfig) {
              subBuilder.MergeFrom(CanUseSkillConfig);
            }
            input.ReadMessage(subBuilder);
            CanUseSkillConfig = subBuilder;
            break;
          }
          case 250: {
            global::Pbe.AIConditionBeContraintConfig subBuilder = new global::Pbe.AIConditionBeContraintConfig();
            if (configCase_ == ConfigOneofCase.BeConstraintConfig) {
              subBuilder.MergeFrom(BeConstraintConfig);
            }
            input.ReadMessage(subBuilder);
            BeConstraintConfig = subBuilder;
            break;
          }
          case 258: {
            global::Pbe.AIActionRemoveBuffConfig subBuilder = new global::Pbe.AIActionRemoveBuffConfig();
            if (configCase_ == ConfigOneofCase.RemoveBuffConfig) {
              subBuilder.MergeFrom(RemoveBuffConfig);
            }
            input.ReadMessage(subBuilder);
            RemoveBuffConfig = subBuilder;
            break;
          }
          case 266: {
            global::Pbe.AIActionRemoveBuffInfoConfig subBuilder = new global::Pbe.AIActionRemoveBuffInfoConfig();
            if (configCase_ == ConfigOneofCase.RemoveBuffInfoConfig) {
              subBuilder.MergeFrom(RemoveBuffInfoConfig);
            }
            input.ReadMessage(subBuilder);
            RemoveBuffInfoConfig = subBuilder;
            break;
          }
          case 274: {
            global::Pbe.AIActionMoveConfig subBuilder = new global::Pbe.AIActionMoveConfig();
            if (configCase_ == ConfigOneofCase.MoveConfig) {
              subBuilder.MergeFrom(MoveConfig);
            }
            input.ReadMessage(subBuilder);
            MoveConfig = subBuilder;
            break;
          }
          case 282: {
            global::Pbe.AIActionGetUnitIDConfig subBuilder = new global::Pbe.AIActionGetUnitIDConfig();
            if (configCase_ == ConfigOneofCase.GetUnitIDConfig) {
              subBuilder.MergeFrom(GetUnitIDConfig);
            }
            input.ReadMessage(subBuilder);
            GetUnitIDConfig = subBuilder;
            break;
          }
          case 290: {
            global::Pbe.AIActionGetMonsterCountInRange subBuilder = new global::Pbe.AIActionGetMonsterCountInRange();
            if (configCase_ == ConfigOneofCase.GetRangedMonsterCountConfig) {
              subBuilder.MergeFrom(GetRangedMonsterCountConfig);
            }
            input.ReadMessage(subBuilder);
            GetRangedMonsterCountConfig = subBuilder;
            break;
          }
          case 298: {
            global::Pbe.AIActionLoafConfig subBuilder = new global::Pbe.AIActionLoafConfig();
            if (configCase_ == ConfigOneofCase.LoafConfig) {
              subBuilder.MergeFrom(LoafConfig);
            }
            input.ReadMessage(subBuilder);
            LoafConfig = subBuilder;
            break;
          }
          case 306: {
            global::Pbe.AIActionSuicideConfig subBuilder = new global::Pbe.AIActionSuicideConfig();
            if (configCase_ == ConfigOneofCase.SuicideConfig) {
              subBuilder.MergeFrom(SuicideConfig);
            }
            input.ReadMessage(subBuilder);
            SuicideConfig = subBuilder;
            break;
          }
          case 314: {
            global::Pbe.AIActionBubbleConfig subBuilder = new global::Pbe.AIActionBubbleConfig();
            if (configCase_ == ConfigOneofCase.BubbleConfig) {
              subBuilder.MergeFrom(BubbleConfig);
            }
            input.ReadMessage(subBuilder);
            BubbleConfig = subBuilder;
            break;
          }
          case 322: {
            global::Pbe.AIActionBlackBarConfig subBuilder = new global::Pbe.AIActionBlackBarConfig();
            if (configCase_ == ConfigOneofCase.BlackBarConfig) {
              subBuilder.MergeFrom(BlackBarConfig);
            }
            input.ReadMessage(subBuilder);
            BlackBarConfig = subBuilder;
            break;
          }
          case 330: {
            global::Pbe.AIActionGetPlayerUnitIDConfig subBuilder = new global::Pbe.AIActionGetPlayerUnitIDConfig();
            if (configCase_ == ConfigOneofCase.GetPlayerUnitIDConfig) {
              subBuilder.MergeFrom(GetPlayerUnitIDConfig);
            }
            input.ReadMessage(subBuilder);
            GetPlayerUnitIDConfig = subBuilder;
            break;
          }
          case 338: {
            global::Pbe.AIActionFindBackApproachConfig subBuilder = new global::Pbe.AIActionFindBackApproachConfig();
            if (configCase_ == ConfigOneofCase.FindBackapproachConfig) {
              subBuilder.MergeFrom(FindBackapproachConfig);
            }
            input.ReadMessage(subBuilder);
            FindBackapproachConfig = subBuilder;
            break;
          }
          case 346: {
            global::Pbe.AIActionBattleTipsConfig subBuilder = new global::Pbe.AIActionBattleTipsConfig();
            if (configCase_ == ConfigOneofCase.BattleTipsConfig) {
              subBuilder.MergeFrom(BattleTipsConfig);
            }
            input.ReadMessage(subBuilder);
            BattleTipsConfig = subBuilder;
            break;
          }
          case 354: {
            global::Pbe.AIActionScenarioConfig subBuilder = new global::Pbe.AIActionScenarioConfig();
            if (configCase_ == ConfigOneofCase.ScenarioConfig) {
              subBuilder.MergeFrom(ScenarioConfig);
            }
            input.ReadMessage(subBuilder);
            ScenarioConfig = subBuilder;
            break;
          }
          case 362: {
            global::Pbe.AIConditionCheckUnitStateConfig subBuilder = new global::Pbe.AIConditionCheckUnitStateConfig();
            if (configCase_ == ConfigOneofCase.CheckUnitStateConfig) {
              subBuilder.MergeFrom(CheckUnitStateConfig);
            }
            input.ReadMessage(subBuilder);
            CheckUnitStateConfig = subBuilder;
            break;
          }
          case 370: {
            global::Pbe.AIActionButtonStateConfig subBuilder = new global::Pbe.AIActionButtonStateConfig();
            if (configCase_ == ConfigOneofCase.ButtonStateConfig) {
              subBuilder.MergeFrom(ButtonStateConfig);
            }
            input.ReadMessage(subBuilder);
            ButtonStateConfig = subBuilder;
            break;
          }
          case 378: {
            global::Pbe.AIActionStartCameraOffsetConfig subBuilder = new global::Pbe.AIActionStartCameraOffsetConfig();
            if (configCase_ == ConfigOneofCase.StartCameraOffsetConfig) {
              subBuilder.MergeFrom(StartCameraOffsetConfig);
            }
            input.ReadMessage(subBuilder);
            StartCameraOffsetConfig = subBuilder;
            break;
          }
          case 386: {
            global::Pbe.AIActionCameraResetConfig subBuilder = new global::Pbe.AIActionCameraResetConfig();
            if (configCase_ == ConfigOneofCase.CameraResetConfig) {
              subBuilder.MergeFrom(CameraResetConfig);
            }
            input.ReadMessage(subBuilder);
            CameraResetConfig = subBuilder;
            break;
          }
          case 394: {
            global::Pbe.AIConditionElementDamageConfig subBuilder = new global::Pbe.AIConditionElementDamageConfig();
            if (configCase_ == ConfigOneofCase.ElementDamageConfig) {
              subBuilder.MergeFrom(ElementDamageConfig);
            }
            input.ReadMessage(subBuilder);
            ElementDamageConfig = subBuilder;
            break;
          }
          case 402: {
            global::Pbe.AIActionSetPositionConfig subBuilder = new global::Pbe.AIActionSetPositionConfig();
            if (configCase_ == ConfigOneofCase.SetPositionConfig) {
              subBuilder.MergeFrom(SetPositionConfig);
            }
            input.ReadMessage(subBuilder);
            SetPositionConfig = subBuilder;
            break;
          }
          case 410: {
            global::Pbe.AIActionGetMonsterUnitIDConfig subBuilder = new global::Pbe.AIActionGetMonsterUnitIDConfig();
            if (configCase_ == ConfigOneofCase.GetMonsterUnitIDConfig) {
              subBuilder.MergeFrom(GetMonsterUnitIDConfig);
            }
            input.ReadMessage(subBuilder);
            GetMonsterUnitIDConfig = subBuilder;
            break;
          }
          case 418: {
            global::Pbe.AIActionAttackListConfig subBuilder = new global::Pbe.AIActionAttackListConfig();
            if (configCase_ == ConfigOneofCase.AttackListConfig) {
              subBuilder.MergeFrom(AttackListConfig);
            }
            input.ReadMessage(subBuilder);
            AttackListConfig = subBuilder;
            break;
          }
          case 426: {
            global::Pbe.AIActionGetSectionDifConfig subBuilder = new global::Pbe.AIActionGetSectionDifConfig();
            if (configCase_ == ConfigOneofCase.GetSectionDifConfig) {
              subBuilder.MergeFrom(GetSectionDifConfig);
            }
            input.ReadMessage(subBuilder);
            GetSectionDifConfig = subBuilder;
            break;
          }
          case 434: {
            global::Pbe.AIActionRemoveSceneItem subBuilder = new global::Pbe.AIActionRemoveSceneItem();
            if (configCase_ == ConfigOneofCase.RemoveSceneItemConfig) {
              subBuilder.MergeFrom(RemoveSceneItemConfig);
            }
            input.ReadMessage(subBuilder);
            RemoveSceneItemConfig = subBuilder;
            break;
          }
          case 442: {
            global::Pbe.AIActionFullScreenMaskShow subBuilder = new global::Pbe.AIActionFullScreenMaskShow();
            if (configCase_ == ConfigOneofCase.FullScreenMaskShowConfig) {
              subBuilder.MergeFrom(FullScreenMaskShowConfig);
            }
            input.ReadMessage(subBuilder);
            FullScreenMaskShowConfig = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIDecorator : pb::IMessage<AIDecorator> {
    private static readonly pb::MessageParser<AIDecorator> _parser = new pb::MessageParser<AIDecorator>(() => new AIDecorator());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIDecorator> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[91]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIDecorator() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIDecorator(AIDecorator other) : this() {
      detailType_ = other.detailType_;
      switch (other.ConfigCase) {
        case ConfigOneofCase.RepeaterConfig:
          RepeaterConfig = other.RepeaterConfig.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIDecorator Clone() {
      return new AIDecorator(this);
    }

    /// <summary>Field number for the "detailType" field.</summary>
    public const int DetailTypeFieldNumber = 1;
    private int detailType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DetailType {
      get { return detailType_; }
      set {
        detailType_ = value;
      }
    }

    /// <summary>Field number for the "repeaterConfig" field.</summary>
    public const int RepeaterConfigFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.AIRepeaterConfig RepeaterConfig {
      get { return configCase_ == ConfigOneofCase.RepeaterConfig ? (global::Pbe.AIRepeaterConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.RepeaterConfig;
      }
    }

    private object config_;
    /// <summary>Enum of possible cases for the "config" oneof.</summary>
    public enum ConfigOneofCase {
      None = 0,
      RepeaterConfig = 3,
    }
    private ConfigOneofCase configCase_ = ConfigOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigOneofCase ConfigCase {
      get { return configCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConfig() {
      configCase_ = ConfigOneofCase.None;
      config_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIDecorator);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIDecorator other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DetailType != other.DetailType) return false;
      if (!object.Equals(RepeaterConfig, other.RepeaterConfig)) return false;
      if (ConfigCase != other.ConfigCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DetailType != 0) hash ^= DetailType.GetHashCode();
      if (configCase_ == ConfigOneofCase.RepeaterConfig) hash ^= RepeaterConfig.GetHashCode();
      hash ^= (int) configCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DetailType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DetailType);
      }
      if (configCase_ == ConfigOneofCase.RepeaterConfig) {
        output.WriteRawTag(26);
        output.WriteMessage(RepeaterConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DetailType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DetailType);
      }
      if (configCase_ == ConfigOneofCase.RepeaterConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RepeaterConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIDecorator other) {
      if (other == null) {
        return;
      }
      if (other.DetailType != 0) {
        DetailType = other.DetailType;
      }
      switch (other.ConfigCase) {
        case ConfigOneofCase.RepeaterConfig:
          if (RepeaterConfig == null) {
            RepeaterConfig = new global::Pbe.AIRepeaterConfig();
          }
          RepeaterConfig.MergeFrom(other.RepeaterConfig);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DetailType = input.ReadInt32();
            break;
          }
          case 26: {
            global::Pbe.AIRepeaterConfig subBuilder = new global::Pbe.AIRepeaterConfig();
            if (configCase_ == ConfigOneofCase.RepeaterConfig) {
              subBuilder.MergeFrom(RepeaterConfig);
            }
            input.ReadMessage(subBuilder);
            RepeaterConfig = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIActionAttackConfig : pb::IMessage<AIActionAttackConfig> {
    private static readonly pb::MessageParser<AIActionAttackConfig> _parser = new pb::MessageParser<AIActionAttackConfig>(() => new AIActionAttackConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIActionAttackConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[92]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionAttackConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionAttackConfig(AIActionAttackConfig other) : this() {
      attackType_ = other.attackType_;
      actionFollow_ = other.actionFollow_;
      effectFollow_ = other.effectFollow_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionAttackConfig Clone() {
      return new AIActionAttackConfig(this);
    }

    /// <summary>Field number for the "attackType" field.</summary>
    public const int AttackTypeFieldNumber = 1;
    private int attackType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackType {
      get { return attackType_; }
      set {
        attackType_ = value;
      }
    }

    /// <summary>Field number for the "actionFollow" field.</summary>
    public const int ActionFollowFieldNumber = 2;
    private bool actionFollow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ActionFollow {
      get { return actionFollow_; }
      set {
        actionFollow_ = value;
      }
    }

    /// <summary>Field number for the "effectFollow" field.</summary>
    public const int EffectFollowFieldNumber = 3;
    private bool effectFollow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EffectFollow {
      get { return effectFollow_; }
      set {
        effectFollow_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIActionAttackConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIActionAttackConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AttackType != other.AttackType) return false;
      if (ActionFollow != other.ActionFollow) return false;
      if (EffectFollow != other.EffectFollow) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AttackType != 0) hash ^= AttackType.GetHashCode();
      if (ActionFollow != false) hash ^= ActionFollow.GetHashCode();
      if (EffectFollow != false) hash ^= EffectFollow.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AttackType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AttackType);
      }
      if (ActionFollow != false) {
        output.WriteRawTag(16);
        output.WriteBool(ActionFollow);
      }
      if (EffectFollow != false) {
        output.WriteRawTag(24);
        output.WriteBool(EffectFollow);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AttackType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackType);
      }
      if (ActionFollow != false) {
        size += 1 + 1;
      }
      if (EffectFollow != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIActionAttackConfig other) {
      if (other == null) {
        return;
      }
      if (other.AttackType != 0) {
        AttackType = other.AttackType;
      }
      if (other.ActionFollow != false) {
        ActionFollow = other.ActionFollow;
      }
      if (other.EffectFollow != false) {
        EffectFollow = other.EffectFollow;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AttackType = input.ReadInt32();
            break;
          }
          case 16: {
            ActionFollow = input.ReadBool();
            break;
          }
          case 24: {
            EffectFollow = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIActionAwayTargetConfig : pb::IMessage<AIActionAwayTargetConfig> {
    private static readonly pb::MessageParser<AIActionAwayTargetConfig> _parser = new pb::MessageParser<AIActionAwayTargetConfig>(() => new AIActionAwayTargetConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIActionAwayTargetConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[93]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionAwayTargetConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionAwayTargetConfig(AIActionAwayTargetConfig other) : this() {
      faceType_ = other.faceType_;
      moveType_ = other.moveType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionAwayTargetConfig Clone() {
      return new AIActionAwayTargetConfig(this);
    }

    /// <summary>Field number for the "faceType" field.</summary>
    public const int FaceTypeFieldNumber = 1;
    private int faceType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FaceType {
      get { return faceType_; }
      set {
        faceType_ = value;
      }
    }

    /// <summary>Field number for the "moveType" field.</summary>
    public const int MoveTypeFieldNumber = 2;
    private int moveType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MoveType {
      get { return moveType_; }
      set {
        moveType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIActionAwayTargetConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIActionAwayTargetConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FaceType != other.FaceType) return false;
      if (MoveType != other.MoveType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FaceType != 0) hash ^= FaceType.GetHashCode();
      if (MoveType != 0) hash ^= MoveType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FaceType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FaceType);
      }
      if (MoveType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MoveType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FaceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FaceType);
      }
      if (MoveType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoveType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIActionAwayTargetConfig other) {
      if (other == null) {
        return;
      }
      if (other.FaceType != 0) {
        FaceType = other.FaceType;
      }
      if (other.MoveType != 0) {
        MoveType = other.MoveType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FaceType = input.ReadInt32();
            break;
          }
          case 16: {
            MoveType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIActionDirectlyApproachConfig : pb::IMessage<AIActionDirectlyApproachConfig> {
    private static readonly pb::MessageParser<AIActionDirectlyApproachConfig> _parser = new pb::MessageParser<AIActionDirectlyApproachConfig>(() => new AIActionDirectlyApproachConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIActionDirectlyApproachConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[94]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionDirectlyApproachConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionDirectlyApproachConfig(AIActionDirectlyApproachConfig other) : this() {
      closeType_ = other.closeType_;
      directionType_ = other.directionType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionDirectlyApproachConfig Clone() {
      return new AIActionDirectlyApproachConfig(this);
    }

    /// <summary>Field number for the "closeType" field.</summary>
    public const int CloseTypeFieldNumber = 1;
    private int closeType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CloseType {
      get { return closeType_; }
      set {
        closeType_ = value;
      }
    }

    /// <summary>Field number for the "directionType" field.</summary>
    public const int DirectionTypeFieldNumber = 2;
    private int directionType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DirectionType {
      get { return directionType_; }
      set {
        directionType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIActionDirectlyApproachConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIActionDirectlyApproachConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CloseType != other.CloseType) return false;
      if (DirectionType != other.DirectionType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CloseType != 0) hash ^= CloseType.GetHashCode();
      if (DirectionType != 0) hash ^= DirectionType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CloseType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CloseType);
      }
      if (DirectionType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DirectionType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CloseType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CloseType);
      }
      if (DirectionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DirectionType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIActionDirectlyApproachConfig other) {
      if (other == null) {
        return;
      }
      if (other.CloseType != 0) {
        CloseType = other.CloseType;
      }
      if (other.DirectionType != 0) {
        DirectionType = other.DirectionType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CloseType = input.ReadInt32();
            break;
          }
          case 16: {
            DirectionType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIActionFindBackApproachConfig : pb::IMessage<AIActionFindBackApproachConfig> {
    private static readonly pb::MessageParser<AIActionFindBackApproachConfig> _parser = new pb::MessageParser<AIActionFindBackApproachConfig>(() => new AIActionFindBackApproachConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIActionFindBackApproachConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[95]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionFindBackApproachConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionFindBackApproachConfig(AIActionFindBackApproachConfig other) : this() {
      param_ = other.param_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionFindBackApproachConfig Clone() {
      return new AIActionFindBackApproachConfig(this);
    }

    /// <summary>Field number for the "param" field.</summary>
    public const int ParamFieldNumber = 1;
    private int param_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Param {
      get { return param_; }
      set {
        param_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIActionFindBackApproachConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIActionFindBackApproachConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Param != other.Param) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Param != 0) hash ^= Param.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Param != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Param);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Param != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Param);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIActionFindBackApproachConfig other) {
      if (other == null) {
        return;
      }
      if (other.Param != 0) {
        Param = other.Param;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Param = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIActionCloseConfig : pb::IMessage<AIActionCloseConfig> {
    private static readonly pb::MessageParser<AIActionCloseConfig> _parser = new pb::MessageParser<AIActionCloseConfig>(() => new AIActionCloseConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIActionCloseConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[96]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionCloseConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionCloseConfig(AIActionCloseConfig other) : this() {
      limitNode_ = other.limitNode_;
      breakType_ = other.breakType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionCloseConfig Clone() {
      return new AIActionCloseConfig(this);
    }

    /// <summary>Field number for the "limitNode" field.</summary>
    public const int LimitNodeFieldNumber = 1;
    private int limitNode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LimitNode {
      get { return limitNode_; }
      set {
        limitNode_ = value;
      }
    }

    /// <summary>Field number for the "breakType" field.</summary>
    public const int BreakTypeFieldNumber = 2;
    private int breakType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BreakType {
      get { return breakType_; }
      set {
        breakType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIActionCloseConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIActionCloseConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LimitNode != other.LimitNode) return false;
      if (BreakType != other.BreakType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LimitNode != 0) hash ^= LimitNode.GetHashCode();
      if (BreakType != 0) hash ^= BreakType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LimitNode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LimitNode);
      }
      if (BreakType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BreakType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LimitNode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LimitNode);
      }
      if (BreakType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BreakType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIActionCloseConfig other) {
      if (other == null) {
        return;
      }
      if (other.LimitNode != 0) {
        LimitNode = other.LimitNode;
      }
      if (other.BreakType != 0) {
        BreakType = other.BreakType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LimitNode = input.ReadInt32();
            break;
          }
          case 16: {
            BreakType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIActionCloseTargetConfig : pb::IMessage<AIActionCloseTargetConfig> {
    private static readonly pb::MessageParser<AIActionCloseTargetConfig> _parser = new pb::MessageParser<AIActionCloseTargetConfig>(() => new AIActionCloseTargetConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIActionCloseTargetConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[97]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionCloseTargetConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionCloseTargetConfig(AIActionCloseTargetConfig other) : this() {
      moveType_ = other.moveType_;
      timeType_ = other.timeType_;
      tickNum_ = other.tickNum_;
      tickNumRandomMin_ = other.tickNumRandomMin_;
      tickNumRandomMax_ = other.tickNumRandomMax_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionCloseTargetConfig Clone() {
      return new AIActionCloseTargetConfig(this);
    }

    /// <summary>Field number for the "moveType" field.</summary>
    public const int MoveTypeFieldNumber = 1;
    private int moveType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MoveType {
      get { return moveType_; }
      set {
        moveType_ = value;
      }
    }

    /// <summary>Field number for the "timeType" field.</summary>
    public const int TimeTypeFieldNumber = 2;
    private int timeType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimeType {
      get { return timeType_; }
      set {
        timeType_ = value;
      }
    }

    /// <summary>Field number for the "tickNum" field.</summary>
    public const int TickNumFieldNumber = 3;
    private float tickNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TickNum {
      get { return tickNum_; }
      set {
        tickNum_ = value;
      }
    }

    /// <summary>Field number for the "tickNumRandomMin" field.</summary>
    public const int TickNumRandomMinFieldNumber = 4;
    private float tickNumRandomMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TickNumRandomMin {
      get { return tickNumRandomMin_; }
      set {
        tickNumRandomMin_ = value;
      }
    }

    /// <summary>Field number for the "tickNumRandomMax" field.</summary>
    public const int TickNumRandomMaxFieldNumber = 5;
    private float tickNumRandomMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TickNumRandomMax {
      get { return tickNumRandomMax_; }
      set {
        tickNumRandomMax_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIActionCloseTargetConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIActionCloseTargetConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MoveType != other.MoveType) return false;
      if (TimeType != other.TimeType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TickNum, other.TickNum)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TickNumRandomMin, other.TickNumRandomMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TickNumRandomMax, other.TickNumRandomMax)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MoveType != 0) hash ^= MoveType.GetHashCode();
      if (TimeType != 0) hash ^= TimeType.GetHashCode();
      if (TickNum != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TickNum);
      if (TickNumRandomMin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TickNumRandomMin);
      if (TickNumRandomMax != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TickNumRandomMax);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MoveType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MoveType);
      }
      if (TimeType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TimeType);
      }
      if (TickNum != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(TickNum);
      }
      if (TickNumRandomMin != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(TickNumRandomMin);
      }
      if (TickNumRandomMax != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(TickNumRandomMax);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MoveType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoveType);
      }
      if (TimeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeType);
      }
      if (TickNum != 0F) {
        size += 1 + 4;
      }
      if (TickNumRandomMin != 0F) {
        size += 1 + 4;
      }
      if (TickNumRandomMax != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIActionCloseTargetConfig other) {
      if (other == null) {
        return;
      }
      if (other.MoveType != 0) {
        MoveType = other.MoveType;
      }
      if (other.TimeType != 0) {
        TimeType = other.TimeType;
      }
      if (other.TickNum != 0F) {
        TickNum = other.TickNum;
      }
      if (other.TickNumRandomMin != 0F) {
        TickNumRandomMin = other.TickNumRandomMin;
      }
      if (other.TickNumRandomMax != 0F) {
        TickNumRandomMax = other.TickNumRandomMax;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MoveType = input.ReadInt32();
            break;
          }
          case 16: {
            TimeType = input.ReadInt32();
            break;
          }
          case 29: {
            TickNum = input.ReadFloat();
            break;
          }
          case 37: {
            TickNumRandomMin = input.ReadFloat();
            break;
          }
          case 45: {
            TickNumRandomMax = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIActionCycleCloseConfig : pb::IMessage<AIActionCycleCloseConfig> {
    private static readonly pb::MessageParser<AIActionCycleCloseConfig> _parser = new pb::MessageParser<AIActionCycleCloseConfig>(() => new AIActionCycleCloseConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIActionCycleCloseConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[98]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionCycleCloseConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionCycleCloseConfig(AIActionCycleCloseConfig other) : this() {
      actionType_ = other.actionType_;
      cycleType_ = other.cycleType_;
      count_ = other.count_;
      minCount_ = other.minCount_;
      maxCount_ = other.maxCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionCycleCloseConfig Clone() {
      return new AIActionCycleCloseConfig(this);
    }

    /// <summary>Field number for the "actionType" field.</summary>
    public const int ActionTypeFieldNumber = 1;
    private int actionType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActionType {
      get { return actionType_; }
      set {
        actionType_ = value;
      }
    }

    /// <summary>Field number for the "cycleType" field.</summary>
    public const int CycleTypeFieldNumber = 2;
    private int cycleType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CycleType {
      get { return cycleType_; }
      set {
        cycleType_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "minCount" field.</summary>
    public const int MinCountFieldNumber = 4;
    private int minCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinCount {
      get { return minCount_; }
      set {
        minCount_ = value;
      }
    }

    /// <summary>Field number for the "maxCount" field.</summary>
    public const int MaxCountFieldNumber = 5;
    private int maxCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxCount {
      get { return maxCount_; }
      set {
        maxCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIActionCycleCloseConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIActionCycleCloseConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActionType != other.ActionType) return false;
      if (CycleType != other.CycleType) return false;
      if (Count != other.Count) return false;
      if (MinCount != other.MinCount) return false;
      if (MaxCount != other.MaxCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActionType != 0) hash ^= ActionType.GetHashCode();
      if (CycleType != 0) hash ^= CycleType.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (MinCount != 0) hash ^= MinCount.GetHashCode();
      if (MaxCount != 0) hash ^= MaxCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActionType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActionType);
      }
      if (CycleType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CycleType);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Count);
      }
      if (MinCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MinCount);
      }
      if (MaxCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionType);
      }
      if (CycleType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CycleType);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (MinCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinCount);
      }
      if (MaxCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIActionCycleCloseConfig other) {
      if (other == null) {
        return;
      }
      if (other.ActionType != 0) {
        ActionType = other.ActionType;
      }
      if (other.CycleType != 0) {
        CycleType = other.CycleType;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.MinCount != 0) {
        MinCount = other.MinCount;
      }
      if (other.MaxCount != 0) {
        MaxCount = other.MaxCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ActionType = input.ReadInt32();
            break;
          }
          case 16: {
            CycleType = input.ReadInt32();
            break;
          }
          case 24: {
            Count = input.ReadInt32();
            break;
          }
          case 32: {
            MinCount = input.ReadInt32();
            break;
          }
          case 40: {
            MaxCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIActionIdleConfig : pb::IMessage<AIActionIdleConfig> {
    private static readonly pb::MessageParser<AIActionIdleConfig> _parser = new pb::MessageParser<AIActionIdleConfig>(() => new AIActionIdleConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIActionIdleConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[99]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionIdleConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionIdleConfig(AIActionIdleConfig other) : this() {
      idleType_ = other.idleType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionIdleConfig Clone() {
      return new AIActionIdleConfig(this);
    }

    /// <summary>Field number for the "idleType" field.</summary>
    public const int IdleTypeFieldNumber = 1;
    private int idleType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IdleType {
      get { return idleType_; }
      set {
        idleType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIActionIdleConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIActionIdleConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IdleType != other.IdleType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IdleType != 0) hash ^= IdleType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IdleType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IdleType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IdleType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IdleType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIActionIdleConfig other) {
      if (other == null) {
        return;
      }
      if (other.IdleType != 0) {
        IdleType = other.IdleType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IdleType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIActionWanderConfig : pb::IMessage<AIActionWanderConfig> {
    private static readonly pb::MessageParser<AIActionWanderConfig> _parser = new pb::MessageParser<AIActionWanderConfig>(() => new AIActionWanderConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIActionWanderConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[100]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionWanderConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionWanderConfig(AIActionWanderConfig other) : this() {
      wanderType_ = other.wanderType_;
      moveType_ = other.moveType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionWanderConfig Clone() {
      return new AIActionWanderConfig(this);
    }

    /// <summary>Field number for the "wanderType" field.</summary>
    public const int WanderTypeFieldNumber = 1;
    private int wanderType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WanderType {
      get { return wanderType_; }
      set {
        wanderType_ = value;
      }
    }

    /// <summary>Field number for the "moveType" field.</summary>
    public const int MoveTypeFieldNumber = 2;
    private int moveType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MoveType {
      get { return moveType_; }
      set {
        moveType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIActionWanderConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIActionWanderConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WanderType != other.WanderType) return false;
      if (MoveType != other.MoveType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WanderType != 0) hash ^= WanderType.GetHashCode();
      if (MoveType != 0) hash ^= MoveType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WanderType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WanderType);
      }
      if (MoveType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MoveType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WanderType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WanderType);
      }
      if (MoveType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoveType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIActionWanderConfig other) {
      if (other == null) {
        return;
      }
      if (other.WanderType != 0) {
        WanderType = other.WanderType;
      }
      if (other.MoveType != 0) {
        MoveType = other.MoveType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WanderType = input.ReadInt32();
            break;
          }
          case 16: {
            MoveType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIActionZigApproachConfig : pb::IMessage<AIActionZigApproachConfig> {
    private static readonly pb::MessageParser<AIActionZigApproachConfig> _parser = new pb::MessageParser<AIActionZigApproachConfig>(() => new AIActionZigApproachConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIActionZigApproachConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[101]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionZigApproachConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionZigApproachConfig(AIActionZigApproachConfig other) : this() {
      angle_ = other.angle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionZigApproachConfig Clone() {
      return new AIActionZigApproachConfig(this);
    }

    /// <summary>Field number for the "angle" field.</summary>
    public const int AngleFieldNumber = 1;
    private float angle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIActionZigApproachConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIActionZigApproachConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Angle, other.Angle)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Angle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Angle);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Angle != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Angle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Angle != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIActionZigApproachConfig other) {
      if (other == null) {
        return;
      }
      if (other.Angle != 0F) {
        Angle = other.Angle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Angle = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIActionWaitConfig : pb::IMessage<AIActionWaitConfig> {
    private static readonly pb::MessageParser<AIActionWaitConfig> _parser = new pb::MessageParser<AIActionWaitConfig>(() => new AIActionWaitConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIActionWaitConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[102]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionWaitConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionWaitConfig(AIActionWaitConfig other) : this() {
      milliseconds_ = other.milliseconds_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionWaitConfig Clone() {
      return new AIActionWaitConfig(this);
    }

    /// <summary>Field number for the "milliseconds" field.</summary>
    public const int MillisecondsFieldNumber = 1;
    private int milliseconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Milliseconds {
      get { return milliseconds_; }
      set {
        milliseconds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIActionWaitConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIActionWaitConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Milliseconds != other.Milliseconds) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Milliseconds != 0) hash ^= Milliseconds.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Milliseconds != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Milliseconds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Milliseconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Milliseconds);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIActionWaitConfig other) {
      if (other == null) {
        return;
      }
      if (other.Milliseconds != 0) {
        Milliseconds = other.Milliseconds;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Milliseconds = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIConditionDistanceXYConfig : pb::IMessage<AIConditionDistanceXYConfig> {
    private static readonly pb::MessageParser<AIConditionDistanceXYConfig> _parser = new pb::MessageParser<AIConditionDistanceXYConfig>(() => new AIConditionDistanceXYConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIConditionDistanceXYConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[103]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIConditionDistanceXYConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIConditionDistanceXYConfig(AIConditionDistanceXYConfig other) : this() {
      xDistanceType_ = other.xDistanceType_;
      xDistance_ = other.xDistance_;
      zDistanceType_ = other.zDistanceType_;
      zDistance_ = other.zDistance_;
      calType_ = other.calType_;
      faceOnly_ = other.faceOnly_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIConditionDistanceXYConfig Clone() {
      return new AIConditionDistanceXYConfig(this);
    }

    /// <summary>Field number for the "xDistanceType" field.</summary>
    public const int XDistanceTypeFieldNumber = 1;
    private int xDistanceType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int XDistanceType {
      get { return xDistanceType_; }
      set {
        xDistanceType_ = value;
      }
    }

    /// <summary>Field number for the "xDistance" field.</summary>
    public const int XDistanceFieldNumber = 2;
    private float xDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float XDistance {
      get { return xDistance_; }
      set {
        xDistance_ = value;
      }
    }

    /// <summary>Field number for the "zDistanceType" field.</summary>
    public const int ZDistanceTypeFieldNumber = 3;
    private int zDistanceType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ZDistanceType {
      get { return zDistanceType_; }
      set {
        zDistanceType_ = value;
      }
    }

    /// <summary>Field number for the "zDistance" field.</summary>
    public const int ZDistanceFieldNumber = 4;
    private float zDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ZDistance {
      get { return zDistance_; }
      set {
        zDistance_ = value;
      }
    }

    /// <summary>Field number for the "calType" field.</summary>
    public const int CalTypeFieldNumber = 5;
    private int calType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalType {
      get { return calType_; }
      set {
        calType_ = value;
      }
    }

    /// <summary>Field number for the "faceOnly" field.</summary>
    public const int FaceOnlyFieldNumber = 6;
    private bool faceOnly_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FaceOnly {
      get { return faceOnly_; }
      set {
        faceOnly_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIConditionDistanceXYConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIConditionDistanceXYConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (XDistanceType != other.XDistanceType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(XDistance, other.XDistance)) return false;
      if (ZDistanceType != other.ZDistanceType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ZDistance, other.ZDistance)) return false;
      if (CalType != other.CalType) return false;
      if (FaceOnly != other.FaceOnly) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (XDistanceType != 0) hash ^= XDistanceType.GetHashCode();
      if (XDistance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(XDistance);
      if (ZDistanceType != 0) hash ^= ZDistanceType.GetHashCode();
      if (ZDistance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ZDistance);
      if (CalType != 0) hash ^= CalType.GetHashCode();
      if (FaceOnly != false) hash ^= FaceOnly.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (XDistanceType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(XDistanceType);
      }
      if (XDistance != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(XDistance);
      }
      if (ZDistanceType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ZDistanceType);
      }
      if (ZDistance != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(ZDistance);
      }
      if (CalType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CalType);
      }
      if (FaceOnly != false) {
        output.WriteRawTag(48);
        output.WriteBool(FaceOnly);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (XDistanceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(XDistanceType);
      }
      if (XDistance != 0F) {
        size += 1 + 4;
      }
      if (ZDistanceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ZDistanceType);
      }
      if (ZDistance != 0F) {
        size += 1 + 4;
      }
      if (CalType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CalType);
      }
      if (FaceOnly != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIConditionDistanceXYConfig other) {
      if (other == null) {
        return;
      }
      if (other.XDistanceType != 0) {
        XDistanceType = other.XDistanceType;
      }
      if (other.XDistance != 0F) {
        XDistance = other.XDistance;
      }
      if (other.ZDistanceType != 0) {
        ZDistanceType = other.ZDistanceType;
      }
      if (other.ZDistance != 0F) {
        ZDistance = other.ZDistance;
      }
      if (other.CalType != 0) {
        CalType = other.CalType;
      }
      if (other.FaceOnly != false) {
        FaceOnly = other.FaceOnly;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            XDistanceType = input.ReadInt32();
            break;
          }
          case 21: {
            XDistance = input.ReadFloat();
            break;
          }
          case 24: {
            ZDistanceType = input.ReadInt32();
            break;
          }
          case 37: {
            ZDistance = input.ReadFloat();
            break;
          }
          case 40: {
            CalType = input.ReadInt32();
            break;
          }
          case 48: {
            FaceOnly = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIConditionDistanceTarget : pb::IMessage<AIConditionDistanceTarget> {
    private static readonly pb::MessageParser<AIConditionDistanceTarget> _parser = new pb::MessageParser<AIConditionDistanceTarget>(() => new AIConditionDistanceTarget());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIConditionDistanceTarget> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[104]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIConditionDistanceTarget() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIConditionDistanceTarget(AIConditionDistanceTarget other) : this() {
      distanceType_ = other.distanceType_;
      compareType_ = other.compareType_;
      distance_ = other.distance_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIConditionDistanceTarget Clone() {
      return new AIConditionDistanceTarget(this);
    }

    /// <summary>Field number for the "distanceType" field.</summary>
    public const int DistanceTypeFieldNumber = 1;
    private int distanceType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DistanceType {
      get { return distanceType_; }
      set {
        distanceType_ = value;
      }
    }

    /// <summary>Field number for the "compareType" field.</summary>
    public const int CompareTypeFieldNumber = 2;
    private int compareType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CompareType {
      get { return compareType_; }
      set {
        compareType_ = value;
      }
    }

    /// <summary>Field number for the "distance" field.</summary>
    public const int DistanceFieldNumber = 3;
    private float distance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Distance {
      get { return distance_; }
      set {
        distance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIConditionDistanceTarget);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIConditionDistanceTarget other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DistanceType != other.DistanceType) return false;
      if (CompareType != other.CompareType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Distance, other.Distance)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DistanceType != 0) hash ^= DistanceType.GetHashCode();
      if (CompareType != 0) hash ^= CompareType.GetHashCode();
      if (Distance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Distance);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DistanceType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DistanceType);
      }
      if (CompareType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CompareType);
      }
      if (Distance != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Distance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DistanceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DistanceType);
      }
      if (CompareType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CompareType);
      }
      if (Distance != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIConditionDistanceTarget other) {
      if (other == null) {
        return;
      }
      if (other.DistanceType != 0) {
        DistanceType = other.DistanceType;
      }
      if (other.CompareType != 0) {
        CompareType = other.CompareType;
      }
      if (other.Distance != 0F) {
        Distance = other.Distance;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DistanceType = input.ReadInt32();
            break;
          }
          case 16: {
            CompareType = input.ReadInt32();
            break;
          }
          case 29: {
            Distance = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIConditionCheckBBIntegerConfig : pb::IMessage<AIConditionCheckBBIntegerConfig> {
    private static readonly pb::MessageParser<AIConditionCheckBBIntegerConfig> _parser = new pb::MessageParser<AIConditionCheckBBIntegerConfig>(() => new AIConditionCheckBBIntegerConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIConditionCheckBBIntegerConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[105]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIConditionCheckBBIntegerConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIConditionCheckBBIntegerConfig(AIConditionCheckBBIntegerConfig other) : this() {
      bbInteger_ = other.bbInteger_ != null ? other.bbInteger_.Clone() : null;
      checkType_ = other.checkType_;
      value2Check_ = other.value2Check_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIConditionCheckBBIntegerConfig Clone() {
      return new AIConditionCheckBBIntegerConfig(this);
    }

    /// <summary>Field number for the "bbInteger" field.</summary>
    public const int BbIntegerFieldNumber = 1;
    private global::Pbe.BBParam bbInteger_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.BBParam BbInteger {
      get { return bbInteger_; }
      set {
        bbInteger_ = value;
      }
    }

    /// <summary>Field number for the "checkType" field.</summary>
    public const int CheckTypeFieldNumber = 2;
    private int checkType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CheckType {
      get { return checkType_; }
      set {
        checkType_ = value;
      }
    }

    /// <summary>Field number for the "value2Check" field.</summary>
    public const int Value2CheckFieldNumber = 3;
    private int value2Check_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value2Check {
      get { return value2Check_; }
      set {
        value2Check_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIConditionCheckBBIntegerConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIConditionCheckBBIntegerConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BbInteger, other.BbInteger)) return false;
      if (CheckType != other.CheckType) return false;
      if (Value2Check != other.Value2Check) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (bbInteger_ != null) hash ^= BbInteger.GetHashCode();
      if (CheckType != 0) hash ^= CheckType.GetHashCode();
      if (Value2Check != 0) hash ^= Value2Check.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (bbInteger_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BbInteger);
      }
      if (CheckType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CheckType);
      }
      if (Value2Check != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Value2Check);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (bbInteger_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BbInteger);
      }
      if (CheckType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CheckType);
      }
      if (Value2Check != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value2Check);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIConditionCheckBBIntegerConfig other) {
      if (other == null) {
        return;
      }
      if (other.bbInteger_ != null) {
        if (bbInteger_ == null) {
          bbInteger_ = new global::Pbe.BBParam();
        }
        BbInteger.MergeFrom(other.BbInteger);
      }
      if (other.CheckType != 0) {
        CheckType = other.CheckType;
      }
      if (other.Value2Check != 0) {
        Value2Check = other.Value2Check;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (bbInteger_ == null) {
              bbInteger_ = new global::Pbe.BBParam();
            }
            input.ReadMessage(bbInteger_);
            break;
          }
          case 16: {
            CheckType = input.ReadInt32();
            break;
          }
          case 24: {
            Value2Check = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIConditionCheckHPConfig : pb::IMessage<AIConditionCheckHPConfig> {
    private static readonly pb::MessageParser<AIConditionCheckHPConfig> _parser = new pb::MessageParser<AIConditionCheckHPConfig>(() => new AIConditionCheckHPConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIConditionCheckHPConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[106]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIConditionCheckHPConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIConditionCheckHPConfig(AIConditionCheckHPConfig other) : this() {
      targetType_ = other.targetType_;
      targetID_ = other.targetID_ != null ? other.targetID_.Clone() : null;
      compareType_ = other.compareType_;
      valueRefer_ = other.valueRefer_;
      hpValueOrPercent_ = other.hpValueOrPercent_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIConditionCheckHPConfig Clone() {
      return new AIConditionCheckHPConfig(this);
    }

    /// <summary>Field number for the "targetType" field.</summary>
    public const int TargetTypeFieldNumber = 1;
    private int targetType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetType {
      get { return targetType_; }
      set {
        targetType_ = value;
      }
    }

    /// <summary>Field number for the "targetID" field.</summary>
    public const int TargetIDFieldNumber = 2;
    private global::Pbe.BBParam targetID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.BBParam TargetID {
      get { return targetID_; }
      set {
        targetID_ = value;
      }
    }

    /// <summary>Field number for the "compareType" field.</summary>
    public const int CompareTypeFieldNumber = 3;
    private int compareType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CompareType {
      get { return compareType_; }
      set {
        compareType_ = value;
      }
    }

    /// <summary>Field number for the "valueRefer" field.</summary>
    public const int ValueReferFieldNumber = 4;
    private int valueRefer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ValueRefer {
      get { return valueRefer_; }
      set {
        valueRefer_ = value;
      }
    }

    /// <summary>Field number for the "hpValueOrPercent" field.</summary>
    public const int HpValueOrPercentFieldNumber = 5;
    private int hpValueOrPercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HpValueOrPercent {
      get { return hpValueOrPercent_; }
      set {
        hpValueOrPercent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIConditionCheckHPConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIConditionCheckHPConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetType != other.TargetType) return false;
      if (!object.Equals(TargetID, other.TargetID)) return false;
      if (CompareType != other.CompareType) return false;
      if (ValueRefer != other.ValueRefer) return false;
      if (HpValueOrPercent != other.HpValueOrPercent) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TargetType != 0) hash ^= TargetType.GetHashCode();
      if (targetID_ != null) hash ^= TargetID.GetHashCode();
      if (CompareType != 0) hash ^= CompareType.GetHashCode();
      if (ValueRefer != 0) hash ^= ValueRefer.GetHashCode();
      if (HpValueOrPercent != 0) hash ^= HpValueOrPercent.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TargetType);
      }
      if (targetID_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TargetID);
      }
      if (CompareType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CompareType);
      }
      if (ValueRefer != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ValueRefer);
      }
      if (HpValueOrPercent != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(HpValueOrPercent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetType);
      }
      if (targetID_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetID);
      }
      if (CompareType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CompareType);
      }
      if (ValueRefer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ValueRefer);
      }
      if (HpValueOrPercent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HpValueOrPercent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIConditionCheckHPConfig other) {
      if (other == null) {
        return;
      }
      if (other.TargetType != 0) {
        TargetType = other.TargetType;
      }
      if (other.targetID_ != null) {
        if (targetID_ == null) {
          targetID_ = new global::Pbe.BBParam();
        }
        TargetID.MergeFrom(other.TargetID);
      }
      if (other.CompareType != 0) {
        CompareType = other.CompareType;
      }
      if (other.ValueRefer != 0) {
        ValueRefer = other.ValueRefer;
      }
      if (other.HpValueOrPercent != 0) {
        HpValueOrPercent = other.HpValueOrPercent;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TargetType = input.ReadInt32();
            break;
          }
          case 18: {
            if (targetID_ == null) {
              targetID_ = new global::Pbe.BBParam();
            }
            input.ReadMessage(targetID_);
            break;
          }
          case 24: {
            CompareType = input.ReadInt32();
            break;
          }
          case 32: {
            ValueRefer = input.ReadInt32();
            break;
          }
          case 40: {
            HpValueOrPercent = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIConditionHasBuffConfig : pb::IMessage<AIConditionHasBuffConfig> {
    private static readonly pb::MessageParser<AIConditionHasBuffConfig> _parser = new pb::MessageParser<AIConditionHasBuffConfig>(() => new AIConditionHasBuffConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIConditionHasBuffConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[107]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIConditionHasBuffConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIConditionHasBuffConfig(AIConditionHasBuffConfig other) : this() {
      targetType_ = other.targetType_;
      targetID_ = other.targetID_ != null ? other.targetID_.Clone() : null;
      buffID_ = other.buffID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIConditionHasBuffConfig Clone() {
      return new AIConditionHasBuffConfig(this);
    }

    /// <summary>Field number for the "targetType" field.</summary>
    public const int TargetTypeFieldNumber = 1;
    private int targetType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetType {
      get { return targetType_; }
      set {
        targetType_ = value;
      }
    }

    /// <summary>Field number for the "targetID" field.</summary>
    public const int TargetIDFieldNumber = 2;
    private global::Pbe.BBParam targetID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.BBParam TargetID {
      get { return targetID_; }
      set {
        targetID_ = value;
      }
    }

    /// <summary>Field number for the "buffID" field.</summary>
    public const int BuffIDFieldNumber = 3;
    private int buffID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuffID {
      get { return buffID_; }
      set {
        buffID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIConditionHasBuffConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIConditionHasBuffConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetType != other.TargetType) return false;
      if (!object.Equals(TargetID, other.TargetID)) return false;
      if (BuffID != other.BuffID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TargetType != 0) hash ^= TargetType.GetHashCode();
      if (targetID_ != null) hash ^= TargetID.GetHashCode();
      if (BuffID != 0) hash ^= BuffID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TargetType);
      }
      if (targetID_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TargetID);
      }
      if (BuffID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BuffID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetType);
      }
      if (targetID_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetID);
      }
      if (BuffID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuffID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIConditionHasBuffConfig other) {
      if (other == null) {
        return;
      }
      if (other.TargetType != 0) {
        TargetType = other.TargetType;
      }
      if (other.targetID_ != null) {
        if (targetID_ == null) {
          targetID_ = new global::Pbe.BBParam();
        }
        TargetID.MergeFrom(other.TargetID);
      }
      if (other.BuffID != 0) {
        BuffID = other.BuffID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TargetType = input.ReadInt32();
            break;
          }
          case 18: {
            if (targetID_ == null) {
              targetID_ = new global::Pbe.BBParam();
            }
            input.ReadMessage(targetID_);
            break;
          }
          case 24: {
            BuffID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIConditionUsingSkillConfig : pb::IMessage<AIConditionUsingSkillConfig> {
    private static readonly pb::MessageParser<AIConditionUsingSkillConfig> _parser = new pb::MessageParser<AIConditionUsingSkillConfig>(() => new AIConditionUsingSkillConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIConditionUsingSkillConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[108]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIConditionUsingSkillConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIConditionUsingSkillConfig(AIConditionUsingSkillConfig other) : this() {
      targetType_ = other.targetType_;
      targetID_ = other.targetID_ != null ? other.targetID_.Clone() : null;
      skillID_ = other.skillID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIConditionUsingSkillConfig Clone() {
      return new AIConditionUsingSkillConfig(this);
    }

    /// <summary>Field number for the "targetType" field.</summary>
    public const int TargetTypeFieldNumber = 1;
    private int targetType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetType {
      get { return targetType_; }
      set {
        targetType_ = value;
      }
    }

    /// <summary>Field number for the "targetID" field.</summary>
    public const int TargetIDFieldNumber = 2;
    private global::Pbe.BBParam targetID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.BBParam TargetID {
      get { return targetID_; }
      set {
        targetID_ = value;
      }
    }

    /// <summary>Field number for the "skillID" field.</summary>
    public const int SkillIDFieldNumber = 3;
    private int skillID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillID {
      get { return skillID_; }
      set {
        skillID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIConditionUsingSkillConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIConditionUsingSkillConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetType != other.TargetType) return false;
      if (!object.Equals(TargetID, other.TargetID)) return false;
      if (SkillID != other.SkillID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TargetType != 0) hash ^= TargetType.GetHashCode();
      if (targetID_ != null) hash ^= TargetID.GetHashCode();
      if (SkillID != 0) hash ^= SkillID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TargetType);
      }
      if (targetID_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TargetID);
      }
      if (SkillID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SkillID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetType);
      }
      if (targetID_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetID);
      }
      if (SkillID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIConditionUsingSkillConfig other) {
      if (other == null) {
        return;
      }
      if (other.TargetType != 0) {
        TargetType = other.TargetType;
      }
      if (other.targetID_ != null) {
        if (targetID_ == null) {
          targetID_ = new global::Pbe.BBParam();
        }
        TargetID.MergeFrom(other.TargetID);
      }
      if (other.SkillID != 0) {
        SkillID = other.SkillID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TargetType = input.ReadInt32();
            break;
          }
          case 18: {
            if (targetID_ == null) {
              targetID_ = new global::Pbe.BBParam();
            }
            input.ReadMessage(targetID_);
            break;
          }
          case 24: {
            SkillID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIConditionCanUseSkillConfig : pb::IMessage<AIConditionCanUseSkillConfig> {
    private static readonly pb::MessageParser<AIConditionCanUseSkillConfig> _parser = new pb::MessageParser<AIConditionCanUseSkillConfig>(() => new AIConditionCanUseSkillConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIConditionCanUseSkillConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[109]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIConditionCanUseSkillConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIConditionCanUseSkillConfig(AIConditionCanUseSkillConfig other) : this() {
      targetType_ = other.targetType_;
      targetID_ = other.targetID_ != null ? other.targetID_.Clone() : null;
      skillID_ = other.skillID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIConditionCanUseSkillConfig Clone() {
      return new AIConditionCanUseSkillConfig(this);
    }

    /// <summary>Field number for the "targetType" field.</summary>
    public const int TargetTypeFieldNumber = 1;
    private int targetType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetType {
      get { return targetType_; }
      set {
        targetType_ = value;
      }
    }

    /// <summary>Field number for the "targetID" field.</summary>
    public const int TargetIDFieldNumber = 2;
    private global::Pbe.BBParam targetID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.BBParam TargetID {
      get { return targetID_; }
      set {
        targetID_ = value;
      }
    }

    /// <summary>Field number for the "skillID" field.</summary>
    public const int SkillIDFieldNumber = 3;
    private int skillID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillID {
      get { return skillID_; }
      set {
        skillID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIConditionCanUseSkillConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIConditionCanUseSkillConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetType != other.TargetType) return false;
      if (!object.Equals(TargetID, other.TargetID)) return false;
      if (SkillID != other.SkillID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TargetType != 0) hash ^= TargetType.GetHashCode();
      if (targetID_ != null) hash ^= TargetID.GetHashCode();
      if (SkillID != 0) hash ^= SkillID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TargetType);
      }
      if (targetID_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TargetID);
      }
      if (SkillID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SkillID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetType);
      }
      if (targetID_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetID);
      }
      if (SkillID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIConditionCanUseSkillConfig other) {
      if (other == null) {
        return;
      }
      if (other.TargetType != 0) {
        TargetType = other.TargetType;
      }
      if (other.targetID_ != null) {
        if (targetID_ == null) {
          targetID_ = new global::Pbe.BBParam();
        }
        TargetID.MergeFrom(other.TargetID);
      }
      if (other.SkillID != 0) {
        SkillID = other.SkillID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TargetType = input.ReadInt32();
            break;
          }
          case 18: {
            if (targetID_ == null) {
              targetID_ = new global::Pbe.BBParam();
            }
            input.ReadMessage(targetID_);
            break;
          }
          case 24: {
            SkillID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIConditionBeContraintConfig : pb::IMessage<AIConditionBeContraintConfig> {
    private static readonly pb::MessageParser<AIConditionBeContraintConfig> _parser = new pb::MessageParser<AIConditionBeContraintConfig>(() => new AIConditionBeContraintConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIConditionBeContraintConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[110]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIConditionBeContraintConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIConditionBeContraintConfig(AIConditionBeContraintConfig other) : this() {
      targetType_ = other.targetType_;
      targetID_ = other.targetID_ != null ? other.targetID_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIConditionBeContraintConfig Clone() {
      return new AIConditionBeContraintConfig(this);
    }

    /// <summary>Field number for the "targetType" field.</summary>
    public const int TargetTypeFieldNumber = 1;
    private int targetType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetType {
      get { return targetType_; }
      set {
        targetType_ = value;
      }
    }

    /// <summary>Field number for the "targetID" field.</summary>
    public const int TargetIDFieldNumber = 2;
    private global::Pbe.BBParam targetID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.BBParam TargetID {
      get { return targetID_; }
      set {
        targetID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIConditionBeContraintConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIConditionBeContraintConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetType != other.TargetType) return false;
      if (!object.Equals(TargetID, other.TargetID)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TargetType != 0) hash ^= TargetType.GetHashCode();
      if (targetID_ != null) hash ^= TargetID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TargetType);
      }
      if (targetID_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TargetID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetType);
      }
      if (targetID_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIConditionBeContraintConfig other) {
      if (other == null) {
        return;
      }
      if (other.TargetType != 0) {
        TargetType = other.TargetType;
      }
      if (other.targetID_ != null) {
        if (targetID_ == null) {
          targetID_ = new global::Pbe.BBParam();
        }
        TargetID.MergeFrom(other.TargetID);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TargetType = input.ReadInt32();
            break;
          }
          case 18: {
            if (targetID_ == null) {
              targetID_ = new global::Pbe.BBParam();
            }
            input.ReadMessage(targetID_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIConditionCheckUnitStateConfig : pb::IMessage<AIConditionCheckUnitStateConfig> {
    private static readonly pb::MessageParser<AIConditionCheckUnitStateConfig> _parser = new pb::MessageParser<AIConditionCheckUnitStateConfig>(() => new AIConditionCheckUnitStateConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIConditionCheckUnitStateConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[111]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIConditionCheckUnitStateConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIConditionCheckUnitStateConfig(AIConditionCheckUnitStateConfig other) : this() {
      targetType_ = other.targetType_;
      targetID_ = other.targetID_ != null ? other.targetID_.Clone() : null;
      state_ = other.state_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIConditionCheckUnitStateConfig Clone() {
      return new AIConditionCheckUnitStateConfig(this);
    }

    /// <summary>Field number for the "targetType" field.</summary>
    public const int TargetTypeFieldNumber = 1;
    private int targetType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetType {
      get { return targetType_; }
      set {
        targetType_ = value;
      }
    }

    /// <summary>Field number for the "targetID" field.</summary>
    public const int TargetIDFieldNumber = 2;
    private global::Pbe.BBParam targetID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.BBParam TargetID {
      get { return targetID_; }
      set {
        targetID_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private int state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIConditionCheckUnitStateConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIConditionCheckUnitStateConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetType != other.TargetType) return false;
      if (!object.Equals(TargetID, other.TargetID)) return false;
      if (State != other.State) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TargetType != 0) hash ^= TargetType.GetHashCode();
      if (targetID_ != null) hash ^= TargetID.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TargetType);
      }
      if (targetID_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TargetID);
      }
      if (State != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetType);
      }
      if (targetID_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetID);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIConditionCheckUnitStateConfig other) {
      if (other == null) {
        return;
      }
      if (other.TargetType != 0) {
        TargetType = other.TargetType;
      }
      if (other.targetID_ != null) {
        if (targetID_ == null) {
          targetID_ = new global::Pbe.BBParam();
        }
        TargetID.MergeFrom(other.TargetID);
      }
      if (other.State != 0) {
        State = other.State;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TargetType = input.ReadInt32();
            break;
          }
          case 18: {
            if (targetID_ == null) {
              targetID_ = new global::Pbe.BBParam();
            }
            input.ReadMessage(targetID_);
            break;
          }
          case 24: {
            State = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIProbabilitySelectorConfig : pb::IMessage<AIProbabilitySelectorConfig> {
    private static readonly pb::MessageParser<AIProbabilitySelectorConfig> _parser = new pb::MessageParser<AIProbabilitySelectorConfig>(() => new AIProbabilitySelectorConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIProbabilitySelectorConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[112]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIProbabilitySelectorConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIProbabilitySelectorConfig(AIProbabilitySelectorConfig other) : this() {
      config_ = other.config_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIProbabilitySelectorConfig Clone() {
      return new AIProbabilitySelectorConfig(this);
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_config_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> config_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Config {
      get { return config_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIProbabilitySelectorConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIProbabilitySelectorConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!config_.Equals(other.config_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= config_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      config_.WriteTo(output, _repeated_config_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += config_.CalculateSize(_repeated_config_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIProbabilitySelectorConfig other) {
      if (other == null) {
        return;
      }
      config_.Add(other.config_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            config_.AddEntriesFrom(input, _repeated_config_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIParallelConfig : pb::IMessage<AIParallelConfig> {
    private static readonly pb::MessageParser<AIParallelConfig> _parser = new pb::MessageParser<AIParallelConfig>(() => new AIParallelConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIParallelConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[113]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIParallelConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIParallelConfig(AIParallelConfig other) : this() {
      policy_ = other.policy_;
      repeated_ = other.repeated_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIParallelConfig Clone() {
      return new AIParallelConfig(this);
    }

    /// <summary>Field number for the "policy" field.</summary>
    public const int PolicyFieldNumber = 1;
    private int policy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Policy {
      get { return policy_; }
      set {
        policy_ = value;
      }
    }

    /// <summary>Field number for the "repeated" field.</summary>
    public const int RepeatedFieldNumber = 2;
    private bool repeated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Repeated {
      get { return repeated_; }
      set {
        repeated_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIParallelConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIParallelConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Policy != other.Policy) return false;
      if (Repeated != other.Repeated) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Policy != 0) hash ^= Policy.GetHashCode();
      if (Repeated != false) hash ^= Repeated.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Policy != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Policy);
      }
      if (Repeated != false) {
        output.WriteRawTag(16);
        output.WriteBool(Repeated);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Policy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Policy);
      }
      if (Repeated != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIParallelConfig other) {
      if (other == null) {
        return;
      }
      if (other.Policy != 0) {
        Policy = other.Policy;
      }
      if (other.Repeated != false) {
        Repeated = other.Repeated;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Policy = input.ReadInt32();
            break;
          }
          case 16: {
            Repeated = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIRepeaterConfig : pb::IMessage<AIRepeaterConfig> {
    private static readonly pb::MessageParser<AIRepeaterConfig> _parser = new pb::MessageParser<AIRepeaterConfig>(() => new AIRepeaterConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIRepeaterConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[114]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIRepeaterConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIRepeaterConfig(AIRepeaterConfig other) : this() {
      repeaterMode_ = other.repeaterMode_;
      repeatTimes_ = other.repeatTimes_;
      repeatUntilStatus_ = other.repeatUntilStatus_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIRepeaterConfig Clone() {
      return new AIRepeaterConfig(this);
    }

    /// <summary>Field number for the "repeaterMode" field.</summary>
    public const int RepeaterModeFieldNumber = 1;
    private int repeaterMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RepeaterMode {
      get { return repeaterMode_; }
      set {
        repeaterMode_ = value;
      }
    }

    /// <summary>Field number for the "repeatTimes" field.</summary>
    public const int RepeatTimesFieldNumber = 2;
    private int repeatTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RepeatTimes {
      get { return repeatTimes_; }
      set {
        repeatTimes_ = value;
      }
    }

    /// <summary>Field number for the "repeatUntilStatus" field.</summary>
    public const int RepeatUntilStatusFieldNumber = 3;
    private bool repeatUntilStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RepeatUntilStatus {
      get { return repeatUntilStatus_; }
      set {
        repeatUntilStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIRepeaterConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIRepeaterConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RepeaterMode != other.RepeaterMode) return false;
      if (RepeatTimes != other.RepeatTimes) return false;
      if (RepeatUntilStatus != other.RepeatUntilStatus) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RepeaterMode != 0) hash ^= RepeaterMode.GetHashCode();
      if (RepeatTimes != 0) hash ^= RepeatTimes.GetHashCode();
      if (RepeatUntilStatus != false) hash ^= RepeatUntilStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RepeaterMode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RepeaterMode);
      }
      if (RepeatTimes != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RepeatTimes);
      }
      if (RepeatUntilStatus != false) {
        output.WriteRawTag(24);
        output.WriteBool(RepeatUntilStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RepeaterMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RepeaterMode);
      }
      if (RepeatTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RepeatTimes);
      }
      if (RepeatUntilStatus != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIRepeaterConfig other) {
      if (other == null) {
        return;
      }
      if (other.RepeaterMode != 0) {
        RepeaterMode = other.RepeaterMode;
      }
      if (other.RepeatTimes != 0) {
        RepeatTimes = other.RepeatTimes;
      }
      if (other.RepeatUntilStatus != false) {
        RepeatUntilStatus = other.RepeatUntilStatus;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RepeaterMode = input.ReadInt32();
            break;
          }
          case 16: {
            RepeatTimes = input.ReadInt32();
            break;
          }
          case 24: {
            RepeatUntilStatus = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIActionSetFaceConfig : pb::IMessage<AIActionSetFaceConfig> {
    private static readonly pb::MessageParser<AIActionSetFaceConfig> _parser = new pb::MessageParser<AIActionSetFaceConfig>(() => new AIActionSetFaceConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIActionSetFaceConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[115]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionSetFaceConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionSetFaceConfig(AIActionSetFaceConfig other) : this() {
      faceDir_ = other.faceDir_;
      uID_ = other.uID_ != null ? other.uID_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionSetFaceConfig Clone() {
      return new AIActionSetFaceConfig(this);
    }

    /// <summary>Field number for the "faceDir" field.</summary>
    public const int FaceDirFieldNumber = 1;
    private int faceDir_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FaceDir {
      get { return faceDir_; }
      set {
        faceDir_ = value;
      }
    }

    /// <summary>Field number for the "UID" field.</summary>
    public const int UIDFieldNumber = 2;
    private global::Pbe.BBParam uID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.BBParam UID {
      get { return uID_; }
      set {
        uID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIActionSetFaceConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIActionSetFaceConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FaceDir != other.FaceDir) return false;
      if (!object.Equals(UID, other.UID)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FaceDir != 0) hash ^= FaceDir.GetHashCode();
      if (uID_ != null) hash ^= UID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FaceDir != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FaceDir);
      }
      if (uID_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FaceDir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FaceDir);
      }
      if (uID_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIActionSetFaceConfig other) {
      if (other == null) {
        return;
      }
      if (other.FaceDir != 0) {
        FaceDir = other.FaceDir;
      }
      if (other.uID_ != null) {
        if (uID_ == null) {
          uID_ = new global::Pbe.BBParam();
        }
        UID.MergeFrom(other.UID);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FaceDir = input.ReadInt32();
            break;
          }
          case 18: {
            if (uID_ == null) {
              uID_ = new global::Pbe.BBParam();
            }
            input.ReadMessage(uID_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIActionMoveConfig : pb::IMessage<AIActionMoveConfig> {
    private static readonly pb::MessageParser<AIActionMoveConfig> _parser = new pb::MessageParser<AIActionMoveConfig>(() => new AIActionMoveConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIActionMoveConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[116]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionMoveConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionMoveConfig(AIActionMoveConfig other) : this() {
      absoluteOrRelative_ = other.absoluteOrRelative_;
      arX_ = other.arX_;
      arZ_ = other.arZ_;
      moveType_ = other.moveType_;
      uID_ = other.uID_ != null ? other.uID_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionMoveConfig Clone() {
      return new AIActionMoveConfig(this);
    }

    /// <summary>Field number for the "absoluteOrRelative" field.</summary>
    public const int AbsoluteOrRelativeFieldNumber = 1;
    private int absoluteOrRelative_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AbsoluteOrRelative {
      get { return absoluteOrRelative_; }
      set {
        absoluteOrRelative_ = value;
      }
    }

    /// <summary>Field number for the "arX" field.</summary>
    public const int ArXFieldNumber = 2;
    private int arX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ArX {
      get { return arX_; }
      set {
        arX_ = value;
      }
    }

    /// <summary>Field number for the "arZ" field.</summary>
    public const int ArZFieldNumber = 3;
    private int arZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ArZ {
      get { return arZ_; }
      set {
        arZ_ = value;
      }
    }

    /// <summary>Field number for the "moveType" field.</summary>
    public const int MoveTypeFieldNumber = 4;
    private int moveType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MoveType {
      get { return moveType_; }
      set {
        moveType_ = value;
      }
    }

    /// <summary>Field number for the "UID" field.</summary>
    public const int UIDFieldNumber = 5;
    private global::Pbe.BBParam uID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.BBParam UID {
      get { return uID_; }
      set {
        uID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIActionMoveConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIActionMoveConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AbsoluteOrRelative != other.AbsoluteOrRelative) return false;
      if (ArX != other.ArX) return false;
      if (ArZ != other.ArZ) return false;
      if (MoveType != other.MoveType) return false;
      if (!object.Equals(UID, other.UID)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AbsoluteOrRelative != 0) hash ^= AbsoluteOrRelative.GetHashCode();
      if (ArX != 0) hash ^= ArX.GetHashCode();
      if (ArZ != 0) hash ^= ArZ.GetHashCode();
      if (MoveType != 0) hash ^= MoveType.GetHashCode();
      if (uID_ != null) hash ^= UID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AbsoluteOrRelative != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AbsoluteOrRelative);
      }
      if (ArX != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ArX);
      }
      if (ArZ != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ArZ);
      }
      if (MoveType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MoveType);
      }
      if (uID_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(UID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AbsoluteOrRelative != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AbsoluteOrRelative);
      }
      if (ArX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ArX);
      }
      if (ArZ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ArZ);
      }
      if (MoveType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoveType);
      }
      if (uID_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIActionMoveConfig other) {
      if (other == null) {
        return;
      }
      if (other.AbsoluteOrRelative != 0) {
        AbsoluteOrRelative = other.AbsoluteOrRelative;
      }
      if (other.ArX != 0) {
        ArX = other.ArX;
      }
      if (other.ArZ != 0) {
        ArZ = other.ArZ;
      }
      if (other.MoveType != 0) {
        MoveType = other.MoveType;
      }
      if (other.uID_ != null) {
        if (uID_ == null) {
          uID_ = new global::Pbe.BBParam();
        }
        UID.MergeFrom(other.UID);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AbsoluteOrRelative = input.ReadInt32();
            break;
          }
          case 16: {
            ArX = input.ReadInt32();
            break;
          }
          case 24: {
            ArZ = input.ReadInt32();
            break;
          }
          case 32: {
            MoveType = input.ReadInt32();
            break;
          }
          case 42: {
            if (uID_ == null) {
              uID_ = new global::Pbe.BBParam();
            }
            input.ReadMessage(uID_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIActionGetOwnerIDConfig : pb::IMessage<AIActionGetOwnerIDConfig> {
    private static readonly pb::MessageParser<AIActionGetOwnerIDConfig> _parser = new pb::MessageParser<AIActionGetOwnerIDConfig>(() => new AIActionGetOwnerIDConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIActionGetOwnerIDConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[117]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionGetOwnerIDConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionGetOwnerIDConfig(AIActionGetOwnerIDConfig other) : this() {
      bbp_ = other.bbp_ != null ? other.bbp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionGetOwnerIDConfig Clone() {
      return new AIActionGetOwnerIDConfig(this);
    }

    /// <summary>Field number for the "bbp" field.</summary>
    public const int BbpFieldNumber = 1;
    private global::Pbe.BBParam bbp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.BBParam Bbp {
      get { return bbp_; }
      set {
        bbp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIActionGetOwnerIDConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIActionGetOwnerIDConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Bbp, other.Bbp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (bbp_ != null) hash ^= Bbp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (bbp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Bbp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (bbp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bbp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIActionGetOwnerIDConfig other) {
      if (other == null) {
        return;
      }
      if (other.bbp_ != null) {
        if (bbp_ == null) {
          bbp_ = new global::Pbe.BBParam();
        }
        Bbp.MergeFrom(other.Bbp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (bbp_ == null) {
              bbp_ = new global::Pbe.BBParam();
            }
            input.ReadMessage(bbp_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIActionGetTargetIDConfig : pb::IMessage<AIActionGetTargetIDConfig> {
    private static readonly pb::MessageParser<AIActionGetTargetIDConfig> _parser = new pb::MessageParser<AIActionGetTargetIDConfig>(() => new AIActionGetTargetIDConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIActionGetTargetIDConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[118]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionGetTargetIDConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionGetTargetIDConfig(AIActionGetTargetIDConfig other) : this() {
      bbp_ = other.bbp_ != null ? other.bbp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionGetTargetIDConfig Clone() {
      return new AIActionGetTargetIDConfig(this);
    }

    /// <summary>Field number for the "bbp" field.</summary>
    public const int BbpFieldNumber = 1;
    private global::Pbe.BBParam bbp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.BBParam Bbp {
      get { return bbp_; }
      set {
        bbp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIActionGetTargetIDConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIActionGetTargetIDConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Bbp, other.Bbp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (bbp_ != null) hash ^= Bbp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (bbp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Bbp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (bbp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bbp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIActionGetTargetIDConfig other) {
      if (other == null) {
        return;
      }
      if (other.bbp_ != null) {
        if (bbp_ == null) {
          bbp_ = new global::Pbe.BBParam();
        }
        Bbp.MergeFrom(other.Bbp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (bbp_ == null) {
              bbp_ = new global::Pbe.BBParam();
            }
            input.ReadMessage(bbp_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIActionGetUnitIDConfig : pb::IMessage<AIActionGetUnitIDConfig> {
    private static readonly pb::MessageParser<AIActionGetUnitIDConfig> _parser = new pb::MessageParser<AIActionGetUnitIDConfig>(() => new AIActionGetUnitIDConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIActionGetUnitIDConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[119]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionGetUnitIDConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionGetUnitIDConfig(AIActionGetUnitIDConfig other) : this() {
      uniqueID_ = other.uniqueID_;
      bbp_ = other.bbp_ != null ? other.bbp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionGetUnitIDConfig Clone() {
      return new AIActionGetUnitIDConfig(this);
    }

    /// <summary>Field number for the "uniqueID" field.</summary>
    public const int UniqueIDFieldNumber = 1;
    private int uniqueID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UniqueID {
      get { return uniqueID_; }
      set {
        uniqueID_ = value;
      }
    }

    /// <summary>Field number for the "bbp" field.</summary>
    public const int BbpFieldNumber = 2;
    private global::Pbe.BBParam bbp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.BBParam Bbp {
      get { return bbp_; }
      set {
        bbp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIActionGetUnitIDConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIActionGetUnitIDConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UniqueID != other.UniqueID) return false;
      if (!object.Equals(Bbp, other.Bbp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UniqueID != 0) hash ^= UniqueID.GetHashCode();
      if (bbp_ != null) hash ^= Bbp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UniqueID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UniqueID);
      }
      if (bbp_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Bbp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UniqueID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UniqueID);
      }
      if (bbp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bbp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIActionGetUnitIDConfig other) {
      if (other == null) {
        return;
      }
      if (other.UniqueID != 0) {
        UniqueID = other.UniqueID;
      }
      if (other.bbp_ != null) {
        if (bbp_ == null) {
          bbp_ = new global::Pbe.BBParam();
        }
        Bbp.MergeFrom(other.Bbp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UniqueID = input.ReadInt32();
            break;
          }
          case 18: {
            if (bbp_ == null) {
              bbp_ = new global::Pbe.BBParam();
            }
            input.ReadMessage(bbp_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIActionGetPlayerUnitIDConfig : pb::IMessage<AIActionGetPlayerUnitIDConfig> {
    private static readonly pb::MessageParser<AIActionGetPlayerUnitIDConfig> _parser = new pb::MessageParser<AIActionGetPlayerUnitIDConfig>(() => new AIActionGetPlayerUnitIDConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIActionGetPlayerUnitIDConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[120]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionGetPlayerUnitIDConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionGetPlayerUnitIDConfig(AIActionGetPlayerUnitIDConfig other) : this() {
      seat_ = other.seat_;
      bbp_ = other.bbp_ != null ? other.bbp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionGetPlayerUnitIDConfig Clone() {
      return new AIActionGetPlayerUnitIDConfig(this);
    }

    /// <summary>Field number for the "seat" field.</summary>
    public const int SeatFieldNumber = 1;
    private int seat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Seat {
      get { return seat_; }
      set {
        seat_ = value;
      }
    }

    /// <summary>Field number for the "bbp" field.</summary>
    public const int BbpFieldNumber = 2;
    private global::Pbe.BBParam bbp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.BBParam Bbp {
      get { return bbp_; }
      set {
        bbp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIActionGetPlayerUnitIDConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIActionGetPlayerUnitIDConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seat != other.Seat) return false;
      if (!object.Equals(Bbp, other.Bbp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Seat != 0) hash ^= Seat.GetHashCode();
      if (bbp_ != null) hash ^= Bbp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Seat != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Seat);
      }
      if (bbp_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Bbp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Seat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
      }
      if (bbp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bbp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIActionGetPlayerUnitIDConfig other) {
      if (other == null) {
        return;
      }
      if (other.Seat != 0) {
        Seat = other.Seat;
      }
      if (other.bbp_ != null) {
        if (bbp_ == null) {
          bbp_ = new global::Pbe.BBParam();
        }
        Bbp.MergeFrom(other.Bbp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Seat = input.ReadInt32();
            break;
          }
          case 18: {
            if (bbp_ == null) {
              bbp_ = new global::Pbe.BBParam();
            }
            input.ReadMessage(bbp_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIActionSetBBIntegerConfig : pb::IMessage<AIActionSetBBIntegerConfig> {
    private static readonly pb::MessageParser<AIActionSetBBIntegerConfig> _parser = new pb::MessageParser<AIActionSetBBIntegerConfig>(() => new AIActionSetBBIntegerConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIActionSetBBIntegerConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[121]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionSetBBIntegerConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionSetBBIntegerConfig(AIActionSetBBIntegerConfig other) : this() {
      bbInteger_ = other.bbInteger_ != null ? other.bbInteger_.Clone() : null;
      operation_ = other.operation_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionSetBBIntegerConfig Clone() {
      return new AIActionSetBBIntegerConfig(this);
    }

    /// <summary>Field number for the "bbInteger" field.</summary>
    public const int BbIntegerFieldNumber = 1;
    private global::Pbe.BBParam bbInteger_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.BBParam BbInteger {
      get { return bbInteger_; }
      set {
        bbInteger_ = value;
      }
    }

    /// <summary>Field number for the "operation" field.</summary>
    public const int OperationFieldNumber = 2;
    private int operation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Operation {
      get { return operation_; }
      set {
        operation_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIActionSetBBIntegerConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIActionSetBBIntegerConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BbInteger, other.BbInteger)) return false;
      if (Operation != other.Operation) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (bbInteger_ != null) hash ^= BbInteger.GetHashCode();
      if (Operation != 0) hash ^= Operation.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (bbInteger_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BbInteger);
      }
      if (Operation != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Operation);
      }
      if (Value != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (bbInteger_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BbInteger);
      }
      if (Operation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Operation);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIActionSetBBIntegerConfig other) {
      if (other == null) {
        return;
      }
      if (other.bbInteger_ != null) {
        if (bbInteger_ == null) {
          bbInteger_ = new global::Pbe.BBParam();
        }
        BbInteger.MergeFrom(other.BbInteger);
      }
      if (other.Operation != 0) {
        Operation = other.Operation;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (bbInteger_ == null) {
              bbInteger_ = new global::Pbe.BBParam();
            }
            input.ReadMessage(bbInteger_);
            break;
          }
          case 16: {
            Operation = input.ReadInt32();
            break;
          }
          case 24: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIActionExecuteTreeConfig : pb::IMessage<AIActionExecuteTreeConfig> {
    private static readonly pb::MessageParser<AIActionExecuteTreeConfig> _parser = new pb::MessageParser<AIActionExecuteTreeConfig>(() => new AIActionExecuteTreeConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIActionExecuteTreeConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[122]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionExecuteTreeConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionExecuteTreeConfig(AIActionExecuteTreeConfig other) : this() {
      treeId_ = other.treeId_;
      uID_ = other.uID_ != null ? other.uID_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionExecuteTreeConfig Clone() {
      return new AIActionExecuteTreeConfig(this);
    }

    /// <summary>Field number for the "treeId" field.</summary>
    public const int TreeIdFieldNumber = 1;
    private int treeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TreeId {
      get { return treeId_; }
      set {
        treeId_ = value;
      }
    }

    /// <summary>Field number for the "UID" field.</summary>
    public const int UIDFieldNumber = 2;
    private global::Pbe.BBParam uID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.BBParam UID {
      get { return uID_; }
      set {
        uID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIActionExecuteTreeConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIActionExecuteTreeConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TreeId != other.TreeId) return false;
      if (!object.Equals(UID, other.UID)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TreeId != 0) hash ^= TreeId.GetHashCode();
      if (uID_ != null) hash ^= UID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TreeId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TreeId);
      }
      if (uID_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TreeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TreeId);
      }
      if (uID_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIActionExecuteTreeConfig other) {
      if (other == null) {
        return;
      }
      if (other.TreeId != 0) {
        TreeId = other.TreeId;
      }
      if (other.uID_ != null) {
        if (uID_ == null) {
          uID_ = new global::Pbe.BBParam();
        }
        UID.MergeFrom(other.UID);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TreeId = input.ReadInt32();
            break;
          }
          case 18: {
            if (uID_ == null) {
              uID_ = new global::Pbe.BBParam();
            }
            input.ReadMessage(uID_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIActionDoSkillConfig : pb::IMessage<AIActionDoSkillConfig> {
    private static readonly pb::MessageParser<AIActionDoSkillConfig> _parser = new pb::MessageParser<AIActionDoSkillConfig>(() => new AIActionDoSkillConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIActionDoSkillConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[123]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionDoSkillConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionDoSkillConfig(AIActionDoSkillConfig other) : this() {
      skillId_ = other.skillId_;
      uID_ = other.uID_ != null ? other.uID_.Clone() : null;
      needDoSkillDirectly_ = other.needDoSkillDirectly_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionDoSkillConfig Clone() {
      return new AIActionDoSkillConfig(this);
    }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 1;
    private int skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "UID" field.</summary>
    public const int UIDFieldNumber = 2;
    private global::Pbe.BBParam uID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.BBParam UID {
      get { return uID_; }
      set {
        uID_ = value;
      }
    }

    /// <summary>Field number for the "NeedDoSkillDirectly" field.</summary>
    public const int NeedDoSkillDirectlyFieldNumber = 3;
    private bool needDoSkillDirectly_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NeedDoSkillDirectly {
      get { return needDoSkillDirectly_; }
      set {
        needDoSkillDirectly_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIActionDoSkillConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIActionDoSkillConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SkillId != other.SkillId) return false;
      if (!object.Equals(UID, other.UID)) return false;
      if (NeedDoSkillDirectly != other.NeedDoSkillDirectly) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SkillId != 0) hash ^= SkillId.GetHashCode();
      if (uID_ != null) hash ^= UID.GetHashCode();
      if (NeedDoSkillDirectly != false) hash ^= NeedDoSkillDirectly.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SkillId);
      }
      if (uID_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UID);
      }
      if (NeedDoSkillDirectly != false) {
        output.WriteRawTag(24);
        output.WriteBool(NeedDoSkillDirectly);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      if (uID_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UID);
      }
      if (NeedDoSkillDirectly != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIActionDoSkillConfig other) {
      if (other == null) {
        return;
      }
      if (other.SkillId != 0) {
        SkillId = other.SkillId;
      }
      if (other.uID_ != null) {
        if (uID_ == null) {
          uID_ = new global::Pbe.BBParam();
        }
        UID.MergeFrom(other.UID);
      }
      if (other.NeedDoSkillDirectly != false) {
        NeedDoSkillDirectly = other.NeedDoSkillDirectly;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SkillId = input.ReadInt32();
            break;
          }
          case 18: {
            if (uID_ == null) {
              uID_ = new global::Pbe.BBParam();
            }
            input.ReadMessage(uID_);
            break;
          }
          case 24: {
            NeedDoSkillDirectly = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIActionDoActionConfig : pb::IMessage<AIActionDoActionConfig> {
    private static readonly pb::MessageParser<AIActionDoActionConfig> _parser = new pb::MessageParser<AIActionDoActionConfig>(() => new AIActionDoActionConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIActionDoActionConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[124]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionDoActionConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionDoActionConfig(AIActionDoActionConfig other) : this() {
      actionId_ = other.actionId_;
      duration_ = other.duration_;
      breakable_ = other.breakable_;
      uID_ = other.uID_ != null ? other.uID_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionDoActionConfig Clone() {
      return new AIActionDoActionConfig(this);
    }

    /// <summary>Field number for the "actionId" field.</summary>
    public const int ActionIdFieldNumber = 1;
    private int actionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActionId {
      get { return actionId_; }
      set {
        actionId_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 2;
    private int duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "breakable" field.</summary>
    public const int BreakableFieldNumber = 3;
    private bool breakable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Breakable {
      get { return breakable_; }
      set {
        breakable_ = value;
      }
    }

    /// <summary>Field number for the "UID" field.</summary>
    public const int UIDFieldNumber = 4;
    private global::Pbe.BBParam uID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.BBParam UID {
      get { return uID_; }
      set {
        uID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIActionDoActionConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIActionDoActionConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActionId != other.ActionId) return false;
      if (Duration != other.Duration) return false;
      if (Breakable != other.Breakable) return false;
      if (!object.Equals(UID, other.UID)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActionId != 0) hash ^= ActionId.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      if (Breakable != false) hash ^= Breakable.GetHashCode();
      if (uID_ != null) hash ^= UID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActionId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActionId);
      }
      if (Duration != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Duration);
      }
      if (Breakable != false) {
        output.WriteRawTag(24);
        output.WriteBool(Breakable);
      }
      if (uID_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(UID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionId);
      }
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      if (Breakable != false) {
        size += 1 + 1;
      }
      if (uID_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIActionDoActionConfig other) {
      if (other == null) {
        return;
      }
      if (other.ActionId != 0) {
        ActionId = other.ActionId;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      if (other.Breakable != false) {
        Breakable = other.Breakable;
      }
      if (other.uID_ != null) {
        if (uID_ == null) {
          uID_ = new global::Pbe.BBParam();
        }
        UID.MergeFrom(other.UID);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ActionId = input.ReadInt32();
            break;
          }
          case 16: {
            Duration = input.ReadInt32();
            break;
          }
          case 24: {
            Breakable = input.ReadBool();
            break;
          }
          case 34: {
            if (uID_ == null) {
              uID_ = new global::Pbe.BBParam();
            }
            input.ReadMessage(uID_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIActionAddBuffConfig : pb::IMessage<AIActionAddBuffConfig> {
    private static readonly pb::MessageParser<AIActionAddBuffConfig> _parser = new pb::MessageParser<AIActionAddBuffConfig>(() => new AIActionAddBuffConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIActionAddBuffConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[125]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionAddBuffConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionAddBuffConfig(AIActionAddBuffConfig other) : this() {
      targetType_ = other.targetType_;
      targetID_ = other.targetID_ != null ? other.targetID_.Clone() : null;
      buffID_ = other.buffID_;
      buffLevel_ = other.buffLevel_;
      millisecDuration_ = other.millisecDuration_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionAddBuffConfig Clone() {
      return new AIActionAddBuffConfig(this);
    }

    /// <summary>Field number for the "targetType" field.</summary>
    public const int TargetTypeFieldNumber = 1;
    private int targetType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetType {
      get { return targetType_; }
      set {
        targetType_ = value;
      }
    }

    /// <summary>Field number for the "targetID" field.</summary>
    public const int TargetIDFieldNumber = 2;
    private global::Pbe.BBParam targetID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.BBParam TargetID {
      get { return targetID_; }
      set {
        targetID_ = value;
      }
    }

    /// <summary>Field number for the "buffID" field.</summary>
    public const int BuffIDFieldNumber = 3;
    private int buffID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuffID {
      get { return buffID_; }
      set {
        buffID_ = value;
      }
    }

    /// <summary>Field number for the "buffLevel" field.</summary>
    public const int BuffLevelFieldNumber = 4;
    private int buffLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuffLevel {
      get { return buffLevel_; }
      set {
        buffLevel_ = value;
      }
    }

    /// <summary>Field number for the "millisecDuration" field.</summary>
    public const int MillisecDurationFieldNumber = 5;
    private int millisecDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MillisecDuration {
      get { return millisecDuration_; }
      set {
        millisecDuration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIActionAddBuffConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIActionAddBuffConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetType != other.TargetType) return false;
      if (!object.Equals(TargetID, other.TargetID)) return false;
      if (BuffID != other.BuffID) return false;
      if (BuffLevel != other.BuffLevel) return false;
      if (MillisecDuration != other.MillisecDuration) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TargetType != 0) hash ^= TargetType.GetHashCode();
      if (targetID_ != null) hash ^= TargetID.GetHashCode();
      if (BuffID != 0) hash ^= BuffID.GetHashCode();
      if (BuffLevel != 0) hash ^= BuffLevel.GetHashCode();
      if (MillisecDuration != 0) hash ^= MillisecDuration.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TargetType);
      }
      if (targetID_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TargetID);
      }
      if (BuffID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BuffID);
      }
      if (BuffLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BuffLevel);
      }
      if (MillisecDuration != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MillisecDuration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetType);
      }
      if (targetID_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetID);
      }
      if (BuffID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuffID);
      }
      if (BuffLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuffLevel);
      }
      if (MillisecDuration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MillisecDuration);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIActionAddBuffConfig other) {
      if (other == null) {
        return;
      }
      if (other.TargetType != 0) {
        TargetType = other.TargetType;
      }
      if (other.targetID_ != null) {
        if (targetID_ == null) {
          targetID_ = new global::Pbe.BBParam();
        }
        TargetID.MergeFrom(other.TargetID);
      }
      if (other.BuffID != 0) {
        BuffID = other.BuffID;
      }
      if (other.BuffLevel != 0) {
        BuffLevel = other.BuffLevel;
      }
      if (other.MillisecDuration != 0) {
        MillisecDuration = other.MillisecDuration;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TargetType = input.ReadInt32();
            break;
          }
          case 18: {
            if (targetID_ == null) {
              targetID_ = new global::Pbe.BBParam();
            }
            input.ReadMessage(targetID_);
            break;
          }
          case 24: {
            BuffID = input.ReadInt32();
            break;
          }
          case 32: {
            BuffLevel = input.ReadInt32();
            break;
          }
          case 40: {
            MillisecDuration = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIActionAddBuffInfoConfig : pb::IMessage<AIActionAddBuffInfoConfig> {
    private static readonly pb::MessageParser<AIActionAddBuffInfoConfig> _parser = new pb::MessageParser<AIActionAddBuffInfoConfig>(() => new AIActionAddBuffInfoConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIActionAddBuffInfoConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[126]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionAddBuffInfoConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionAddBuffInfoConfig(AIActionAddBuffInfoConfig other) : this() {
      targetType_ = other.targetType_;
      targetID_ = other.targetID_ != null ? other.targetID_.Clone() : null;
      buffInfoID_ = other.buffInfoID_;
      buffLevel_ = other.buffLevel_;
      millisecDuration_ = other.millisecDuration_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionAddBuffInfoConfig Clone() {
      return new AIActionAddBuffInfoConfig(this);
    }

    /// <summary>Field number for the "targetType" field.</summary>
    public const int TargetTypeFieldNumber = 1;
    private int targetType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetType {
      get { return targetType_; }
      set {
        targetType_ = value;
      }
    }

    /// <summary>Field number for the "targetID" field.</summary>
    public const int TargetIDFieldNumber = 2;
    private global::Pbe.BBParam targetID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.BBParam TargetID {
      get { return targetID_; }
      set {
        targetID_ = value;
      }
    }

    /// <summary>Field number for the "buffInfoID" field.</summary>
    public const int BuffInfoIDFieldNumber = 3;
    private int buffInfoID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuffInfoID {
      get { return buffInfoID_; }
      set {
        buffInfoID_ = value;
      }
    }

    /// <summary>Field number for the "buffLevel" field.</summary>
    public const int BuffLevelFieldNumber = 4;
    private int buffLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuffLevel {
      get { return buffLevel_; }
      set {
        buffLevel_ = value;
      }
    }

    /// <summary>Field number for the "millisecDuration" field.</summary>
    public const int MillisecDurationFieldNumber = 5;
    private int millisecDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MillisecDuration {
      get { return millisecDuration_; }
      set {
        millisecDuration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIActionAddBuffInfoConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIActionAddBuffInfoConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetType != other.TargetType) return false;
      if (!object.Equals(TargetID, other.TargetID)) return false;
      if (BuffInfoID != other.BuffInfoID) return false;
      if (BuffLevel != other.BuffLevel) return false;
      if (MillisecDuration != other.MillisecDuration) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TargetType != 0) hash ^= TargetType.GetHashCode();
      if (targetID_ != null) hash ^= TargetID.GetHashCode();
      if (BuffInfoID != 0) hash ^= BuffInfoID.GetHashCode();
      if (BuffLevel != 0) hash ^= BuffLevel.GetHashCode();
      if (MillisecDuration != 0) hash ^= MillisecDuration.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TargetType);
      }
      if (targetID_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TargetID);
      }
      if (BuffInfoID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BuffInfoID);
      }
      if (BuffLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BuffLevel);
      }
      if (MillisecDuration != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MillisecDuration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetType);
      }
      if (targetID_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetID);
      }
      if (BuffInfoID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuffInfoID);
      }
      if (BuffLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuffLevel);
      }
      if (MillisecDuration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MillisecDuration);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIActionAddBuffInfoConfig other) {
      if (other == null) {
        return;
      }
      if (other.TargetType != 0) {
        TargetType = other.TargetType;
      }
      if (other.targetID_ != null) {
        if (targetID_ == null) {
          targetID_ = new global::Pbe.BBParam();
        }
        TargetID.MergeFrom(other.TargetID);
      }
      if (other.BuffInfoID != 0) {
        BuffInfoID = other.BuffInfoID;
      }
      if (other.BuffLevel != 0) {
        BuffLevel = other.BuffLevel;
      }
      if (other.MillisecDuration != 0) {
        MillisecDuration = other.MillisecDuration;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TargetType = input.ReadInt32();
            break;
          }
          case 18: {
            if (targetID_ == null) {
              targetID_ = new global::Pbe.BBParam();
            }
            input.ReadMessage(targetID_);
            break;
          }
          case 24: {
            BuffInfoID = input.ReadInt32();
            break;
          }
          case 32: {
            BuffLevel = input.ReadInt32();
            break;
          }
          case 40: {
            MillisecDuration = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIActionRemoveBuffConfig : pb::IMessage<AIActionRemoveBuffConfig> {
    private static readonly pb::MessageParser<AIActionRemoveBuffConfig> _parser = new pb::MessageParser<AIActionRemoveBuffConfig>(() => new AIActionRemoveBuffConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIActionRemoveBuffConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[127]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionRemoveBuffConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionRemoveBuffConfig(AIActionRemoveBuffConfig other) : this() {
      targetType_ = other.targetType_;
      targetID_ = other.targetID_ != null ? other.targetID_.Clone() : null;
      buffID_ = other.buffID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionRemoveBuffConfig Clone() {
      return new AIActionRemoveBuffConfig(this);
    }

    /// <summary>Field number for the "targetType" field.</summary>
    public const int TargetTypeFieldNumber = 1;
    private int targetType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetType {
      get { return targetType_; }
      set {
        targetType_ = value;
      }
    }

    /// <summary>Field number for the "targetID" field.</summary>
    public const int TargetIDFieldNumber = 2;
    private global::Pbe.BBParam targetID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.BBParam TargetID {
      get { return targetID_; }
      set {
        targetID_ = value;
      }
    }

    /// <summary>Field number for the "buffID" field.</summary>
    public const int BuffIDFieldNumber = 3;
    private int buffID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuffID {
      get { return buffID_; }
      set {
        buffID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIActionRemoveBuffConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIActionRemoveBuffConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetType != other.TargetType) return false;
      if (!object.Equals(TargetID, other.TargetID)) return false;
      if (BuffID != other.BuffID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TargetType != 0) hash ^= TargetType.GetHashCode();
      if (targetID_ != null) hash ^= TargetID.GetHashCode();
      if (BuffID != 0) hash ^= BuffID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TargetType);
      }
      if (targetID_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TargetID);
      }
      if (BuffID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BuffID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetType);
      }
      if (targetID_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetID);
      }
      if (BuffID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuffID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIActionRemoveBuffConfig other) {
      if (other == null) {
        return;
      }
      if (other.TargetType != 0) {
        TargetType = other.TargetType;
      }
      if (other.targetID_ != null) {
        if (targetID_ == null) {
          targetID_ = new global::Pbe.BBParam();
        }
        TargetID.MergeFrom(other.TargetID);
      }
      if (other.BuffID != 0) {
        BuffID = other.BuffID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TargetType = input.ReadInt32();
            break;
          }
          case 18: {
            if (targetID_ == null) {
              targetID_ = new global::Pbe.BBParam();
            }
            input.ReadMessage(targetID_);
            break;
          }
          case 24: {
            BuffID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIActionRemoveBuffInfoConfig : pb::IMessage<AIActionRemoveBuffInfoConfig> {
    private static readonly pb::MessageParser<AIActionRemoveBuffInfoConfig> _parser = new pb::MessageParser<AIActionRemoveBuffInfoConfig>(() => new AIActionRemoveBuffInfoConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIActionRemoveBuffInfoConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[128]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionRemoveBuffInfoConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionRemoveBuffInfoConfig(AIActionRemoveBuffInfoConfig other) : this() {
      targetType_ = other.targetType_;
      targetID_ = other.targetID_ != null ? other.targetID_.Clone() : null;
      buffInfoID_ = other.buffInfoID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionRemoveBuffInfoConfig Clone() {
      return new AIActionRemoveBuffInfoConfig(this);
    }

    /// <summary>Field number for the "targetType" field.</summary>
    public const int TargetTypeFieldNumber = 1;
    private int targetType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetType {
      get { return targetType_; }
      set {
        targetType_ = value;
      }
    }

    /// <summary>Field number for the "targetID" field.</summary>
    public const int TargetIDFieldNumber = 2;
    private global::Pbe.BBParam targetID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.BBParam TargetID {
      get { return targetID_; }
      set {
        targetID_ = value;
      }
    }

    /// <summary>Field number for the "buffInfoID" field.</summary>
    public const int BuffInfoIDFieldNumber = 3;
    private int buffInfoID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuffInfoID {
      get { return buffInfoID_; }
      set {
        buffInfoID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIActionRemoveBuffInfoConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIActionRemoveBuffInfoConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetType != other.TargetType) return false;
      if (!object.Equals(TargetID, other.TargetID)) return false;
      if (BuffInfoID != other.BuffInfoID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TargetType != 0) hash ^= TargetType.GetHashCode();
      if (targetID_ != null) hash ^= TargetID.GetHashCode();
      if (BuffInfoID != 0) hash ^= BuffInfoID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TargetType);
      }
      if (targetID_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TargetID);
      }
      if (BuffInfoID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BuffInfoID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetType);
      }
      if (targetID_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetID);
      }
      if (BuffInfoID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuffInfoID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIActionRemoveBuffInfoConfig other) {
      if (other == null) {
        return;
      }
      if (other.TargetType != 0) {
        TargetType = other.TargetType;
      }
      if (other.targetID_ != null) {
        if (targetID_ == null) {
          targetID_ = new global::Pbe.BBParam();
        }
        TargetID.MergeFrom(other.TargetID);
      }
      if (other.BuffInfoID != 0) {
        BuffInfoID = other.BuffInfoID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TargetType = input.ReadInt32();
            break;
          }
          case 18: {
            if (targetID_ == null) {
              targetID_ = new global::Pbe.BBParam();
            }
            input.ReadMessage(targetID_);
            break;
          }
          case 24: {
            BuffInfoID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIActionGetMonsterCountInRange : pb::IMessage<AIActionGetMonsterCountInRange> {
    private static readonly pb::MessageParser<AIActionGetMonsterCountInRange> _parser = new pb::MessageParser<AIActionGetMonsterCountInRange>(() => new AIActionGetMonsterCountInRange());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIActionGetMonsterCountInRange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[129]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionGetMonsterCountInRange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionGetMonsterCountInRange(AIActionGetMonsterCountInRange other) : this() {
      radius_ = other.radius_;
      monsterID_ = other.monsterID_.Clone();
      count_ = other.count_ != null ? other.count_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionGetMonsterCountInRange Clone() {
      return new AIActionGetMonsterCountInRange(this);
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 1;
    private int radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    /// <summary>Field number for the "monsterID" field.</summary>
    public const int MonsterIDFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_monsterID_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> monsterID_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> MonsterID {
      get { return monsterID_; }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private global::Pbe.BBParam count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.BBParam Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIActionGetMonsterCountInRange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIActionGetMonsterCountInRange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Radius != other.Radius) return false;
      if(!monsterID_.Equals(other.monsterID_)) return false;
      if (!object.Equals(Count, other.Count)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Radius != 0) hash ^= Radius.GetHashCode();
      hash ^= monsterID_.GetHashCode();
      if (count_ != null) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Radius != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Radius);
      }
      monsterID_.WriteTo(output, _repeated_monsterID_codec);
      if (count_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Radius != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Radius);
      }
      size += monsterID_.CalculateSize(_repeated_monsterID_codec);
      if (count_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIActionGetMonsterCountInRange other) {
      if (other == null) {
        return;
      }
      if (other.Radius != 0) {
        Radius = other.Radius;
      }
      monsterID_.Add(other.monsterID_);
      if (other.count_ != null) {
        if (count_ == null) {
          count_ = new global::Pbe.BBParam();
        }
        Count.MergeFrom(other.Count);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Radius = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            monsterID_.AddEntriesFrom(input, _repeated_monsterID_codec);
            break;
          }
          case 26: {
            if (count_ == null) {
              count_ = new global::Pbe.BBParam();
            }
            input.ReadMessage(count_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIActionLoafConfig : pb::IMessage<AIActionLoafConfig> {
    private static readonly pb::MessageParser<AIActionLoafConfig> _parser = new pb::MessageParser<AIActionLoafConfig>(() => new AIActionLoafConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIActionLoafConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[130]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionLoafConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionLoafConfig(AIActionLoafConfig other) : this() {
      milliseconds_ = other.milliseconds_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionLoafConfig Clone() {
      return new AIActionLoafConfig(this);
    }

    /// <summary>Field number for the "milliseconds" field.</summary>
    public const int MillisecondsFieldNumber = 1;
    private int milliseconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Milliseconds {
      get { return milliseconds_; }
      set {
        milliseconds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIActionLoafConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIActionLoafConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Milliseconds != other.Milliseconds) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Milliseconds != 0) hash ^= Milliseconds.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Milliseconds != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Milliseconds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Milliseconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Milliseconds);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIActionLoafConfig other) {
      if (other == null) {
        return;
      }
      if (other.Milliseconds != 0) {
        Milliseconds = other.Milliseconds;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Milliseconds = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIActionSuicideConfig : pb::IMessage<AIActionSuicideConfig> {
    private static readonly pb::MessageParser<AIActionSuicideConfig> _parser = new pb::MessageParser<AIActionSuicideConfig>(() => new AIActionSuicideConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIActionSuicideConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[131]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionSuicideConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionSuicideConfig(AIActionSuicideConfig other) : this() {
      playAnimation_ = other.playAnimation_;
      skillID_ = other.skillID_;
      uID_ = other.uID_ != null ? other.uID_.Clone() : null;
      hideDropItem_ = other.hideDropItem_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionSuicideConfig Clone() {
      return new AIActionSuicideConfig(this);
    }

    /// <summary>Field number for the "playAnimation" field.</summary>
    public const int PlayAnimationFieldNumber = 1;
    private bool playAnimation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PlayAnimation {
      get { return playAnimation_; }
      set {
        playAnimation_ = value;
      }
    }

    /// <summary>Field number for the "skillID" field.</summary>
    public const int SkillIDFieldNumber = 2;
    private int skillID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillID {
      get { return skillID_; }
      set {
        skillID_ = value;
      }
    }

    /// <summary>Field number for the "UID" field.</summary>
    public const int UIDFieldNumber = 3;
    private global::Pbe.BBParam uID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.BBParam UID {
      get { return uID_; }
      set {
        uID_ = value;
      }
    }

    /// <summary>Field number for the "hideDropItem" field.</summary>
    public const int HideDropItemFieldNumber = 4;
    private bool hideDropItem_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HideDropItem {
      get { return hideDropItem_; }
      set {
        hideDropItem_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIActionSuicideConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIActionSuicideConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayAnimation != other.PlayAnimation) return false;
      if (SkillID != other.SkillID) return false;
      if (!object.Equals(UID, other.UID)) return false;
      if (HideDropItem != other.HideDropItem) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayAnimation != false) hash ^= PlayAnimation.GetHashCode();
      if (SkillID != 0) hash ^= SkillID.GetHashCode();
      if (uID_ != null) hash ^= UID.GetHashCode();
      if (HideDropItem != false) hash ^= HideDropItem.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayAnimation != false) {
        output.WriteRawTag(8);
        output.WriteBool(PlayAnimation);
      }
      if (SkillID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SkillID);
      }
      if (uID_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UID);
      }
      if (HideDropItem != false) {
        output.WriteRawTag(32);
        output.WriteBool(HideDropItem);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayAnimation != false) {
        size += 1 + 1;
      }
      if (SkillID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillID);
      }
      if (uID_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UID);
      }
      if (HideDropItem != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIActionSuicideConfig other) {
      if (other == null) {
        return;
      }
      if (other.PlayAnimation != false) {
        PlayAnimation = other.PlayAnimation;
      }
      if (other.SkillID != 0) {
        SkillID = other.SkillID;
      }
      if (other.uID_ != null) {
        if (uID_ == null) {
          uID_ = new global::Pbe.BBParam();
        }
        UID.MergeFrom(other.UID);
      }
      if (other.HideDropItem != false) {
        HideDropItem = other.HideDropItem;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayAnimation = input.ReadBool();
            break;
          }
          case 16: {
            SkillID = input.ReadInt32();
            break;
          }
          case 26: {
            if (uID_ == null) {
              uID_ = new global::Pbe.BBParam();
            }
            input.ReadMessage(uID_);
            break;
          }
          case 32: {
            HideDropItem = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIActionBubbleConfig : pb::IMessage<AIActionBubbleConfig> {
    private static readonly pb::MessageParser<AIActionBubbleConfig> _parser = new pb::MessageParser<AIActionBubbleConfig>(() => new AIActionBubbleConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIActionBubbleConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[132]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionBubbleConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionBubbleConfig(AIActionBubbleConfig other) : this() {
      talkID_ = other.talkID_;
      uID_ = other.uID_ != null ? other.uID_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionBubbleConfig Clone() {
      return new AIActionBubbleConfig(this);
    }

    /// <summary>Field number for the "talkID" field.</summary>
    public const int TalkIDFieldNumber = 1;
    private int talkID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TalkID {
      get { return talkID_; }
      set {
        talkID_ = value;
      }
    }

    /// <summary>Field number for the "UID" field.</summary>
    public const int UIDFieldNumber = 2;
    private global::Pbe.BBParam uID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.BBParam UID {
      get { return uID_; }
      set {
        uID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIActionBubbleConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIActionBubbleConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TalkID != other.TalkID) return false;
      if (!object.Equals(UID, other.UID)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TalkID != 0) hash ^= TalkID.GetHashCode();
      if (uID_ != null) hash ^= UID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TalkID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TalkID);
      }
      if (uID_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TalkID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TalkID);
      }
      if (uID_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIActionBubbleConfig other) {
      if (other == null) {
        return;
      }
      if (other.TalkID != 0) {
        TalkID = other.TalkID;
      }
      if (other.uID_ != null) {
        if (uID_ == null) {
          uID_ = new global::Pbe.BBParam();
        }
        UID.MergeFrom(other.UID);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TalkID = input.ReadInt32();
            break;
          }
          case 18: {
            if (uID_ == null) {
              uID_ = new global::Pbe.BBParam();
            }
            input.ReadMessage(uID_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIActionBlackBarConfig : pb::IMessage<AIActionBlackBarConfig> {
    private static readonly pb::MessageParser<AIActionBlackBarConfig> _parser = new pb::MessageParser<AIActionBlackBarConfig>(() => new AIActionBlackBarConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIActionBlackBarConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[133]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionBlackBarConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionBlackBarConfig(AIActionBlackBarConfig other) : this() {
      show_ = other.show_;
      duration_ = other.duration_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionBlackBarConfig Clone() {
      return new AIActionBlackBarConfig(this);
    }

    /// <summary>Field number for the "show" field.</summary>
    public const int ShowFieldNumber = 1;
    private bool show_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Show {
      get { return show_; }
      set {
        show_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 2;
    private int duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIActionBlackBarConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIActionBlackBarConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Show != other.Show) return false;
      if (Duration != other.Duration) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Show != false) hash ^= Show.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Show != false) {
        output.WriteRawTag(8);
        output.WriteBool(Show);
      }
      if (Duration != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Duration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Show != false) {
        size += 1 + 1;
      }
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIActionBlackBarConfig other) {
      if (other == null) {
        return;
      }
      if (other.Show != false) {
        Show = other.Show;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Show = input.ReadBool();
            break;
          }
          case 16: {
            Duration = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIActionBattleTipsConfig : pb::IMessage<AIActionBattleTipsConfig> {
    private static readonly pb::MessageParser<AIActionBattleTipsConfig> _parser = new pb::MessageParser<AIActionBattleTipsConfig>(() => new AIActionBattleTipsConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIActionBattleTipsConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[134]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionBattleTipsConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionBattleTipsConfig(AIActionBattleTipsConfig other) : this() {
      tipsID_ = other.tipsID_;
      duration_ = other.duration_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionBattleTipsConfig Clone() {
      return new AIActionBattleTipsConfig(this);
    }

    /// <summary>Field number for the "tipsID" field.</summary>
    public const int TipsIDFieldNumber = 1;
    private int tipsID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TipsID {
      get { return tipsID_; }
      set {
        tipsID_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 2;
    private int duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIActionBattleTipsConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIActionBattleTipsConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TipsID != other.TipsID) return false;
      if (Duration != other.Duration) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TipsID != 0) hash ^= TipsID.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TipsID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TipsID);
      }
      if (Duration != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Duration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TipsID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TipsID);
      }
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIActionBattleTipsConfig other) {
      if (other == null) {
        return;
      }
      if (other.TipsID != 0) {
        TipsID = other.TipsID;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TipsID = input.ReadInt32();
            break;
          }
          case 16: {
            Duration = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIActionScenarioConfig : pb::IMessage<AIActionScenarioConfig> {
    private static readonly pb::MessageParser<AIActionScenarioConfig> _parser = new pb::MessageParser<AIActionScenarioConfig>(() => new AIActionScenarioConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIActionScenarioConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[135]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionScenarioConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionScenarioConfig(AIActionScenarioConfig other) : this() {
      scenarioID_ = other.scenarioID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionScenarioConfig Clone() {
      return new AIActionScenarioConfig(this);
    }

    /// <summary>Field number for the "scenarioID" field.</summary>
    public const int ScenarioIDFieldNumber = 1;
    private int scenarioID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScenarioID {
      get { return scenarioID_; }
      set {
        scenarioID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIActionScenarioConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIActionScenarioConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ScenarioID != other.ScenarioID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ScenarioID != 0) hash ^= ScenarioID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ScenarioID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ScenarioID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ScenarioID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScenarioID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIActionScenarioConfig other) {
      if (other == null) {
        return;
      }
      if (other.ScenarioID != 0) {
        ScenarioID = other.ScenarioID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ScenarioID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIActionButtonStateConfig : pb::IMessage<AIActionButtonStateConfig> {
    private static readonly pb::MessageParser<AIActionButtonStateConfig> _parser = new pb::MessageParser<AIActionButtonStateConfig>(() => new AIActionButtonStateConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIActionButtonStateConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[136]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionButtonStateConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionButtonStateConfig(AIActionButtonStateConfig other) : this() {
      buttonPos_ = other.buttonPos_.Clone();
      state_ = other.state_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionButtonStateConfig Clone() {
      return new AIActionButtonStateConfig(this);
    }

    /// <summary>Field number for the "buttonPos" field.</summary>
    public const int ButtonPosFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_buttonPos_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> buttonPos_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ButtonPos {
      get { return buttonPos_; }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private bool state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIActionButtonStateConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIActionButtonStateConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!buttonPos_.Equals(other.buttonPos_)) return false;
      if (State != other.State) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= buttonPos_.GetHashCode();
      if (State != false) hash ^= State.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      buttonPos_.WriteTo(output, _repeated_buttonPos_codec);
      if (State != false) {
        output.WriteRawTag(16);
        output.WriteBool(State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += buttonPos_.CalculateSize(_repeated_buttonPos_codec);
      if (State != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIActionButtonStateConfig other) {
      if (other == null) {
        return;
      }
      buttonPos_.Add(other.buttonPos_);
      if (other.State != false) {
        State = other.State;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            buttonPos_.AddEntriesFrom(input, _repeated_buttonPos_codec);
            break;
          }
          case 16: {
            State = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIActionStartCameraOffsetConfig : pb::IMessage<AIActionStartCameraOffsetConfig> {
    private static readonly pb::MessageParser<AIActionStartCameraOffsetConfig> _parser = new pb::MessageParser<AIActionStartCameraOffsetConfig>(() => new AIActionStartCameraOffsetConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIActionStartCameraOffsetConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[137]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionStartCameraOffsetConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionStartCameraOffsetConfig(AIActionStartCameraOffsetConfig other) : this() {
      xOffset_ = other.xOffset_;
      zOffset_ = other.zOffset_;
      smoothMsTime_ = other.smoothMsTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionStartCameraOffsetConfig Clone() {
      return new AIActionStartCameraOffsetConfig(this);
    }

    /// <summary>Field number for the "XOffset" field.</summary>
    public const int XOffsetFieldNumber = 1;
    private float xOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float XOffset {
      get { return xOffset_; }
      set {
        xOffset_ = value;
      }
    }

    /// <summary>Field number for the "ZOffset" field.</summary>
    public const int ZOffsetFieldNumber = 2;
    private float zOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ZOffset {
      get { return zOffset_; }
      set {
        zOffset_ = value;
      }
    }

    /// <summary>Field number for the "SmoothMsTime" field.</summary>
    public const int SmoothMsTimeFieldNumber = 3;
    private int smoothMsTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SmoothMsTime {
      get { return smoothMsTime_; }
      set {
        smoothMsTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIActionStartCameraOffsetConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIActionStartCameraOffsetConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(XOffset, other.XOffset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ZOffset, other.ZOffset)) return false;
      if (SmoothMsTime != other.SmoothMsTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (XOffset != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(XOffset);
      if (ZOffset != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ZOffset);
      if (SmoothMsTime != 0) hash ^= SmoothMsTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (XOffset != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(XOffset);
      }
      if (ZOffset != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(ZOffset);
      }
      if (SmoothMsTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SmoothMsTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (XOffset != 0F) {
        size += 1 + 4;
      }
      if (ZOffset != 0F) {
        size += 1 + 4;
      }
      if (SmoothMsTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SmoothMsTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIActionStartCameraOffsetConfig other) {
      if (other == null) {
        return;
      }
      if (other.XOffset != 0F) {
        XOffset = other.XOffset;
      }
      if (other.ZOffset != 0F) {
        ZOffset = other.ZOffset;
      }
      if (other.SmoothMsTime != 0) {
        SmoothMsTime = other.SmoothMsTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            XOffset = input.ReadFloat();
            break;
          }
          case 21: {
            ZOffset = input.ReadFloat();
            break;
          }
          case 24: {
            SmoothMsTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIActionCameraResetConfig : pb::IMessage<AIActionCameraResetConfig> {
    private static readonly pb::MessageParser<AIActionCameraResetConfig> _parser = new pb::MessageParser<AIActionCameraResetConfig>(() => new AIActionCameraResetConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIActionCameraResetConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[138]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionCameraResetConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionCameraResetConfig(AIActionCameraResetConfig other) : this() {
      smoothMsTime_ = other.smoothMsTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionCameraResetConfig Clone() {
      return new AIActionCameraResetConfig(this);
    }

    /// <summary>Field number for the "SmoothMsTime" field.</summary>
    public const int SmoothMsTimeFieldNumber = 1;
    private int smoothMsTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SmoothMsTime {
      get { return smoothMsTime_; }
      set {
        smoothMsTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIActionCameraResetConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIActionCameraResetConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SmoothMsTime != other.SmoothMsTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SmoothMsTime != 0) hash ^= SmoothMsTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SmoothMsTime != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SmoothMsTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SmoothMsTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SmoothMsTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIActionCameraResetConfig other) {
      if (other == null) {
        return;
      }
      if (other.SmoothMsTime != 0) {
        SmoothMsTime = other.SmoothMsTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SmoothMsTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIConditionElementDamageConfig : pb::IMessage<AIConditionElementDamageConfig> {
    private static readonly pb::MessageParser<AIConditionElementDamageConfig> _parser = new pb::MessageParser<AIConditionElementDamageConfig>(() => new AIConditionElementDamageConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIConditionElementDamageConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[139]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIConditionElementDamageConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIConditionElementDamageConfig(AIConditionElementDamageConfig other) : this() {
      targetType_ = other.targetType_;
      targetID_ = other.targetID_ != null ? other.targetID_.Clone() : null;
      elementState_ = other.elementState_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIConditionElementDamageConfig Clone() {
      return new AIConditionElementDamageConfig(this);
    }

    /// <summary>Field number for the "TargetType" field.</summary>
    public const int TargetTypeFieldNumber = 1;
    private int targetType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetType {
      get { return targetType_; }
      set {
        targetType_ = value;
      }
    }

    /// <summary>Field number for the "TargetID" field.</summary>
    public const int TargetIDFieldNumber = 2;
    private global::Pbe.BBParam targetID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.BBParam TargetID {
      get { return targetID_; }
      set {
        targetID_ = value;
      }
    }

    /// <summary>Field number for the "ElementState" field.</summary>
    public const int ElementStateFieldNumber = 3;
    private int elementState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ElementState {
      get { return elementState_; }
      set {
        elementState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIConditionElementDamageConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIConditionElementDamageConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetType != other.TargetType) return false;
      if (!object.Equals(TargetID, other.TargetID)) return false;
      if (ElementState != other.ElementState) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TargetType != 0) hash ^= TargetType.GetHashCode();
      if (targetID_ != null) hash ^= TargetID.GetHashCode();
      if (ElementState != 0) hash ^= ElementState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TargetType);
      }
      if (targetID_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TargetID);
      }
      if (ElementState != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ElementState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetType);
      }
      if (targetID_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetID);
      }
      if (ElementState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ElementState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIConditionElementDamageConfig other) {
      if (other == null) {
        return;
      }
      if (other.TargetType != 0) {
        TargetType = other.TargetType;
      }
      if (other.targetID_ != null) {
        if (targetID_ == null) {
          targetID_ = new global::Pbe.BBParam();
        }
        TargetID.MergeFrom(other.TargetID);
      }
      if (other.ElementState != 0) {
        ElementState = other.ElementState;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TargetType = input.ReadInt32();
            break;
          }
          case 18: {
            if (targetID_ == null) {
              targetID_ = new global::Pbe.BBParam();
            }
            input.ReadMessage(targetID_);
            break;
          }
          case 24: {
            ElementState = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIActionSetPositionConfig : pb::IMessage<AIActionSetPositionConfig> {
    private static readonly pb::MessageParser<AIActionSetPositionConfig> _parser = new pb::MessageParser<AIActionSetPositionConfig>(() => new AIActionSetPositionConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIActionSetPositionConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[140]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionSetPositionConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionSetPositionConfig(AIActionSetPositionConfig other) : this() {
      posX_ = other.posX_;
      posY_ = other.posY_;
      posZ_ = other.posZ_;
      uID_ = other.uID_ != null ? other.uID_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionSetPositionConfig Clone() {
      return new AIActionSetPositionConfig(this);
    }

    /// <summary>Field number for the "PosX" field.</summary>
    public const int PosXFieldNumber = 1;
    private float posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "PosY" field.</summary>
    public const int PosYFieldNumber = 2;
    private float posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "PosZ" field.</summary>
    public const int PosZFieldNumber = 3;
    private float posZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosZ {
      get { return posZ_; }
      set {
        posZ_ = value;
      }
    }

    /// <summary>Field number for the "UID" field.</summary>
    public const int UIDFieldNumber = 4;
    private global::Pbe.BBParam uID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.BBParam UID {
      get { return uID_; }
      set {
        uID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIActionSetPositionConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIActionSetPositionConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosX, other.PosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosY, other.PosY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosZ, other.PosZ)) return false;
      if (!object.Equals(UID, other.UID)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosX);
      if (PosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosY);
      if (PosZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosZ);
      if (uID_ != null) hash ^= UID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PosX != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(PosX);
      }
      if (PosY != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(PosY);
      }
      if (PosZ != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PosZ);
      }
      if (uID_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(UID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PosX != 0F) {
        size += 1 + 4;
      }
      if (PosY != 0F) {
        size += 1 + 4;
      }
      if (PosZ != 0F) {
        size += 1 + 4;
      }
      if (uID_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIActionSetPositionConfig other) {
      if (other == null) {
        return;
      }
      if (other.PosX != 0F) {
        PosX = other.PosX;
      }
      if (other.PosY != 0F) {
        PosY = other.PosY;
      }
      if (other.PosZ != 0F) {
        PosZ = other.PosZ;
      }
      if (other.uID_ != null) {
        if (uID_ == null) {
          uID_ = new global::Pbe.BBParam();
        }
        UID.MergeFrom(other.UID);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            PosX = input.ReadFloat();
            break;
          }
          case 21: {
            PosY = input.ReadFloat();
            break;
          }
          case 29: {
            PosZ = input.ReadFloat();
            break;
          }
          case 34: {
            if (uID_ == null) {
              uID_ = new global::Pbe.BBParam();
            }
            input.ReadMessage(uID_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIActionGetMonsterUnitIDConfig : pb::IMessage<AIActionGetMonsterUnitIDConfig> {
    private static readonly pb::MessageParser<AIActionGetMonsterUnitIDConfig> _parser = new pb::MessageParser<AIActionGetMonsterUnitIDConfig>(() => new AIActionGetMonsterUnitIDConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIActionGetMonsterUnitIDConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[141]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionGetMonsterUnitIDConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionGetMonsterUnitIDConfig(AIActionGetMonsterUnitIDConfig other) : this() {
      monsterTableID_ = other.monsterTableID_;
      bbp_ = other.bbp_ != null ? other.bbp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionGetMonsterUnitIDConfig Clone() {
      return new AIActionGetMonsterUnitIDConfig(this);
    }

    /// <summary>Field number for the "MonsterTableID" field.</summary>
    public const int MonsterTableIDFieldNumber = 1;
    private int monsterTableID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MonsterTableID {
      get { return monsterTableID_; }
      set {
        monsterTableID_ = value;
      }
    }

    /// <summary>Field number for the "Bbp" field.</summary>
    public const int BbpFieldNumber = 2;
    private global::Pbe.BBParam bbp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.BBParam Bbp {
      get { return bbp_; }
      set {
        bbp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIActionGetMonsterUnitIDConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIActionGetMonsterUnitIDConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MonsterTableID != other.MonsterTableID) return false;
      if (!object.Equals(Bbp, other.Bbp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MonsterTableID != 0) hash ^= MonsterTableID.GetHashCode();
      if (bbp_ != null) hash ^= Bbp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MonsterTableID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MonsterTableID);
      }
      if (bbp_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Bbp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MonsterTableID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterTableID);
      }
      if (bbp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bbp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIActionGetMonsterUnitIDConfig other) {
      if (other == null) {
        return;
      }
      if (other.MonsterTableID != 0) {
        MonsterTableID = other.MonsterTableID;
      }
      if (other.bbp_ != null) {
        if (bbp_ == null) {
          bbp_ = new global::Pbe.BBParam();
        }
        Bbp.MergeFrom(other.Bbp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MonsterTableID = input.ReadInt32();
            break;
          }
          case 18: {
            if (bbp_ == null) {
              bbp_ = new global::Pbe.BBParam();
            }
            input.ReadMessage(bbp_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIActionAttackListConfig : pb::IMessage<AIActionAttackListConfig> {
    private static readonly pb::MessageParser<AIActionAttackListConfig> _parser = new pb::MessageParser<AIActionAttackListConfig>(() => new AIActionAttackListConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIActionAttackListConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[142]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionAttackListConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionAttackListConfig(AIActionAttackListConfig other) : this() {
      attackList_ = other.attackList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionAttackListConfig Clone() {
      return new AIActionAttackListConfig(this);
    }

    /// <summary>Field number for the "AttackList" field.</summary>
    public const int AttackListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Pbe.AIAttackNode> _repeated_attackList_codec
        = pb::FieldCodec.ForMessage(10, global::Pbe.AIAttackNode.Parser);
    private readonly pbc::RepeatedField<global::Pbe.AIAttackNode> attackList_ = new pbc::RepeatedField<global::Pbe.AIAttackNode>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.AIAttackNode> AttackList {
      get { return attackList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIActionAttackListConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIActionAttackListConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!attackList_.Equals(other.attackList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= attackList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      attackList_.WriteTo(output, _repeated_attackList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += attackList_.CalculateSize(_repeated_attackList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIActionAttackListConfig other) {
      if (other == null) {
        return;
      }
      attackList_.Add(other.attackList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            attackList_.AddEntriesFrom(input, _repeated_attackList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIActionGetSectionDifConfig : pb::IMessage<AIActionGetSectionDifConfig> {
    private static readonly pb::MessageParser<AIActionGetSectionDifConfig> _parser = new pb::MessageParser<AIActionGetSectionDifConfig>(() => new AIActionGetSectionDifConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIActionGetSectionDifConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[143]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionGetSectionDifConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionGetSectionDifConfig(AIActionGetSectionDifConfig other) : this() {
      bbp_ = other.bbp_ != null ? other.bbp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionGetSectionDifConfig Clone() {
      return new AIActionGetSectionDifConfig(this);
    }

    /// <summary>Field number for the "Bbp" field.</summary>
    public const int BbpFieldNumber = 1;
    private global::Pbe.BBParam bbp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.BBParam Bbp {
      get { return bbp_; }
      set {
        bbp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIActionGetSectionDifConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIActionGetSectionDifConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Bbp, other.Bbp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (bbp_ != null) hash ^= Bbp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (bbp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Bbp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (bbp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bbp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIActionGetSectionDifConfig other) {
      if (other == null) {
        return;
      }
      if (other.bbp_ != null) {
        if (bbp_ == null) {
          bbp_ = new global::Pbe.BBParam();
        }
        Bbp.MergeFrom(other.Bbp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (bbp_ == null) {
              bbp_ = new global::Pbe.BBParam();
            }
            input.ReadMessage(bbp_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIActionRemoveSceneItem : pb::IMessage<AIActionRemoveSceneItem> {
    private static readonly pb::MessageParser<AIActionRemoveSceneItem> _parser = new pb::MessageParser<AIActionRemoveSceneItem>(() => new AIActionRemoveSceneItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIActionRemoveSceneItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[144]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionRemoveSceneItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionRemoveSceneItem(AIActionRemoveSceneItem other) : this() {
      removeDecoratorName_ = other.removeDecoratorName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionRemoveSceneItem Clone() {
      return new AIActionRemoveSceneItem(this);
    }

    /// <summary>Field number for the "RemoveDecoratorName" field.</summary>
    public const int RemoveDecoratorNameFieldNumber = 1;
    private string removeDecoratorName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RemoveDecoratorName {
      get { return removeDecoratorName_; }
      set {
        removeDecoratorName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIActionRemoveSceneItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIActionRemoveSceneItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RemoveDecoratorName != other.RemoveDecoratorName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RemoveDecoratorName.Length != 0) hash ^= RemoveDecoratorName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RemoveDecoratorName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RemoveDecoratorName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RemoveDecoratorName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RemoveDecoratorName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIActionRemoveSceneItem other) {
      if (other == null) {
        return;
      }
      if (other.RemoveDecoratorName.Length != 0) {
        RemoveDecoratorName = other.RemoveDecoratorName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RemoveDecoratorName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIActionFullScreenMaskShow : pb::IMessage<AIActionFullScreenMaskShow> {
    private static readonly pb::MessageParser<AIActionFullScreenMaskShow> _parser = new pb::MessageParser<AIActionFullScreenMaskShow>(() => new AIActionFullScreenMaskShow());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIActionFullScreenMaskShow> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[145]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionFullScreenMaskShow() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionFullScreenMaskShow(AIActionFullScreenMaskShow other) : this() {
      duration_ = other.duration_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIActionFullScreenMaskShow Clone() {
      return new AIActionFullScreenMaskShow(this);
    }

    /// <summary>Field number for the "Duration" field.</summary>
    public const int DurationFieldNumber = 1;
    private int duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIActionFullScreenMaskShow);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIActionFullScreenMaskShow other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Duration != other.Duration) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Duration != 0) hash ^= Duration.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Duration != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Duration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIActionFullScreenMaskShow other) {
      if (other == null) {
        return;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Duration = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AIAttackNode : pb::IMessage<AIAttackNode> {
    private static readonly pb::MessageParser<AIAttackNode> _parser = new pb::MessageParser<AIAttackNode>(() => new AIAttackNode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIAttackNode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[146]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIAttackNode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIAttackNode(AIAttackNode other) : this() {
      skillID_ = other.skillID_;
      delay_ = other.delay_;
      duration_ = other.duration_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIAttackNode Clone() {
      return new AIAttackNode(this);
    }

    /// <summary>Field number for the "SkillID" field.</summary>
    public const int SkillIDFieldNumber = 1;
    private int skillID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillID {
      get { return skillID_; }
      set {
        skillID_ = value;
      }
    }

    /// <summary>Field number for the "Delay" field.</summary>
    public const int DelayFieldNumber = 2;
    private int delay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Delay {
      get { return delay_; }
      set {
        delay_ = value;
      }
    }

    /// <summary>Field number for the "Duration" field.</summary>
    public const int DurationFieldNumber = 3;
    private int duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIAttackNode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIAttackNode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SkillID != other.SkillID) return false;
      if (Delay != other.Delay) return false;
      if (Duration != other.Duration) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SkillID != 0) hash ^= SkillID.GetHashCode();
      if (Delay != 0) hash ^= Delay.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SkillID);
      }
      if (Delay != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Delay);
      }
      if (Duration != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Duration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillID);
      }
      if (Delay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Delay);
      }
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIAttackNode other) {
      if (other == null) {
        return;
      }
      if (other.SkillID != 0) {
        SkillID = other.SkillID;
      }
      if (other.Delay != 0) {
        Delay = other.Delay;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SkillID = input.ReadInt32();
            break;
          }
          case 16: {
            Delay = input.ReadInt32();
            break;
          }
          case 24: {
            Duration = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AINodeConnection : pb::IMessage<AINodeConnection> {
    private static readonly pb::MessageParser<AINodeConnection> _parser = new pb::MessageParser<AINodeConnection>(() => new AINodeConnection());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AINodeConnection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[147]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AINodeConnection() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AINodeConnection(AINodeConnection other) : this() {
      fatherID_ = other.fatherID_;
      childID_ = other.childID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AINodeConnection Clone() {
      return new AINodeConnection(this);
    }

    /// <summary>Field number for the "fatherID" field.</summary>
    public const int FatherIDFieldNumber = 1;
    private int fatherID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FatherID {
      get { return fatherID_; }
      set {
        fatherID_ = value;
      }
    }

    /// <summary>Field number for the "childID" field.</summary>
    public const int ChildIDFieldNumber = 2;
    private int childID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChildID {
      get { return childID_; }
      set {
        childID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AINodeConnection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AINodeConnection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FatherID != other.FatherID) return false;
      if (ChildID != other.ChildID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FatherID != 0) hash ^= FatherID.GetHashCode();
      if (ChildID != 0) hash ^= ChildID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FatherID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FatherID);
      }
      if (ChildID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChildID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FatherID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FatherID);
      }
      if (ChildID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChildID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AINodeConnection other) {
      if (other == null) {
        return;
      }
      if (other.FatherID != 0) {
        FatherID = other.FatherID;
      }
      if (other.ChildID != 0) {
        ChildID = other.ChildID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FatherID = input.ReadInt32();
            break;
          }
          case 16: {
            ChildID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BBParam : pb::IMessage<BBParam> {
    private static readonly pb::MessageParser<BBParam> _parser = new pb::MessageParser<BBParam>(() => new BBParam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BBParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[148]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BBParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BBParam(BBParam other) : this() {
      name_ = other.name_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BBParam Clone() {
      return new BBParam(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BBParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BBParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BBParam other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AITree : pb::IMessage<AITree> {
    private static readonly pb::MessageParser<AITree> _parser = new pb::MessageParser<AITree>(() => new AITree());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AITree> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[149]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AITree() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AITree(AITree other) : this() {
      treeID_ = other.treeID_;
      nodes_ = other.nodes_.Clone();
      nodeConnections_ = other.nodeConnections_.Clone();
      bbVars_ = other.bbVars_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AITree Clone() {
      return new AITree(this);
    }

    /// <summary>Field number for the "treeID" field.</summary>
    public const int TreeIDFieldNumber = 1;
    private int treeID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TreeID {
      get { return treeID_; }
      set {
        treeID_ = value;
      }
    }

    /// <summary>Field number for the "nodes" field.</summary>
    public const int NodesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Pbe.AITreeNode> _repeated_nodes_codec
        = pb::FieldCodec.ForMessage(18, global::Pbe.AITreeNode.Parser);
    private readonly pbc::RepeatedField<global::Pbe.AITreeNode> nodes_ = new pbc::RepeatedField<global::Pbe.AITreeNode>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.AITreeNode> Nodes {
      get { return nodes_; }
    }

    /// <summary>Field number for the "nodeConnections" field.</summary>
    public const int NodeConnectionsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Pbe.AINodeConnection> _repeated_nodeConnections_codec
        = pb::FieldCodec.ForMessage(26, global::Pbe.AINodeConnection.Parser);
    private readonly pbc::RepeatedField<global::Pbe.AINodeConnection> nodeConnections_ = new pbc::RepeatedField<global::Pbe.AINodeConnection>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.AINodeConnection> NodeConnections {
      get { return nodeConnections_; }
    }

    /// <summary>Field number for the "bbVars" field.</summary>
    public const int BbVarsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Pbe.BBParam> _repeated_bbVars_codec
        = pb::FieldCodec.ForMessage(34, global::Pbe.BBParam.Parser);
    private readonly pbc::RepeatedField<global::Pbe.BBParam> bbVars_ = new pbc::RepeatedField<global::Pbe.BBParam>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.BBParam> BbVars {
      get { return bbVars_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AITree);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AITree other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TreeID != other.TreeID) return false;
      if(!nodes_.Equals(other.nodes_)) return false;
      if(!nodeConnections_.Equals(other.nodeConnections_)) return false;
      if(!bbVars_.Equals(other.bbVars_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TreeID != 0) hash ^= TreeID.GetHashCode();
      hash ^= nodes_.GetHashCode();
      hash ^= nodeConnections_.GetHashCode();
      hash ^= bbVars_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TreeID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TreeID);
      }
      nodes_.WriteTo(output, _repeated_nodes_codec);
      nodeConnections_.WriteTo(output, _repeated_nodeConnections_codec);
      bbVars_.WriteTo(output, _repeated_bbVars_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TreeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TreeID);
      }
      size += nodes_.CalculateSize(_repeated_nodes_codec);
      size += nodeConnections_.CalculateSize(_repeated_nodeConnections_codec);
      size += bbVars_.CalculateSize(_repeated_bbVars_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AITree other) {
      if (other == null) {
        return;
      }
      if (other.TreeID != 0) {
        TreeID = other.TreeID;
      }
      nodes_.Add(other.nodes_);
      nodeConnections_.Add(other.nodeConnections_);
      bbVars_.Add(other.bbVars_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TreeID = input.ReadInt32();
            break;
          }
          case 18: {
            nodes_.AddEntriesFrom(input, _repeated_nodes_codec);
            break;
          }
          case 26: {
            nodeConnections_.AddEntriesFrom(input, _repeated_nodeConnections_codec);
            break;
          }
          case 34: {
            bbVars_.AddEntriesFrom(input, _repeated_bbVars_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CombineAITree : pb::IMessage<CombineAITree> {
    private static readonly pb::MessageParser<CombineAITree> _parser = new pb::MessageParser<CombineAITree>(() => new CombineAITree());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CombineAITree> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[150]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombineAITree() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombineAITree(CombineAITree other) : this() {
      trees_ = other.trees_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombineAITree Clone() {
      return new CombineAITree(this);
    }

    /// <summary>Field number for the "trees" field.</summary>
    public const int TreesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Pbe.AITree> _repeated_trees_codec
        = pb::FieldCodec.ForMessage(10, global::Pbe.AITree.Parser);
    private readonly pbc::RepeatedField<global::Pbe.AITree> trees_ = new pbc::RepeatedField<global::Pbe.AITree>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.AITree> Trees {
      get { return trees_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CombineAITree);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CombineAITree other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!trees_.Equals(other.trees_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= trees_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      trees_.WriteTo(output, _repeated_trees_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += trees_.CalculateSize(_repeated_trees_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CombineAITree other) {
      if (other == null) {
        return;
      }
      trees_.Add(other.trees_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            trees_.AddEntriesFrom(input, _repeated_trees_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class WeaponConfig : pb::IMessage<WeaponConfig> {
    private static readonly pb::MessageParser<WeaponConfig> _parser = new pb::MessageParser<WeaponConfig>(() => new WeaponConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeaponConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[151]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponConfig(WeaponConfig other) : this() {
      key_ = other.key_;
      weapons_ = other.weapons_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponConfig Clone() {
      return new WeaponConfig(this);
    }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 1;
    private int key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "weapons" field.</summary>
    public const int WeaponsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Pbe.WeaponItemConfig> _repeated_weapons_codec
        = pb::FieldCodec.ForMessage(26, global::Pbe.WeaponItemConfig.Parser);
    private readonly pbc::RepeatedField<global::Pbe.WeaponItemConfig> weapons_ = new pbc::RepeatedField<global::Pbe.WeaponItemConfig>();
    /// <summary>
    ///int32 StartKey              = 2;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.WeaponItemConfig> Weapons {
      get { return weapons_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeaponConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeaponConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if(!weapons_.Equals(other.weapons_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key != 0) hash ^= Key.GetHashCode();
      hash ^= weapons_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Key);
      }
      weapons_.WriteTo(output, _repeated_weapons_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key);
      }
      size += weapons_.CalculateSize(_repeated_weapons_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeaponConfig other) {
      if (other == null) {
        return;
      }
      if (other.Key != 0) {
        Key = other.Key;
      }
      weapons_.Add(other.weapons_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Key = input.ReadInt32();
            break;
          }
          case 26: {
            weapons_.AddEntriesFrom(input, _repeated_weapons_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class WeaponItemConfig : pb::IMessage<WeaponItemConfig> {
    private static readonly pb::MessageParser<WeaponItemConfig> _parser = new pb::MessageParser<WeaponItemConfig>(() => new WeaponItemConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeaponItemConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[152]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponItemConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponItemConfig(WeaponItemConfig other) : this() {
      id_ = other.id_;
      isAddClip_ = other.isAddClip_;
      clipName_ = other.clipName_;
      isHideWeapon_ = other.isHideWeapon_;
      allFrame_ = other.allFrame_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponItemConfig Clone() {
      return new WeaponItemConfig(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 资源名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "IsAddClip" field.</summary>
    public const int IsAddClipFieldNumber = 2;
    private bool isAddClip_;
    /// <summary>
    /// 是否添加动画
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAddClip {
      get { return isAddClip_; }
      set {
        isAddClip_ = value;
      }
    }

    /// <summary>Field number for the "ClipName" field.</summary>
    public const int ClipNameFieldNumber = 3;
    private string clipName_ = "";
    /// <summary>
    /// 动画名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClipName {
      get { return clipName_; }
      set {
        clipName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IsHideWeapon" field.</summary>
    public const int IsHideWeaponFieldNumber = 4;
    private bool isHideWeapon_;
    /// <summary>
    /// 是否隐藏武器
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHideWeapon {
      get { return isHideWeapon_; }
      set {
        isHideWeapon_ = value;
      }
    }

    /// <summary>Field number for the "AllFrame" field.</summary>
    public const int AllFrameFieldNumber = 5;
    private int allFrame_;
    /// <summary>
    ///总时长
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AllFrame {
      get { return allFrame_; }
      set {
        allFrame_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeaponItemConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeaponItemConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (IsAddClip != other.IsAddClip) return false;
      if (ClipName != other.ClipName) return false;
      if (IsHideWeapon != other.IsHideWeapon) return false;
      if (AllFrame != other.AllFrame) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (IsAddClip != false) hash ^= IsAddClip.GetHashCode();
      if (ClipName.Length != 0) hash ^= ClipName.GetHashCode();
      if (IsHideWeapon != false) hash ^= IsHideWeapon.GetHashCode();
      if (AllFrame != 0) hash ^= AllFrame.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (IsAddClip != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsAddClip);
      }
      if (ClipName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClipName);
      }
      if (IsHideWeapon != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsHideWeapon);
      }
      if (AllFrame != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AllFrame);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (IsAddClip != false) {
        size += 1 + 1;
      }
      if (ClipName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClipName);
      }
      if (IsHideWeapon != false) {
        size += 1 + 1;
      }
      if (AllFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AllFrame);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeaponItemConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.IsAddClip != false) {
        IsAddClip = other.IsAddClip;
      }
      if (other.ClipName.Length != 0) {
        ClipName = other.ClipName;
      }
      if (other.IsHideWeapon != false) {
        IsHideWeapon = other.IsHideWeapon;
      }
      if (other.AllFrame != 0) {
        AllFrame = other.AllFrame;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            IsAddClip = input.ReadBool();
            break;
          }
          case 26: {
            ClipName = input.ReadString();
            break;
          }
          case 32: {
            IsHideWeapon = input.ReadBool();
            break;
          }
          case 40: {
            AllFrame = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///摄像机跟随
  /// </summary>
  public sealed partial class CameraFollowConfig : pb::IMessage<CameraFollowConfig> {
    private static readonly pb::MessageParser<CameraFollowConfig> _parser = new pb::MessageParser<CameraFollowConfig>(() => new CameraFollowConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CameraFollowConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[153]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraFollowConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraFollowConfig(CameraFollowConfig other) : this() {
      key_ = other.key_;
      isBreakOnAction_ = other.isBreakOnAction_;
      isBreakOnSkill_ = other.isBreakOnSkill_;
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      backFrame_ = other.backFrame_;
      startMoveFrame_ = other.startMoveFrame_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraFollowConfig Clone() {
      return new CameraFollowConfig(this);
    }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 1;
    private int key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "IsBreakOnAction" field.</summary>
    public const int IsBreakOnActionFieldNumber = 2;
    private bool isBreakOnAction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBreakOnAction {
      get { return isBreakOnAction_; }
      set {
        isBreakOnAction_ = value;
      }
    }

    /// <summary>Field number for the "IsBreakOnSkill" field.</summary>
    public const int IsBreakOnSkillFieldNumber = 3;
    private bool isBreakOnSkill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBreakOnSkill {
      get { return isBreakOnSkill_; }
      set {
        isBreakOnSkill_ = value;
      }
    }

    /// <summary>Field number for the "StartTime" field.</summary>
    public const int StartTimeFieldNumber = 4;
    private int startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "EndTime" field.</summary>
    public const int EndTimeFieldNumber = 5;
    private int endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "BackFrame" field.</summary>
    public const int BackFrameFieldNumber = 6;
    private float backFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BackFrame {
      get { return backFrame_; }
      set {
        backFrame_ = value;
      }
    }

    /// <summary>Field number for the "StartMoveFrame" field.</summary>
    public const int StartMoveFrameFieldNumber = 7;
    private float startMoveFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StartMoveFrame {
      get { return startMoveFrame_; }
      set {
        startMoveFrame_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CameraFollowConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CameraFollowConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (IsBreakOnAction != other.IsBreakOnAction) return false;
      if (IsBreakOnSkill != other.IsBreakOnSkill) return false;
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BackFrame, other.BackFrame)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StartMoveFrame, other.StartMoveFrame)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key != 0) hash ^= Key.GetHashCode();
      if (IsBreakOnAction != false) hash ^= IsBreakOnAction.GetHashCode();
      if (IsBreakOnSkill != false) hash ^= IsBreakOnSkill.GetHashCode();
      if (StartTime != 0) hash ^= StartTime.GetHashCode();
      if (EndTime != 0) hash ^= EndTime.GetHashCode();
      if (BackFrame != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BackFrame);
      if (StartMoveFrame != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StartMoveFrame);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Key);
      }
      if (IsBreakOnAction != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsBreakOnAction);
      }
      if (IsBreakOnSkill != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsBreakOnSkill);
      }
      if (StartTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(StartTime);
      }
      if (EndTime != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(EndTime);
      }
      if (BackFrame != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(BackFrame);
      }
      if (StartMoveFrame != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(StartMoveFrame);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key);
      }
      if (IsBreakOnAction != false) {
        size += 1 + 1;
      }
      if (IsBreakOnSkill != false) {
        size += 1 + 1;
      }
      if (StartTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartTime);
      }
      if (EndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndTime);
      }
      if (BackFrame != 0F) {
        size += 1 + 4;
      }
      if (StartMoveFrame != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CameraFollowConfig other) {
      if (other == null) {
        return;
      }
      if (other.Key != 0) {
        Key = other.Key;
      }
      if (other.IsBreakOnAction != false) {
        IsBreakOnAction = other.IsBreakOnAction;
      }
      if (other.IsBreakOnSkill != false) {
        IsBreakOnSkill = other.IsBreakOnSkill;
      }
      if (other.StartTime != 0) {
        StartTime = other.StartTime;
      }
      if (other.EndTime != 0) {
        EndTime = other.EndTime;
      }
      if (other.BackFrame != 0F) {
        BackFrame = other.BackFrame;
      }
      if (other.StartMoveFrame != 0F) {
        StartMoveFrame = other.StartMoveFrame;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Key = input.ReadInt32();
            break;
          }
          case 16: {
            IsBreakOnAction = input.ReadBool();
            break;
          }
          case 24: {
            IsBreakOnSkill = input.ReadBool();
            break;
          }
          case 32: {
            StartTime = input.ReadInt32();
            break;
          }
          case 40: {
            EndTime = input.ReadInt32();
            break;
          }
          case 53: {
            BackFrame = input.ReadFloat();
            break;
          }
          case 61: {
            StartMoveFrame = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///技能控制镜头
  /// </summary>
  public sealed partial class CameraControlConfig : pb::IMessage<CameraControlConfig> {
    private static readonly pb::MessageParser<CameraControlConfig> _parser = new pb::MessageParser<CameraControlConfig>(() => new CameraControlConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CameraControlConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[154]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraControlConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraControlConfig(CameraControlConfig other) : this() {
      key_ = other.key_;
      posX_ = other.posX_;
      posY_ = other.posY_;
      posZ_ = other.posZ_;
      backMoveFrame_ = other.backMoveFrame_;
      startMoveFrame_ = other.startMoveFrame_;
      stayOffestFrame_ = other.stayOffestFrame_;
      isBreakOnAction_ = other.isBreakOnAction_;
      isBreakOnSkill_ = other.isBreakOnSkill_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraControlConfig Clone() {
      return new CameraControlConfig(this);
    }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 1;
    private int key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "PosX" field.</summary>
    public const int PosXFieldNumber = 3;
    private float posX_;
    /// <summary>
    /// 坐标X
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "PosY" field.</summary>
    public const int PosYFieldNumber = 4;
    private float posY_;
    /// <summary>
    /// 坐标Y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "PosZ" field.</summary>
    public const int PosZFieldNumber = 5;
    private float posZ_;
    /// <summary>
    /// 坐标Z
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosZ {
      get { return posZ_; }
      set {
        posZ_ = value;
      }
    }

    /// <summary>Field number for the "BackMoveFrame" field.</summary>
    public const int BackMoveFrameFieldNumber = 6;
    private int backMoveFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BackMoveFrame {
      get { return backMoveFrame_; }
      set {
        backMoveFrame_ = value;
      }
    }

    /// <summary>Field number for the "StartMoveFrame" field.</summary>
    public const int StartMoveFrameFieldNumber = 7;
    private int startMoveFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartMoveFrame {
      get { return startMoveFrame_; }
      set {
        startMoveFrame_ = value;
      }
    }

    /// <summary>Field number for the "StayOffestFrame" field.</summary>
    public const int StayOffestFrameFieldNumber = 8;
    private int stayOffestFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StayOffestFrame {
      get { return stayOffestFrame_; }
      set {
        stayOffestFrame_ = value;
      }
    }

    /// <summary>Field number for the "IsBreakOnAction" field.</summary>
    public const int IsBreakOnActionFieldNumber = 9;
    private bool isBreakOnAction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBreakOnAction {
      get { return isBreakOnAction_; }
      set {
        isBreakOnAction_ = value;
      }
    }

    /// <summary>Field number for the "IsBreakOnSkill" field.</summary>
    public const int IsBreakOnSkillFieldNumber = 10;
    private bool isBreakOnSkill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBreakOnSkill {
      get { return isBreakOnSkill_; }
      set {
        isBreakOnSkill_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CameraControlConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CameraControlConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosX, other.PosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosY, other.PosY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosZ, other.PosZ)) return false;
      if (BackMoveFrame != other.BackMoveFrame) return false;
      if (StartMoveFrame != other.StartMoveFrame) return false;
      if (StayOffestFrame != other.StayOffestFrame) return false;
      if (IsBreakOnAction != other.IsBreakOnAction) return false;
      if (IsBreakOnSkill != other.IsBreakOnSkill) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key != 0) hash ^= Key.GetHashCode();
      if (PosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosX);
      if (PosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosY);
      if (PosZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosZ);
      if (BackMoveFrame != 0) hash ^= BackMoveFrame.GetHashCode();
      if (StartMoveFrame != 0) hash ^= StartMoveFrame.GetHashCode();
      if (StayOffestFrame != 0) hash ^= StayOffestFrame.GetHashCode();
      if (IsBreakOnAction != false) hash ^= IsBreakOnAction.GetHashCode();
      if (IsBreakOnSkill != false) hash ^= IsBreakOnSkill.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Key);
      }
      if (PosX != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PosX);
      }
      if (PosY != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(PosY);
      }
      if (PosZ != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(PosZ);
      }
      if (BackMoveFrame != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BackMoveFrame);
      }
      if (StartMoveFrame != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(StartMoveFrame);
      }
      if (StayOffestFrame != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(StayOffestFrame);
      }
      if (IsBreakOnAction != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsBreakOnAction);
      }
      if (IsBreakOnSkill != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsBreakOnSkill);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key);
      }
      if (PosX != 0F) {
        size += 1 + 4;
      }
      if (PosY != 0F) {
        size += 1 + 4;
      }
      if (PosZ != 0F) {
        size += 1 + 4;
      }
      if (BackMoveFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BackMoveFrame);
      }
      if (StartMoveFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartMoveFrame);
      }
      if (StayOffestFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StayOffestFrame);
      }
      if (IsBreakOnAction != false) {
        size += 1 + 1;
      }
      if (IsBreakOnSkill != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CameraControlConfig other) {
      if (other == null) {
        return;
      }
      if (other.Key != 0) {
        Key = other.Key;
      }
      if (other.PosX != 0F) {
        PosX = other.PosX;
      }
      if (other.PosY != 0F) {
        PosY = other.PosY;
      }
      if (other.PosZ != 0F) {
        PosZ = other.PosZ;
      }
      if (other.BackMoveFrame != 0) {
        BackMoveFrame = other.BackMoveFrame;
      }
      if (other.StartMoveFrame != 0) {
        StartMoveFrame = other.StartMoveFrame;
      }
      if (other.StayOffestFrame != 0) {
        StayOffestFrame = other.StayOffestFrame;
      }
      if (other.IsBreakOnAction != false) {
        IsBreakOnAction = other.IsBreakOnAction;
      }
      if (other.IsBreakOnSkill != false) {
        IsBreakOnSkill = other.IsBreakOnSkill;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Key = input.ReadInt32();
            break;
          }
          case 29: {
            PosX = input.ReadFloat();
            break;
          }
          case 37: {
            PosY = input.ReadFloat();
            break;
          }
          case 45: {
            PosZ = input.ReadFloat();
            break;
          }
          case 48: {
            BackMoveFrame = input.ReadInt32();
            break;
          }
          case 56: {
            StartMoveFrame = input.ReadInt32();
            break;
          }
          case 64: {
            StayOffestFrame = input.ReadInt32();
            break;
          }
          case 72: {
            IsBreakOnAction = input.ReadBool();
            break;
          }
          case 80: {
            IsBreakOnSkill = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CameraFollowItemConfig : pb::IMessage<CameraFollowItemConfig> {
    private static readonly pb::MessageParser<CameraFollowItemConfig> _parser = new pb::MessageParser<CameraFollowItemConfig>(() => new CameraFollowItemConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CameraFollowItemConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[155]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraFollowItemConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraFollowItemConfig(CameraFollowItemConfig other) : this() {
      key_ = other.key_;
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      scale_ = other.scale_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraFollowItemConfig Clone() {
      return new CameraFollowItemConfig(this);
    }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 1;
    private int key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "X" field.</summary>
    public const int XFieldNumber = 2;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "Y" field.</summary>
    public const int YFieldNumber = 3;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "Z" field.</summary>
    public const int ZFieldNumber = 4;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "Scale" field.</summary>
    public const int ScaleFieldNumber = 5;
    private float scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CameraFollowItemConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CameraFollowItemConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Scale, other.Scale)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key != 0) hash ^= Key.GetHashCode();
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (Scale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Scale);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Key);
      }
      if (X != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Z);
      }
      if (Scale != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Scale);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key);
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (Scale != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CameraFollowItemConfig other) {
      if (other == null) {
        return;
      }
      if (other.Key != 0) {
        Key = other.Key;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      if (other.Scale != 0F) {
        Scale = other.Scale;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Key = input.ReadInt32();
            break;
          }
          case 21: {
            X = input.ReadFloat();
            break;
          }
          case 29: {
            Y = input.ReadFloat();
            break;
          }
          case 37: {
            Z = input.ReadFloat();
            break;
          }
          case 45: {
            Scale = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///摄像机震动
  /// </summary>
  public sealed partial class CameraShakeConfig : pb::IMessage<CameraShakeConfig> {
    private static readonly pb::MessageParser<CameraShakeConfig> _parser = new pb::MessageParser<CameraShakeConfig>(() => new CameraShakeConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CameraShakeConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[156]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraShakeConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraShakeConfig(CameraShakeConfig other) : this() {
      key_ = other.key_;
      xScale_ = other.xScale_;
      yscale_ = other.yscale_;
      allTime_ = other.allTime_;
      timeOneTimes_ = other.timeOneTimes_;
      reduction_ = other.reduction_;
      startFrame_ = other.startFrame_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraShakeConfig Clone() {
      return new CameraShakeConfig(this);
    }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 1;
    private int key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "XScale" field.</summary>
    public const int XScaleFieldNumber = 2;
    private float xScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float XScale {
      get { return xScale_; }
      set {
        xScale_ = value;
      }
    }

    /// <summary>Field number for the "Yscale" field.</summary>
    public const int YscaleFieldNumber = 3;
    private float yscale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Yscale {
      get { return yscale_; }
      set {
        yscale_ = value;
      }
    }

    /// <summary>Field number for the "AllTime" field.</summary>
    public const int AllTimeFieldNumber = 4;
    private float allTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AllTime {
      get { return allTime_; }
      set {
        allTime_ = value;
      }
    }

    /// <summary>Field number for the "TimeOneTimes" field.</summary>
    public const int TimeOneTimesFieldNumber = 5;
    private float timeOneTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TimeOneTimes {
      get { return timeOneTimes_; }
      set {
        timeOneTimes_ = value;
      }
    }

    /// <summary>Field number for the "Reduction" field.</summary>
    public const int ReductionFieldNumber = 6;
    private float reduction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Reduction {
      get { return reduction_; }
      set {
        reduction_ = value;
      }
    }

    /// <summary>Field number for the "StartFrame" field.</summary>
    public const int StartFrameFieldNumber = 7;
    private int startFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartFrame {
      get { return startFrame_; }
      set {
        startFrame_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CameraShakeConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CameraShakeConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(XScale, other.XScale)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Yscale, other.Yscale)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AllTime, other.AllTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TimeOneTimes, other.TimeOneTimes)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Reduction, other.Reduction)) return false;
      if (StartFrame != other.StartFrame) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key != 0) hash ^= Key.GetHashCode();
      if (XScale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(XScale);
      if (Yscale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Yscale);
      if (AllTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AllTime);
      if (TimeOneTimes != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TimeOneTimes);
      if (Reduction != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Reduction);
      if (StartFrame != 0) hash ^= StartFrame.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Key);
      }
      if (XScale != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(XScale);
      }
      if (Yscale != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Yscale);
      }
      if (AllTime != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(AllTime);
      }
      if (TimeOneTimes != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(TimeOneTimes);
      }
      if (Reduction != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Reduction);
      }
      if (StartFrame != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(StartFrame);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key);
      }
      if (XScale != 0F) {
        size += 1 + 4;
      }
      if (Yscale != 0F) {
        size += 1 + 4;
      }
      if (AllTime != 0F) {
        size += 1 + 4;
      }
      if (TimeOneTimes != 0F) {
        size += 1 + 4;
      }
      if (Reduction != 0F) {
        size += 1 + 4;
      }
      if (StartFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartFrame);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CameraShakeConfig other) {
      if (other == null) {
        return;
      }
      if (other.Key != 0) {
        Key = other.Key;
      }
      if (other.XScale != 0F) {
        XScale = other.XScale;
      }
      if (other.Yscale != 0F) {
        Yscale = other.Yscale;
      }
      if (other.AllTime != 0F) {
        AllTime = other.AllTime;
      }
      if (other.TimeOneTimes != 0F) {
        TimeOneTimes = other.TimeOneTimes;
      }
      if (other.Reduction != 0F) {
        Reduction = other.Reduction;
      }
      if (other.StartFrame != 0) {
        StartFrame = other.StartFrame;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Key = input.ReadInt32();
            break;
          }
          case 21: {
            XScale = input.ReadFloat();
            break;
          }
          case 29: {
            Yscale = input.ReadFloat();
            break;
          }
          case 37: {
            AllTime = input.ReadFloat();
            break;
          }
          case 45: {
            TimeOneTimes = input.ReadFloat();
            break;
          }
          case 53: {
            Reduction = input.ReadFloat();
            break;
          }
          case 56: {
            StartFrame = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EditorConfig偏移映射表
  /// </summary>
  public sealed partial class EditorOffsetItem : pb::IMessage<EditorOffsetItem> {
    private static readonly pb::MessageParser<EditorOffsetItem> _parser = new pb::MessageParser<EditorOffsetItem>(() => new EditorOffsetItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EditorOffsetItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[157]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditorOffsetItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditorOffsetItem(EditorOffsetItem other) : this() {
      key_ = other.key_;
      offset_ = other.offset_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditorOffsetItem Clone() {
      return new EditorOffsetItem(this);
    }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 1;
    private long key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "Offset" field.</summary>
    public const int OffsetFieldNumber = 2;
    private int offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EditorOffsetItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EditorOffsetItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Offset != other.Offset) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key != 0L) hash ^= Key.GetHashCode();
      if (Offset != 0) hash ^= Offset.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Key);
      }
      if (Offset != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Offset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      if (Offset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Offset);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EditorOffsetItem other) {
      if (other == null) {
        return;
      }
      if (other.Key != 0L) {
        Key = other.Key;
      }
      if (other.Offset != 0) {
        Offset = other.Offset;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Key = input.ReadInt64();
            break;
          }
          case 16: {
            Offset = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EditorOffsetList : pb::IMessage<EditorOffsetList> {
    private static readonly pb::MessageParser<EditorOffsetList> _parser = new pb::MessageParser<EditorOffsetList>(() => new EditorOffsetList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EditorOffsetList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[158]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditorOffsetList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditorOffsetList(EditorOffsetList other) : this() {
      tableKey_ = other.tableKey_ != null ? other.tableKey_.Clone() : null;
      length_ = other.length_;
      offsetLst_ = other.offsetLst_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditorOffsetList Clone() {
      return new EditorOffsetList(this);
    }

    /// <summary>Field number for the "TableKey" field.</summary>
    public const int TableKeyFieldNumber = 1;
    private global::Pbe.EditorOffsetItem tableKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbe.EditorOffsetItem TableKey {
      get { return tableKey_; }
      set {
        tableKey_ = value;
      }
    }

    /// <summary>Field number for the "Length" field.</summary>
    public const int LengthFieldNumber = 2;
    private int length_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Length {
      get { return length_; }
      set {
        length_ = value;
      }
    }

    /// <summary>Field number for the "OffsetLst" field.</summary>
    public const int OffsetLstFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Pbe.EditorOffsetItem> _repeated_offsetLst_codec
        = pb::FieldCodec.ForMessage(26, global::Pbe.EditorOffsetItem.Parser);
    private readonly pbc::RepeatedField<global::Pbe.EditorOffsetItem> offsetLst_ = new pbc::RepeatedField<global::Pbe.EditorOffsetItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.EditorOffsetItem> OffsetLst {
      get { return offsetLst_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EditorOffsetList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EditorOffsetList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TableKey, other.TableKey)) return false;
      if (Length != other.Length) return false;
      if(!offsetLst_.Equals(other.offsetLst_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (tableKey_ != null) hash ^= TableKey.GetHashCode();
      if (Length != 0) hash ^= Length.GetHashCode();
      hash ^= offsetLst_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (tableKey_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TableKey);
      }
      if (Length != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Length);
      }
      offsetLst_.WriteTo(output, _repeated_offsetLst_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (tableKey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TableKey);
      }
      if (Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Length);
      }
      size += offsetLst_.CalculateSize(_repeated_offsetLst_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EditorOffsetList other) {
      if (other == null) {
        return;
      }
      if (other.tableKey_ != null) {
        if (tableKey_ == null) {
          tableKey_ = new global::Pbe.EditorOffsetItem();
        }
        TableKey.MergeFrom(other.TableKey);
      }
      if (other.Length != 0) {
        Length = other.Length;
      }
      offsetLst_.Add(other.offsetLst_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (tableKey_ == null) {
              tableKey_ = new global::Pbe.EditorOffsetItem();
            }
            input.ReadMessage(tableKey_);
            break;
          }
          case 16: {
            Length = input.ReadInt32();
            break;
          }
          case 26: {
            offsetLst_.AddEntriesFrom(input, _repeated_offsetLst_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EditorOffsetTable : pb::IMessage<EditorOffsetTable> {
    private static readonly pb::MessageParser<EditorOffsetTable> _parser = new pb::MessageParser<EditorOffsetTable>(() => new EditorOffsetTable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EditorOffsetTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[159]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditorOffsetTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditorOffsetTable(EditorOffsetTable other) : this() {
      offsetTable_ = other.offsetTable_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditorOffsetTable Clone() {
      return new EditorOffsetTable(this);
    }

    /// <summary>Field number for the "OffsetTable" field.</summary>
    public const int OffsetTableFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Pbe.EditorOffsetList> _repeated_offsetTable_codec
        = pb::FieldCodec.ForMessage(10, global::Pbe.EditorOffsetList.Parser);
    private readonly pbc::RepeatedField<global::Pbe.EditorOffsetList> offsetTable_ = new pbc::RepeatedField<global::Pbe.EditorOffsetList>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.EditorOffsetList> OffsetTable {
      get { return offsetTable_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EditorOffsetTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EditorOffsetTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!offsetTable_.Equals(other.offsetTable_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= offsetTable_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      offsetTable_.WriteTo(output, _repeated_offsetTable_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += offsetTable_.CalculateSize(_repeated_offsetTable_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EditorOffsetTable other) {
      if (other == null) {
        return;
      }
      offsetTable_.Add(other.offsetTable_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            offsetTable_.AddEntriesFrom(input, _repeated_offsetTable_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///屏幕特效
  /// </summary>
  public sealed partial class ScreenEffectConfig : pb::IMessage<ScreenEffectConfig> {
    private static readonly pb::MessageParser<ScreenEffectConfig> _parser = new pb::MessageParser<ScreenEffectConfig>(() => new ScreenEffectConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScreenEffectConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[160]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScreenEffectConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScreenEffectConfig(ScreenEffectConfig other) : this() {
      key_ = other.key_;
      effectShowType_ = other.effectShowType_;
      effectFguiInfo_ = other.effectFguiInfo_.Clone();
      effectVideoInfo_ = other.effectVideoInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScreenEffectConfig Clone() {
      return new ScreenEffectConfig(this);
    }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 1;
    private int key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "EffectShowType" field.</summary>
    public const int EffectShowTypeFieldNumber = 2;
    private int effectShowType_;
    /// <summary>
    /// 0 = 无，1 fgui特效 2 = 视频
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EffectShowType {
      get { return effectShowType_; }
      set {
        effectShowType_ = value;
      }
    }

    /// <summary>Field number for the "effectFguiInfo" field.</summary>
    public const int EffectFguiInfoFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Pbe.EffectFguiInfo> _repeated_effectFguiInfo_codec
        = pb::FieldCodec.ForMessage(26, global::Pbe.EffectFguiInfo.Parser);
    private readonly pbc::RepeatedField<global::Pbe.EffectFguiInfo> effectFguiInfo_ = new pbc::RepeatedField<global::Pbe.EffectFguiInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.EffectFguiInfo> EffectFguiInfo {
      get { return effectFguiInfo_; }
    }

    /// <summary>Field number for the "effectVideoInfo" field.</summary>
    public const int EffectVideoInfoFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Pbe.EffectVideoInfo> _repeated_effectVideoInfo_codec
        = pb::FieldCodec.ForMessage(34, global::Pbe.EffectVideoInfo.Parser);
    private readonly pbc::RepeatedField<global::Pbe.EffectVideoInfo> effectVideoInfo_ = new pbc::RepeatedField<global::Pbe.EffectVideoInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbe.EffectVideoInfo> EffectVideoInfo {
      get { return effectVideoInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScreenEffectConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScreenEffectConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (EffectShowType != other.EffectShowType) return false;
      if(!effectFguiInfo_.Equals(other.effectFguiInfo_)) return false;
      if(!effectVideoInfo_.Equals(other.effectVideoInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key != 0) hash ^= Key.GetHashCode();
      if (EffectShowType != 0) hash ^= EffectShowType.GetHashCode();
      hash ^= effectFguiInfo_.GetHashCode();
      hash ^= effectVideoInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Key);
      }
      if (EffectShowType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EffectShowType);
      }
      effectFguiInfo_.WriteTo(output, _repeated_effectFguiInfo_codec);
      effectVideoInfo_.WriteTo(output, _repeated_effectVideoInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key);
      }
      if (EffectShowType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EffectShowType);
      }
      size += effectFguiInfo_.CalculateSize(_repeated_effectFguiInfo_codec);
      size += effectVideoInfo_.CalculateSize(_repeated_effectVideoInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScreenEffectConfig other) {
      if (other == null) {
        return;
      }
      if (other.Key != 0) {
        Key = other.Key;
      }
      if (other.EffectShowType != 0) {
        EffectShowType = other.EffectShowType;
      }
      effectFguiInfo_.Add(other.effectFguiInfo_);
      effectVideoInfo_.Add(other.effectVideoInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Key = input.ReadInt32();
            break;
          }
          case 16: {
            EffectShowType = input.ReadInt32();
            break;
          }
          case 26: {
            effectFguiInfo_.AddEntriesFrom(input, _repeated_effectFguiInfo_codec);
            break;
          }
          case 34: {
            effectVideoInfo_.AddEntriesFrom(input, _repeated_effectVideoInfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EffectFguiInfo : pb::IMessage<EffectFguiInfo> {
    private static readonly pb::MessageParser<EffectFguiInfo> _parser = new pb::MessageParser<EffectFguiInfo>(() => new EffectFguiInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EffectFguiInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[161]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectFguiInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectFguiInfo(EffectFguiInfo other) : this() {
      effectFguiLayerType_ = other.effectFguiLayerType_;
      effectId_ = other.effectId_;
      effectCycleType_ = other.effectCycleType_;
      effectDuration_ = other.effectDuration_;
      deleteWhenChangeSkill_ = other.deleteWhenChangeSkill_;
      isTeamShow_ = other.isTeamShow_;
      deleteWhenChangeAction_ = other.deleteWhenChangeAction_;
      isRivalShow_ = other.isRivalShow_;
      followAvatarSpeed_ = other.followAvatarSpeed_;
      stopPlayNextEffect_ = other.stopPlayNextEffect_;
      effectGId_ = other.effectGId_;
      effectStartFrame_ = other.effectStartFrame_;
      effectEndFrame_ = other.effectEndFrame_;
      effectStatus_ = other.effectStatus_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectFguiInfo Clone() {
      return new EffectFguiInfo(this);
    }

    /// <summary>Field number for the "EffectFguiLayerType" field.</summary>
    public const int EffectFguiLayerTypeFieldNumber = 1;
    private int effectFguiLayerType_;
    /// <summary>
    /// 0 = battle 1 = avatar 2 = overrides
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EffectFguiLayerType {
      get { return effectFguiLayerType_; }
      set {
        effectFguiLayerType_ = value;
      }
    }

    /// <summary>Field number for the "EffectId" field.</summary>
    public const int EffectIdFieldNumber = 2;
    private int effectId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EffectId {
      get { return effectId_; }
      set {
        effectId_ = value;
      }
    }

    /// <summary>Field number for the "EffectCycleType" field.</summary>
    public const int EffectCycleTypeFieldNumber = 3;
    private int effectCycleType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EffectCycleType {
      get { return effectCycleType_; }
      set {
        effectCycleType_ = value;
      }
    }

    /// <summary>Field number for the "EffectDuration" field.</summary>
    public const int EffectDurationFieldNumber = 4;
    private int effectDuration_;
    /// <summary>
    /// 时长 转化为 帧数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EffectDuration {
      get { return effectDuration_; }
      set {
        effectDuration_ = value;
      }
    }

    /// <summary>Field number for the "DeleteWhenChangeSkill" field.</summary>
    public const int DeleteWhenChangeSkillFieldNumber = 5;
    private bool deleteWhenChangeSkill_;
    /// <summary>
    ///切换技能时删除特效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DeleteWhenChangeSkill {
      get { return deleteWhenChangeSkill_; }
      set {
        deleteWhenChangeSkill_ = value;
      }
    }

    /// <summary>Field number for the "IsTeamShow" field.</summary>
    public const int IsTeamShowFieldNumber = 6;
    private bool isTeamShow_;
    /// <summary>
    /// 队友可见
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTeamShow {
      get { return isTeamShow_; }
      set {
        isTeamShow_ = value;
      }
    }

    /// <summary>Field number for the "DeleteWhenChangeAction" field.</summary>
    public const int DeleteWhenChangeActionFieldNumber = 8;
    private bool deleteWhenChangeAction_;
    /// <summary>
    ///切换动作时删除特效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DeleteWhenChangeAction {
      get { return deleteWhenChangeAction_; }
      set {
        deleteWhenChangeAction_ = value;
      }
    }

    /// <summary>Field number for the "IsRivalShow" field.</summary>
    public const int IsRivalShowFieldNumber = 9;
    private bool isRivalShow_;
    /// <summary>
    /// 对手可见
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRivalShow {
      get { return isRivalShow_; }
      set {
        isRivalShow_ = value;
      }
    }

    /// <summary>Field number for the "FollowAvatarSpeed" field.</summary>
    public const int FollowAvatarSpeedFieldNumber = 10;
    private bool followAvatarSpeed_;
    /// <summary>
    /// 是否跟角色速度同步
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FollowAvatarSpeed {
      get { return followAvatarSpeed_; }
      set {
        followAvatarSpeed_ = value;
      }
    }

    /// <summary>Field number for the "StopPlayNextEffect" field.</summary>
    public const int StopPlayNextEffectFieldNumber = 11;
    private bool stopPlayNextEffect_;
    /// <summary>
    ///结束后自动播放下一个特效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StopPlayNextEffect {
      get { return stopPlayNextEffect_; }
      set {
        stopPlayNextEffect_ = value;
      }
    }

    /// <summary>Field number for the "EffectGId" field.</summary>
    public const int EffectGIdFieldNumber = 12;
    private int effectGId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EffectGId {
      get { return effectGId_; }
      set {
        effectGId_ = value;
      }
    }

    /// <summary>Field number for the "EffectStartFrame" field.</summary>
    public const int EffectStartFrameFieldNumber = 13;
    private int effectStartFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EffectStartFrame {
      get { return effectStartFrame_; }
      set {
        effectStartFrame_ = value;
      }
    }

    /// <summary>Field number for the "EffectEndFrame" field.</summary>
    public const int EffectEndFrameFieldNumber = 14;
    private int effectEndFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EffectEndFrame {
      get { return effectEndFrame_; }
      set {
        effectEndFrame_ = value;
      }
    }

    /// <summary>Field number for the "EffectStatus" field.</summary>
    public const int EffectStatusFieldNumber = 15;
    private int effectStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EffectStatus {
      get { return effectStatus_; }
      set {
        effectStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EffectFguiInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EffectFguiInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EffectFguiLayerType != other.EffectFguiLayerType) return false;
      if (EffectId != other.EffectId) return false;
      if (EffectCycleType != other.EffectCycleType) return false;
      if (EffectDuration != other.EffectDuration) return false;
      if (DeleteWhenChangeSkill != other.DeleteWhenChangeSkill) return false;
      if (IsTeamShow != other.IsTeamShow) return false;
      if (DeleteWhenChangeAction != other.DeleteWhenChangeAction) return false;
      if (IsRivalShow != other.IsRivalShow) return false;
      if (FollowAvatarSpeed != other.FollowAvatarSpeed) return false;
      if (StopPlayNextEffect != other.StopPlayNextEffect) return false;
      if (EffectGId != other.EffectGId) return false;
      if (EffectStartFrame != other.EffectStartFrame) return false;
      if (EffectEndFrame != other.EffectEndFrame) return false;
      if (EffectStatus != other.EffectStatus) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EffectFguiLayerType != 0) hash ^= EffectFguiLayerType.GetHashCode();
      if (EffectId != 0) hash ^= EffectId.GetHashCode();
      if (EffectCycleType != 0) hash ^= EffectCycleType.GetHashCode();
      if (EffectDuration != 0) hash ^= EffectDuration.GetHashCode();
      if (DeleteWhenChangeSkill != false) hash ^= DeleteWhenChangeSkill.GetHashCode();
      if (IsTeamShow != false) hash ^= IsTeamShow.GetHashCode();
      if (DeleteWhenChangeAction != false) hash ^= DeleteWhenChangeAction.GetHashCode();
      if (IsRivalShow != false) hash ^= IsRivalShow.GetHashCode();
      if (FollowAvatarSpeed != false) hash ^= FollowAvatarSpeed.GetHashCode();
      if (StopPlayNextEffect != false) hash ^= StopPlayNextEffect.GetHashCode();
      if (EffectGId != 0) hash ^= EffectGId.GetHashCode();
      if (EffectStartFrame != 0) hash ^= EffectStartFrame.GetHashCode();
      if (EffectEndFrame != 0) hash ^= EffectEndFrame.GetHashCode();
      if (EffectStatus != 0) hash ^= EffectStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EffectFguiLayerType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EffectFguiLayerType);
      }
      if (EffectId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EffectId);
      }
      if (EffectCycleType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EffectCycleType);
      }
      if (EffectDuration != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EffectDuration);
      }
      if (DeleteWhenChangeSkill != false) {
        output.WriteRawTag(40);
        output.WriteBool(DeleteWhenChangeSkill);
      }
      if (IsTeamShow != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsTeamShow);
      }
      if (DeleteWhenChangeAction != false) {
        output.WriteRawTag(64);
        output.WriteBool(DeleteWhenChangeAction);
      }
      if (IsRivalShow != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsRivalShow);
      }
      if (FollowAvatarSpeed != false) {
        output.WriteRawTag(80);
        output.WriteBool(FollowAvatarSpeed);
      }
      if (StopPlayNextEffect != false) {
        output.WriteRawTag(88);
        output.WriteBool(StopPlayNextEffect);
      }
      if (EffectGId != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(EffectGId);
      }
      if (EffectStartFrame != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(EffectStartFrame);
      }
      if (EffectEndFrame != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(EffectEndFrame);
      }
      if (EffectStatus != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(EffectStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EffectFguiLayerType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EffectFguiLayerType);
      }
      if (EffectId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EffectId);
      }
      if (EffectCycleType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EffectCycleType);
      }
      if (EffectDuration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EffectDuration);
      }
      if (DeleteWhenChangeSkill != false) {
        size += 1 + 1;
      }
      if (IsTeamShow != false) {
        size += 1 + 1;
      }
      if (DeleteWhenChangeAction != false) {
        size += 1 + 1;
      }
      if (IsRivalShow != false) {
        size += 1 + 1;
      }
      if (FollowAvatarSpeed != false) {
        size += 1 + 1;
      }
      if (StopPlayNextEffect != false) {
        size += 1 + 1;
      }
      if (EffectGId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EffectGId);
      }
      if (EffectStartFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EffectStartFrame);
      }
      if (EffectEndFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EffectEndFrame);
      }
      if (EffectStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EffectStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EffectFguiInfo other) {
      if (other == null) {
        return;
      }
      if (other.EffectFguiLayerType != 0) {
        EffectFguiLayerType = other.EffectFguiLayerType;
      }
      if (other.EffectId != 0) {
        EffectId = other.EffectId;
      }
      if (other.EffectCycleType != 0) {
        EffectCycleType = other.EffectCycleType;
      }
      if (other.EffectDuration != 0) {
        EffectDuration = other.EffectDuration;
      }
      if (other.DeleteWhenChangeSkill != false) {
        DeleteWhenChangeSkill = other.DeleteWhenChangeSkill;
      }
      if (other.IsTeamShow != false) {
        IsTeamShow = other.IsTeamShow;
      }
      if (other.DeleteWhenChangeAction != false) {
        DeleteWhenChangeAction = other.DeleteWhenChangeAction;
      }
      if (other.IsRivalShow != false) {
        IsRivalShow = other.IsRivalShow;
      }
      if (other.FollowAvatarSpeed != false) {
        FollowAvatarSpeed = other.FollowAvatarSpeed;
      }
      if (other.StopPlayNextEffect != false) {
        StopPlayNextEffect = other.StopPlayNextEffect;
      }
      if (other.EffectGId != 0) {
        EffectGId = other.EffectGId;
      }
      if (other.EffectStartFrame != 0) {
        EffectStartFrame = other.EffectStartFrame;
      }
      if (other.EffectEndFrame != 0) {
        EffectEndFrame = other.EffectEndFrame;
      }
      if (other.EffectStatus != 0) {
        EffectStatus = other.EffectStatus;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EffectFguiLayerType = input.ReadInt32();
            break;
          }
          case 16: {
            EffectId = input.ReadInt32();
            break;
          }
          case 24: {
            EffectCycleType = input.ReadInt32();
            break;
          }
          case 32: {
            EffectDuration = input.ReadInt32();
            break;
          }
          case 40: {
            DeleteWhenChangeSkill = input.ReadBool();
            break;
          }
          case 48: {
            IsTeamShow = input.ReadBool();
            break;
          }
          case 64: {
            DeleteWhenChangeAction = input.ReadBool();
            break;
          }
          case 72: {
            IsRivalShow = input.ReadBool();
            break;
          }
          case 80: {
            FollowAvatarSpeed = input.ReadBool();
            break;
          }
          case 88: {
            StopPlayNextEffect = input.ReadBool();
            break;
          }
          case 96: {
            EffectGId = input.ReadInt32();
            break;
          }
          case 104: {
            EffectStartFrame = input.ReadInt32();
            break;
          }
          case 112: {
            EffectEndFrame = input.ReadInt32();
            break;
          }
          case 120: {
            EffectStatus = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EffectVideoInfo : pb::IMessage<EffectVideoInfo> {
    private static readonly pb::MessageParser<EffectVideoInfo> _parser = new pb::MessageParser<EffectVideoInfo>(() => new EffectVideoInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EffectVideoInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbe.EditorReflection.Descriptor.MessageTypes[162]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectVideoInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectVideoInfo(EffectVideoInfo other) : this() {
      videoLayerType_ = other.videoLayerType_;
      videoId_ = other.videoId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectVideoInfo Clone() {
      return new EffectVideoInfo(this);
    }

    /// <summary>Field number for the "VideoLayerType" field.</summary>
    public const int VideoLayerTypeFieldNumber = 1;
    private int videoLayerType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VideoLayerType {
      get { return videoLayerType_; }
      set {
        videoLayerType_ = value;
      }
    }

    /// <summary>Field number for the "VideoId" field.</summary>
    public const int VideoIdFieldNumber = 2;
    private int videoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VideoId {
      get { return videoId_; }
      set {
        videoId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EffectVideoInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EffectVideoInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VideoLayerType != other.VideoLayerType) return false;
      if (VideoId != other.VideoId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VideoLayerType != 0) hash ^= VideoLayerType.GetHashCode();
      if (VideoId != 0) hash ^= VideoId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VideoLayerType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(VideoLayerType);
      }
      if (VideoId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(VideoId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VideoLayerType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VideoLayerType);
      }
      if (VideoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VideoId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EffectVideoInfo other) {
      if (other == null) {
        return;
      }
      if (other.VideoLayerType != 0) {
        VideoLayerType = other.VideoLayerType;
      }
      if (other.VideoId != 0) {
        VideoId = other.VideoId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            VideoLayerType = input.ReadInt32();
            break;
          }
          case 16: {
            VideoId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
