package Common;

message PetNumeric
{
    optional sint64 attack           = 1;
    optional sint64 attack_speed     = 2;
    optional sint64 attack_count     = 3;
    optional sint64 fc               = 4;
}

enum PetState
{
    PET_FREE        = 1;
    PET_IN_MISSION  = 2;
}

message Pet
{
    optional uint32 id      = 1;
    optional sint32 lev     = 2[default = 1];
    optional sint32 grade   = 3; // 段位
    optional sint32 stage   = 4; // 阶数

    optional sint32   satisfaction           = 5; // 满足值
    optional sfixed64 last_satisfaction_time = 6;
    optional PetState state                  = 7[default = PET_FREE];

    optional sint64         lev_exp     = 8; // 等级经验
    optional sint64         grade_exp   = 9; // 段位进化经验
    optional PetNumeric     numeric     = 10;
}

enum PetMissionState
{
    PET_MISSION_ACCEPT  = 1;
    PET_MISSION_RUNNING = 2;
    PET_MISSION_FINISH  = 3;
}

message PetMission
{
    optional uint32          id         = 1;
    optional PetMissionState state      = 2[default = PET_MISSION_ACCEPT];
    repeated uint32          pet_list   = 3;
    optional sfixed64        start_time = 4;
}

enum HatchState
{
    HATCH_NOT_START = 1;
    HATCH_RUNNING   = 2;
    HATCH_FINISH    = 3;
}

enum HatchOutputType
{
    NORMAL_HATCH_OUTPUT = 1;
    SUPER_HATCH_OUTPUT  = 2;
}

message HatchCenter
{
    optional HatchState state        = 1; // 普通孵化槽状态 
    optional sfixed64   start_time   = 2;
    optional uint32     normal_count = 3; // 普通孵化次数
    optional uint32     super_count  = 4; // 高级孵化次数
}

message AssistPetCell
{
    optional sint32 pos    = 1;
    optional uint32 pet_id = 2;
}

message AssistPet
{
    repeated AssistPetCell cell_list = 1; 
}

enum PetQualityType
{
    PET_QUALITY_A = 1;
    PET_QUALITY_B = 2;
    PET_QUALITY_C = 3;
}

message PetBrief
{
    optional Pet           main_pet        = 1;
    repeated Pet           assist_pet_list = 2;
    optional PetNumeric    pet_numeric     = 3;
}
