
import "common_quality.proto";
import "common_role.proto";
import "common_pack_item.proto";
import "common_degree.proto";
import "common_effect.proto";
import "common_game_res.proto";
import "common_multiple_item.proto";

package TABLE;

// 道具表
message ITEM
{
    optional uint32                     id                  = 1;
    optional string                     name                = 2;
    optional Common.ItemType            type                = 3;
    optional sint32                     overlay_count       = 6 [default = 1];
    optional Common.EQUIP_POS           equip_pos           = 7;    // 装备位
    repeated Common.GameRes             sell_output_list    = 8;    // 出售产出
    repeated Common.UsedItemOpenCond    open_cond_list      = 9;    // 开启条件
    repeated Common.GameRes             use_output_list     = 10;   // 使用产出
    optional sint64                     base_exp            = 12;   // 基础经验
    optional Common.DegreeType          degree_type         = 13 [default = TYPE_INVALID];  // 学位装备位置
    optional Common.DegreeQualityType   degree_quality      = 14 [default = DEGREE_INVALID];  // 学位品质
    repeated Common.GameResWithProb     use_random_output_list = 17;     // 随机使用产出
    repeated Common.GameRes             use_consume_list    = 19;   // 使用消耗
    optional bool                       inherit_expire      = 21;   //  是否继承过期时间
}

message ITEM_ARRAY
{
    repeated ITEM   rows    = 1;
}

// 装备属性表
message EQUIP_ATTR
{
    optional uint32                 id                = 1;
    optional Common.QualityType     quality           = 2;
    repeated Common.Effect          base_effect_list  = 4; // 基础特效
    repeated Common.Effect          add_effect_list   = 5; // 升级特效加成
    repeated Common.GameRes         advance_cost      = 6; // 升品质消耗
}

message EQUIP_ATTR_ARRAY
{
    repeated EQUIP_ATTR rows = 1;
}

// 装备宝石表
message EQUIP_GEM
{
    optional uint32 id      = 1; // 装备ID
    repeated uint32 gem_arr = 2; // 可镶嵌的宝石
}

message EQUIP_GEM_ARRAY
{
    repeated EQUIP_GEM rows = 1;
}

// 宝石消耗表
message GEM_CONSUME
{
    optional sint32         lev       = 1;
    repeated Common.GameRes cost_list = 2; // 宝石镶嵌/升级消耗
}

message GEM_CONSUME_ARRAY
{
    repeated GEM_CONSUME rows = 1;
}

// 宝石属性表
message GEM_ATTR
{
    optional uint32        id          = 1;
    optional sint32        lev         = 2;
    repeated Common.Effect effect_list = 3;
}

message GEM_ATTR_ARRAY
{
    repeated GEM_ATTR rows = 1;
}

// 学位属性表
message DEGREE_ATTR
{
    optional uint32          id                = 1;
    repeated Common.Effect   base_effect_list  = 3; // 基础特效
    repeated Common.Effect   add_effect_list   = 4; // 升级特效加成
}

message DEGREE_ATTR_ARRAY
{
    repeated DEGREE_ATTR rows = 1;
}

// 学位升级表
message DEGREE_LEV
{
    optional sint32 lev         = 1;
    optional sint64 green_exp   = 2;
    optional sint64 blue_exp    = 3;
    optional sint64 purple_exp  = 4;
    optional sint64 golden_exp  = 5;
    optional sint64 dark_golden_exp = 6;
    optional sint64 red_exp     = 7;
    optional sint64 doctor_exp  = 8;
}

message DEGREE_LEV_ARRAY
{
    repeated DEGREE_LEV rows = 1;
}

message ITEM_PRICE
{
    optional uint32 id    = 1;
    optional sint32 price = 2;
}

message ITEM_PRICE_ARRAY
{
    repeated ITEM_PRICE rows = 1;
}

message DEGREE_DECOMPOSITION
{
    optional uint32                 id  = 1;
    repeated Common.GameRes output_list = 2;
}

message DEGREE_DECOMPOSITION_ARRAY
{
    repeated DEGREE_DECOMPOSITION rows = 1;
}

// 装备升星表
message EQUIP_STAR
{
    optional sint32         star            = 1;
    optional float          addition        = 2;
    optional sint32         cumulative_exp  = 4;
}

message EQUIP_STAR_ARRAY
{
    repeated EQUIP_STAR rows = 1;
}

message ITEM_AWAKE_EXP
{
    optional uint32         item_id   = 1;    
    optional sint32         awake_exp = 2; 
    repeated Common.GameRes cost      = 3;
}

message ITEM_AWAKE_EXP_ARRAY
{
    repeated ITEM_AWAKE_EXP rows = 1;
}

message ITEM_DECOMPOSITION
{
    optional uint32                 id  = 1;
    optional sint32                 lev = 2;
    repeated Common.GameRes output_list = 3;
}

message ITEM_DECOMPOSITION_ARRAY
{
    repeated ITEM_DECOMPOSITION rows = 1;
}

// 特殊道具效果
message MULTIPLE_ITEM_EFFECT
{
    optional uint32                  id          = 1;
    repeated Common.GameResEffect    effect_list = 2;
    optional sfixed64                valid_time  = 3;
}

message MULTIPLE_ITEM_EFFECT_ARRAY
{
    repeated MULTIPLE_ITEM_EFFECT rows = 1;
}

message EQUIP_LEVUP
{
    optional sint32         lev       = 1;
    repeated Common.GameRes cost_list = 2;
}

message EQUIP_LEVUP_ARRAY
{
    repeated EQUIP_LEVUP rows = 1;
}

message SKILL_LEVUP
{
    optional sint32         lev       = 1;
    repeated Common.GameRes cost_list = 2;
}

message SKILL_LEVUP_ARRAY
{
    repeated SKILL_LEVUP rows = 1;
}

message DEGREE_ADVANCE
{
    optional Common.DegreeQualityType quality   = 1;
    repeated Common.GameRes           cost_list = 2;
}

message DEGREE_ADVANCE_ARRAY
{
    repeated DEGREE_ADVANCE rows = 1; 
}
