// 地盘系统协议

import "common_role.proto";
import "common_game_res.proto";
import "common_territory.proto";
import "common_shop.proto";
import "common_pack_item.proto";

package Cmd.User;

// 前进
message JUMP_FORWARD_REQ
{
    optional bool direction = 1;
}

// spec_event_type 只有当特殊事件为跳跃前进时才会填，因为在这种情况下会服务器前进
// 两次。客户端需要知道第一次前进的步数，当该字段有效时，JUMP_FORWARD_REQ 协议发
// 送前后的 current_step 差值再减3，即为第一次前进的步数(方便客户端做UI特效)。
message JUMP_FORWARD_RSP
{
    optional Common.Territory territory     = 1; 
    optional uint32           rand_event_id = 2 [default = 0]; // 随机事件ID
    repeated Common.GameRes   output_list   = 3;               // 产出列表(负数为扣)
    // 特殊事件类型
    optional Common.TerrSpecialEventType spec_event_type = 4 [default = TERR_SPECIAL_EVENT_INVALID];
    // 第一次前进的位置，只有有两步事件时才有效
    optional uint32 first_step = 5;
    
    optional uint32          robber_id        = 6 [default = 0]; // 随机事件: 打劫者ID
    optional Common.RoleInfo robber_role_info = 7;               // 随机时间: 打劫者角色信息
    optional Common.StallInfo stall_info      = 8;               // 摆摊信息
    optional Common.Pack item_pack            = 9;              
    
    optional Common.RoleInfo  diff_role_info = 15;
}

// 查询所有地盘
message QUERY_TERRITORY_REQ
{
}

message QUERY_TERRITORY_RSP
{
    optional Common.Territory territory = 1;
}

// 解锁商店
message UNLOCK_TERRITORY_CELL_REQ
{
}

message UNLOCK_TERRITORY_CELL_RSP
{
    optional Common.Territory territory = 1;
}

// 占领英雄商店
message OCCUPY_TERRITORY_HERO_CELL_REQ
{
    optional uint32 idx     = 1; // 地盘 block 编号
    optional uint32 hero_id = 2; // 占领的英雄ID
}

message OCCUPY_TERRITORY_HERO_CELL_RSP
{
    optional Common.Territory territory = 1;
}

// 取消占领
message UNOCCUPY_TERRITORY_HERO_CELL_REQ
{
    optional uint32 idx = 1; // 地盘 block 编号
}

message UNOCCUPY_TERRITORY_HERO_CELL_RSP
{
    optional Common.Territory territory = 1;
}

// 更换英雄地盘占领对手
message CHANGE_TERR_HERO_OCCUPANT_REQ
{
    optional uint32 idx = 1; // 地盘 block 编号
}

message CHANGE_TERR_HERO_OCCUPANT_RSP
{
    optional Common.Territory territory = 1;
}

// 升级商店
message UPGRADE_TERRITORY_CELL_REQ
{
}

message UPGRADE_TERRITORY_CELL_RSP
{
    optional Common.Territory territory = 1;
}

// 全部收租
message COLLECT_TERRITORY_REQ
{
}

message COLLECT_TERRITORY_RSP
{
    repeated Common.GameRes   award_list  = 1;    
    optional Common.Territory territory   = 2;
    
    optional Common.RoleInfo  diff_role_info = 15;
}

// 单个商店收租
message COLLECT_CELL_REQ
{
    optional uint32 idx = 1; // 地盘块编号
    optional uint32 id  = 2; // 商店ID
}

message COLLECT_CELL_RSP
{
    repeated Common.GameRes   award_list  = 1;
    optional Common.Territory territory   = 2;
    
    optional Common.RoleInfo  diff_role_info = 15;
}

// 制霸地盘查询
message QUERY_SUPPER_TERR_REQ
{
}

message QUERY_SUPPER_TERR_RSP
{
    optional Common.SupperTerr supper_terr = 1;
    optional sint32            accumulate  = 2;
}

// 制霸地盘挑战
message SUPPER_TERR_FIGHT_REQ
{
    optional uint32 rank    = 1;
    optional bool   winflag = 2;
}

message SUPPER_TERR_FIGHT_RSP
{
    optional Common.SupperTerr supper_terr = 1;
    repeated Common.GameRes    award_list  = 2;
    
    optional Common.RoleInfo  diff_role_info = 15;
}

// 制霸地盘收租
message COLLECT_SUPPER_CELL_REQ
{
    optional uint32 rank = 1;
}

message COLLECT_SUPPER_CELL_RSP
{
    repeated Common.GameRes award_list = 1;
    
    optional Common.RoleInfo  diff_role_info = 15;
}

message TERR_ROB_AWARD_REQ
{
    optional bool winflag = 1;
}

message TERR_ROB_AWARD_RSP
{
    repeated Common.GameRes award_list = 1;
    
    optional Common.RoleInfo  diff_role_info = 15;
}

// -----------------------------------------------------------------------------
// 附近的人
// -----------------------------------------------------------------------------

// 查询附近可打劫玩家
message QUERY_NEARBY_PLAYERS_REQ
{
}

message QUERY_NEARBY_PLAYERS_RSP
{
    optional Common.NearbyPlayerInfo player_info = 1;
}

// 刷新附近可打劫玩家
message REFRESH_NEARBY_PLAYERS_REQ
{
}

message REFRESH_NEARBY_PLAYERS_RSP
{
    optional Common.NearbyPlayerInfo player_info = 1;
}

// -----------------------------------------------------------------------------
// 摆摊
// -----------------------------------------------------------------------------

// 邀请信息提示
message INVITE_INFO_NOTICE
{
    optional Common.TerrStallInviteType type = 1 [default = TERR_STALL_INVITE_DEFEND_TYPE];
    optional sfixed64                timestamp = 2;
}

message LOCK_TERR_STALL_REQ
{
}

message LOCK_TERR_STALL_RSP
{
    optional Common.TerrStallQuality quality        = 1 [default = TERR_STALL_INVALID];
    optional sfixed64                timestamp      = 2;
    optional int32                   refresh_coin   = 3;
    optional int32                   refresh_gold   = 4;
}

message FRESH_TERR_STALL_QUALITY_REQ
{
    optional Common.TerrStallFreshType type     = 1 [default = COIN_FRESH];
}

message FRESH_TERR_STALL_QUALITY_RSP
{
    optional Common.TerrStallQuality quality        = 1 [default = TERR_STALL_INVALID];
    optional sfixed64                timestamp      = 2;
    optional int32                   refresh_coin   = 3;
    optional int32                   refresh_gold   = 4;
    optional Common.RoleInfo         diff_role_info = 5;
}

message OCCUPY_TERR_STALL_REQ
{
}

message OCCUPY_TERR_STALL_RSP
{
    optional Common.StallInfo stall_info      = 1;  // 摆摊信息
}

// 摊位打劫成功
message ROB_NOTICE
{
}

// 摊位被打爆
message STALL_FINISH_BY_ROBBED_NOTICE
{
    optional uint32 pos = 1;
}

// 打劫摊位
message ROB_TERR_STALL_REQ
{
    optional bool   winflag = 1;
    optional uint32 pos     = 2; 
}

message ROB_TERR_STALL_RSP
{
    // 如果摊位被打爆(摊位可被抢劫次数为0)且自己没有摊位, 则可以占领此摊位
    optional bool is_occupy = 1; 
}

// 查询被打劫日志
message QUERY_ROBBED_TERR_STALL_LOG_REQ
{
}

message QUERY_ROBBED_TERR_STALL_LOG_RSP
{
    repeated Common.RobbedStallLog robbed_stall_log_list = 1;
}

// 查询社团成员的信息
message QUERY_GROUP_STALL_REQ
{
    optional Common.TerrStallInviteType which = 1 [default = TERR_STALL_INVITE_DEFEND_TYPE];

}

message QUERY_GROUP_STALL_RSP
{
    repeated Common.InviteInfo invite_info_list = 1;
}

// 邀请护卫
message INVITE_TERR_STALL_DEFENDER_REQ
{
    optional uint32 role_id = 1;
    optional Common.TerrStallInviteType which = 2 [default = TERR_STALL_INVITE_DEFEND_TYPE];
    optional Common.VoiceInfo voice_info = 3;
}

message INVITE_TERR_STALL_DEFENDER_RSP
{
}

// 查询收到的邀请信息
message QUERY_TERR_STALL_INVITE_INFO_REQ
{
    optional Common.TerrStallInviteType which = 1 [default = TERR_STALL_INVITE_DEFEND_TYPE];
}

message QUERY_TERR_STALL_INVITE_INFO_RSP
{
    repeated Common.ReceiveInviteInfo receive_invite_info_list = 1;
    optional sint32 left_count = 2;
}

// 查询是否有邀请信息
message CHECK_TERR_STALL_INVITE_INFO_REQ
{
}

message CHECK_TERR_STALL_INVITE_INFO_RSP
{
    optional bool is_defend_info = 1;
    optional bool is_help_info   = 2;
}

// 应答Notice
message RESPONSE_DEFEND_INFO_NOTICE
{
    optional Common.StallInfo stall_info    = 1;
}

message RESPONSE_HELP_INFO_NOTICE
{
    optional Common.RoleInfo  role_info     = 1;
}

// 应答护卫邀请 
message RESPONSE_TERR_STALL_DEFENDER_REQ
{
    optional uint32 role_id     = 1;
    optional bool   response    = 2 [default = false]; // false 拒绝, true 接受
}

message RESPONSE_TERR_STALL_DEFENDER_RSP
{
}

// 应答求助邀请
message RESPONSE_TERR_STALL_HELP_REQ
{
    optional uint32 role_id     = 1;
    optional bool   response    = 2 [default = false]; // false 拒绝, true 接受
}

message RESPONSE_TERR_STALL_HELP_RSP
{
}

// 取消助战
message CANCEL_TERR_STALL_HELP_REQ
{
}

message CANCEL_TERR_STALL_HELP_RSP
{
}

message EntryCount
{
    optional sint32 left_count     = 1;
    optional sint32 left_buy_count = 2;
    optional sint32 buy_price      = 3;
}

// 购买各种摆摊涉及到的次数限制
message BUY_TERR_STALL_COUNT_REQ
{
    optional Common.TerrStallBuyType type = 1 [default = TERR_STALL_BUY_INVALID];
}

message BUY_TERR_STALL_COUNT_RSP
{
    optional Common.TerrStallBuyType type = 1 [default = TERR_STALL_BUY_INVALID];
    optional EntryCount entry_count = 2;
    optional Common.RoleInfo  diff_role_info = 15;
}

// 查询地盘相关的次数协议
message QUERY_ALL_TERR_COUNT_REQ
{
}

message QUERY_ALL_TERR_COUNT_RSP
{
    repeated EntryCount count_list = 1;
}

// 查询自己摊位信息
message QUERY_TERR_STALL_INFO_REQ
{
}

message QUERY_TERR_STALL_INFO_RSP
{
    optional Common.StallInfo stall_info     = 1; // 摊位信息
    optional sint32           occupy_count   = 2; // 占领次数
}

// 查询地盘块上所有摊位的状态
message QUERY_ALL_TERR_STALL_STATE_REQ
{
    optional uint32 idx = 1; // 地盘块编号, 值为0时, 查询所有
}

message QUERY_ALL_TERR_STALL_STATE_RSP
{
    repeated Common.StallInfo stall_info_list = 1;
    optional uint32 my_stall_pos              = 2;
}

// 地盘商店
message QUERY_TERRITORY_SHOP_REQ
{
}

message QUERY_TERRITORY_SHOP_RSP
{
    repeated Common.TerritoryShop.Goods goods_list      = 1;
    optional int32                      refresh_price   = 2;
}

message BUY_TERRITORY_SHOP_GOODS_REQ
{
    optional uint32 idx = 1;
}

message BUY_TERRITORY_SHOP_GOODS_RSP
{
    repeated Common.TerritoryShop.Goods goods_list = 1;
    optional Common.Pack item_pack = 2;
    
    optional Common.RoleInfo diff_role_info = 15;
}

message REFRESH_TERRITORY_SHOP_GOODS_REQ
{
}

message REFRESH_TERRITORY_SHOP_GOODS_RSP
{
    repeated Common.TerritoryShop.Goods goods_list = 1;
    repeated Common.GameRes refresh_price          = 2;
    optional Common.Pack item_pack                 = 3;
}

