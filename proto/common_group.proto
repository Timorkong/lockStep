import "common_role.proto";
import "common_effect.proto";
import "common_notification.proto";
import "common_game_res.proto";
import "common_super_equipment.proto";

package Common;

message GroupRoleInfo
{
    optional uint32     id          = 1;
    optional string     name        = 2;
    optional uint32     base_id     = 3;
    optional uint32     transform   = 4;
    optional sint32     lev         = 5;
    optional sint64     fc          = 6;
    optional sint64     week_active = 7;
    optional sint64     week_fund   = 8;
    optional sint32     instance_count = 9;
    optional sfixed64   logout_timestamp = 11;
    optional sint64     daily_active = 12;
    optional sint64     daily_fund   = 13;
    optional sfixed64   send_mail_timestamp = 14; // 上一次发社团邮件时间戳
}

enum GroupType
{
    NORMAL_GROUP = 1;
    SYSTEM_GROUP = 2;
}

enum GroupShopType
{
    GROUP_SHOP_TYPE_ANTIQUE = 1; // 古董商店
    GROUP_SHOP_TYPE_BATTLE  = 2; // 社团战商店
}

message GroupInfo
{
    optional uint32        id          = 1;
    optional string        name        = 2;
    optional sint32        lev         = 3;
    repeated GroupRoleInfo member_list = 4;
    optional string        notice      = 5;
    optional string        bulletin    = 6;
    optional GroupType     type        = 7[default = NORMAL_GROUP];
    optional uint32        captain     = 8;
    optional sint32        member_limit = 9;
    optional sint64        wood        = 10; // 木材(废弃)
    optional sint64        fund        = 11; // 经费
    optional sint64        active      = 12; // 活跃值
    repeated uint32        admin_list  = 13; 
    optional sint32        rank        = 14;
    optional sint64        week_active = 15; // 一周活跃
    optional sint64        week_fund   = 16; // 一周经费
    optional uint32        icon        = 17;
    optional sint64        join_fc     = 18; 
    optional uint32        icon_box    = 19;
    optional GroupJoinOption join_option = 20[default = GROUP_JOIN_ABLE];
}

message GroupBrief
{
    optional uint32     id           = 1;
    optional string     name         = 2;
    optional sint32     lev          = 3;
    optional sint32     member_count = 4;
    optional string     notice       = 5;
    optional GroupType  type         = 6[default = NORMAL_GROUP];
    optional sint32     member_limit = 7;
    optional sint64     fc           = 8;
    optional uint32     icon         = 9;
    optional sint64     join_fc      = 10; // 加入需求战力
    optional uint32     icon_box     = 11; 
    optional GroupJoinOption join_option = 12[default = GROUP_JOIN_ABLE];
    optional sint64     battle_score = 13; 
    optional sint32     win_count    = 14; 
    optional string     captain      = 15;
    optional sint32     rank         = 16;
    optional sint64     battle_fc    = 17;  // 社团战中的战力
    optional sint64     hegemony_score = 18; // 社团争霸积分 
}

enum GroupJoinOption
{
    GROUP_JOIN_ABLE     = 1; // 开放加入
    GROUP_JOIN_LIMIT_FC = 2; // 限制战力
    GROUP_JOIN_DISABLE  = 3; // 不允许加入
    GROUP_JOIN_RESERVED_1 = 4;
    GROUP_JOIN_RESERVED_2 = 5;
}

message GroupIcon
{
    repeated uint32 unlocked_icon_list      = 1; 
    repeated uint32 unlocked_icon_box_list  = 2; 
}

message GroupMember
{
    optional uint32 role_id = 1;
    optional string name    = 2;
}

message GymHero
{
    optional uint32   owner_id   = 1;
    optional sfixed64 push_time  = 2;
    optional sfixed64 lease_time = 3;
    //optional sint32   pos        = 4;
    optional uint64   guid       = 5;
    optional HeroInfo hero       = 6;
    optional Numeric  numeric    = 7;
}

// 社团建筑升级信息
message BuildUpgradeInfo
{
    optional sfixed64  begin_time           = 1; // 开始升级时间
    optional bool      is_upgrading         = 2[default = false]; // 是否正在进行升级中
    repeated GroupRoleInfo participants_list    = 3; // 参加升级角色列表(RoleBrief只填前4个字段)
}

// 社团建筑类型
enum GroupBuildingType
{
    BUILDING_GROUP_BASE = 1;
    BUILDING_CHESS_ROOM = 2;
    BUILDING_BUN_ROOM   = 3;
    BUILDING_GYM        = 4;
    BUILDING_SHOP       = 5;
}

message GroupEquip
{
    optional uint32    id         = 1;
    optional sint32    lev        = 2;
    optional sfixed64  levup_time = 3;
}

enum GroupMissionState
{
    GROUP_MISSION_NOT_START = 1;
    GROUP_MISSION_FAILED    = 2;
    GROUP_MISSION_FINISH    = 3;
    GROUP_MISSION_RESERVED_1 = 4;
    GROUP_MISSION_RESERVED_2 = 5;
}

message GroupMission
{
    optional uint32             id    = 1;
    optional GroupMissionState  state = 2[default = GROUP_MISSION_NOT_START];
    optional sint32             reset_count = 3;
}

message LeaseHeroInfo
{
    optional uint64          guid       = 1;
    optional Common.HeroInfo hero_info  = 2;
    optional uint32          owner_id   = 3;
    optional sfixed64        lease_time = 4;
    optional Common.Numeric  numeric    = 5;
}

message GroupInstanceRole
{
    optional uint32     id              = 1;
    optional string     name            = 2;
    optional sint64     hurt            = 3;
    optional sfixed64   entry_timestamp = 4;
    optional uint32     transform       = 5;
}

message GroupBoss
{
    optional uint32            id        = 1;
    optional sint64            hp        = 2;
    repeated GroupInstanceRole role_list = 3;
    optional sint64            max_hp    = 4;
}

message GroupInstance
{
    optional uint32     id              = 1;
    optional sfixed64   open_timestamp  = 2;
    repeated GroupBoss  boss_list       = 3;
    optional bool       finished        = 4[default = false];
    optional float      progress        = 6; // 完成进度
    repeated GroupInstanceRole role_list  = 7; // 角色伤害列表
}

message GroupInstanceAward
{
    optional uint32     id         = 1;
    optional sint32     count      = 2;
    repeated uint32     apply_list = 3; // 申请队列
}

message GroupAwardAssignRecord
{
    optional string     role_name   = 1;
    optional sfixed64   timestamp   = 2;
    repeated GameRes    award_list  = 3;
}

message BattleAssistHeroCell
{
    optional uint32 hero_id = 1;
    optional sint32 idx     = 2;
}

message HeroBattleArray
{
    optional uint32               main_hero        = 1; 
    repeated BattleAssistHeroCell assist_hero_list = 2; 
}

message BattleHeroInfo
{
    optional HeroInfo  hero    = 1;
    optional float     last_hp = 2[default = 1.0];
    optional Numeric   numeric = 3;
    optional sint64    score   = 4;
    repeated HeroInfo  assist_hero_list = 5; // 助阵列表
}

message GroupRoleFighter
{
    optional RoleBrief      role       = 1; 
    repeated BattleHeroInfo hero_list  = 2;
    optional sint64         score      = 3; // 积分
    optional bool           ready      = 4[default = false];
    optional sint32         win_streak = 5;
    optional sint32         hero_idx   = 6;
    optional sint64         battle_fc  = 7;
    optional sint32                   constellation_lev  = 8;
    repeated Common.ConstellationInfo constellation_list = 9;
    optional Common.SuperEquipment    super_equipment    = 10;
}

message SingleBattle
{
    optional GroupRoleFighter  left_role  = 1;
    optional GroupRoleFighter  right_role = 2;
    optional SingleBattleState state      = 3[default = BATTLE_NOT_START];
    optional uint64            scene_guid = 4;
    optional sfixed64          state_change_time  = 5; 
    optional bool              simulation = 6[default = false]; // 是否服务器模拟
}

message BattleRoad
{
    repeated SingleBattle battle_list = 1;
    optional float        left_score  = 2; // 比分
    optional float        right_score = 3;
    optional sfixed64     start_time  = 4; // 开始战斗时间
    optional bool         finished    = 5[default = false];
}

message BattleInfo
{
    optional uint64           battle_id   = 1;
    //optional uint32           left_group  = 2;
    //optional uint32           right_group = 3;
    optional BattleRoad       top_road    = 4;
    optional BattleRoad       mid_road    = 5;
    optional BattleRoad       down_road   = 6;
    optional GroupBattleState state       = 7[default = GROUP_BATTLE_READY]; 
    optional sfixed64         create_time = 8;
    optional sint32           round       = 9;
    optional GroupBrief       left_group_brief  = 10; 
    optional GroupBrief       right_group_brief = 11;
    optional bool             left_awarded      = 12;
    optional bool             right_awarded     = 13;
}

enum GroupBattleRoadType
{
    BATTLE_ROAD_INVAILD = 0;
    BATTLE_ROAD_TOP     = 1;
    BATTLE_ROAD_MID     = 2;
    BATTLE_ROAD_DOWN    = 3;
    BATTLE_ROAD_RESERVED_1 = 4;
    BATTLE_ROAD_RESERVED_2 = 5;
}

enum SingleBattleState
{
    BATTLE_NOT_START = 1; 
    BATTLE_RUNNING   = 2; // 战斗中
    BATTLE_PAUSE     = 3; // 等待下一场
    BATTLE_FINISH    = 4;
}

enum GroupBattleState
{
    GROUP_BATTLE_READY  = 1;
    GROUP_BATTLE_START  = 2;
    GROUP_BATTLE_FINISH = 3;
    GROUP_BATTLE_RESERVED_1 = 4;
    GROUP_BATTLE_RESERVED_2 = 5;
}

message GroupLog
{
    optional Common.UnifiedMsg msg       = 1; 
    optional sfixed64          timestamp = 2;
}

enum GroupHegemonyStage
{
    GROUP_HEGEMONY_QUALIFIERS = 1; // 预选 
    GROUP_HEGEMONY_SEMIFINAL  = 2; // 半决赛
    GROUP_HEGEMONY_FINALS     = 3; // 决赛
    GROUP_HEGEMONY_END        = 4; // 最后结束阶段
    GROUP_HEGEMONY_RESERVED_1 = 5; 
    GROUP_HEGEMONY_RESERVED_2 = 6; 
}

enum GroupHegemonyStatus
{
    GROUP_HEGEMONY_NOT_START = 1; 
    GROUP_HEGEMONY_RUNNING   = 2; 
    GROUP_HEGEMONY_FINISHED  = 3;
    GROUP_HEGEMONY_STATUS_RESERVED_1 = 4;
    GROUP_HEGEMONY_STATUS_RESERVED_2 = 5;
}

message GroupHegemonyHistoryRank
{
    message Entry
    {
        repeated string group_list = 1;
    }
    
    repeated Entry entry_list = 1; 
}

message GroupHegemonyAward
{
    optional uint32 id      = 1;
    optional bool   captain = 2[default = false];
    optional bool   admin   = 3[default = false];
    optional bool   awarded = 4[default = false];
}

enum GroupHegemonyAwardType
{
    GROUP_HEGEMONY_AWARD_PARTICIPATE = 1;
    GROUP_HEGEMONY_AWARD_QUALIFIERS  = 2;
    GROUP_HEGEMONY_AWARD_SEMIFINAL   = 3;
    GROUP_HEGEMONY_AWARD_FINALS      = 4;
    GROUP_HEGEMONY_AWARD_RESERVED_1  = 5;
    GROUP_HEGEMONY_AWARD_RESERVED_2  = 6;
}

