// 地盘表格

import "common_territory.proto";
import "common_game_res.proto";

package TABLE;

// 地图
message TERR_MAP
{
    optional uint32                step    = 1;
    optional uint32                idx     = 2;
    optional Common.TerrEventType  type    = 3;
    repeated uint32                id_list = 4;   // 随机事件ID列表
    optional Common.TerrSpecialEventType spec_event_type = 5;
}

message TERR_MAP_ARRAY
{
    repeated TERR_MAP rows = 1;
}

// 普通商店
message TERR_NORMAL_CELL
{
    optional uint32 idx           = 1;
    optional uint32 id            = 2;
    optional int32  unlock_stars  = 4;
    optional int32  upgrade_stars = 5;
}

message TERR_NORMAL_CELL_ARRAY
{
    repeated TERR_NORMAL_CELL rows = 1;
}

// 英雄商店
message TERR_HERO_CELL
{
    optional uint32 idx  = 1;
    optional int32  stars = 10;
}

message TERR_HERO_CELL_ARRAY
{
    repeated TERR_HERO_CELL rows = 1;
}

// 随机事件
message TERR_RAND_EVENT
{
    optional uint32         id          = 1;
    repeated Common.GameRes output_list = 3;
}

message TERR_RAND_EVENT_ARRAY
{
    repeated TERR_RAND_EVENT rows = 1;
}

// 新手引导
message TERR_NEWBIE_GUIDE
{
    optional uint32 idx      = 1; // 次数
    optional uint32 roll_num = 2; // 扔出数字
}

message TERR_NEWBIE_GUIDE_ARRAY
{
    repeated TERR_NEWBIE_GUIDE rows = 1;
}

message TERR_STALL
{
    optional Common.TerrStallQuality quality = 1;
    optional int32 all_output    = 2;
    optional int32 robbed_count  = 3; 
    optional int32 rob_output    = 4;
    optional int32 defend_output = 5;
}

message TERR_STALL_ARRAY
{
    repeated TERR_STALL rows = 1;
}

message TERR_FRESH_STALL
{
    optional Common.TerrStallFreshType type     = 1;
    optional Common.TerrStallQuality   quality  = 2;
    optional float                     probability = 3;
}

message TERR_FRESH_STALL_ARRAY
{
    repeated TERR_FRESH_STALL rows = 1;
}

message TERR_BUY_COUNT
{
    optional uint32 count                   = 1;
    optional int32  rob_consume             = 2; // 购买打劫次数消耗
    optional int32  defend_consume          = 3; // 购买护卫次数消耗
    optional int32  help_consume            = 4; // 购买助战次数消耗
    optional int32  back_point_consume      = 5; // 购买后退筛子消耗
    optional int32  occpuy_consume          = 6; // 购买摆摊次数
    optional int32  forward_point_consume   = 7; // 购买摆摊次数

}

message TERR_BUY_COUNT_ARRAY
{
    repeated TERR_BUY_COUNT rows = 1;
}

message TERR_FRESH_STALL_QUALITY
{
    optional uint32 id         = 1;
    optional int32 coin_count = 2;
    optional int32 gold_count = 3;
}

message TERR_FRESH_STALL_QUALITY_ARRAY
{
    repeated TERR_FRESH_STALL_QUALITY rows = 1;
}
