// 社团相关

import "common_group.proto";
import "common_game_res.proto";
import "common_effect.proto";

package TABLE;

message GROUP_SP_WELFARE
{
    optional uint32         id           = 1;
    repeated Common.GameRes cost_list    = 3;
    optional sint32         sp           = 4;
    optional sint32         dividend     = 5; // 其他成员福利分红
}

message GROUP_SP_WELFARE_ARRAY
{
    repeated GROUP_SP_WELFARE rows = 1;
}

message GROUP_EQUIP
{
    optional uint32         id           = 1;
    optional string         name         = 2;
    optional sint32         cost_fund    = 3;
}

message GROUP_EQUIP_ARRAY
{
    repeated GROUP_EQUIP rows = 1;
}

message GROUP_EQUIP_LEV
{
    optional uint32         id          = 1;
    optional sint32         lev         = 2;
    repeated Common.Effect  effect_list = 3;
    optional sint32         cost_time   = 4;
    optional sint32         cost_fund   = 5;
}

message GROUP_EQUIP_LEV_ARRAY
{
    repeated GROUP_EQUIP_LEV rows = 1;
}

message GROUP_MISSION
{
    optional uint32         id           = 1;
    optional uint32         hero_id      = 4; // 推荐英雄
    optional sint64         recommend_fc = 5; 
    repeated Common.GameRes award_list   = 6;
    optional sint32         fund         = 7; // 社团经费贡献
    optional sint32         vip_lev      = 8; // vip限制
    optional sint32         mission_lev  = 9; 
}

message GROUP_MISSION_ARRAY
{
    repeated GROUP_MISSION rows = 1;
}

message GROUP_INSTANCE
{
    optional uint32     id          = 1;
    optional string     name        = 2;
    optional sint32     open_cost   = 3;
    optional sint32     duration    = 4; // 单位:小时
    repeated uint32     boss_list   = 5;
    optional sint32     reset_cost  = 6;
    repeated Common.GameRes extra_award_list = 7;
    optional uint32     front_instance_id    = 8;
}

message GROUP_INSTANCE_ARRAY
{
    repeated GROUP_INSTANCE rows = 1;
}

message GROUP_BOSS
{
    optional uint32         id                  = 1;
    optional sint64         max_hp              = 3;
    repeated uint32         output_list         = 4;
    optional sint32         min_output_count    = 5;
    optional sint32         max_output_count    = 6;
    repeated Common.GameRes last_hit_award_list = 7;
    optional sint32         coin_output         = 8;
}

message GROUP_BOSS_ARRAY
{
    repeated GROUP_BOSS rows = 1;
}

message GROUP_INSTANCE_AWARD
{
    optional uint32         id         = 1;
    repeated Common.GameRes award_list = 2;
    optional float          prob       = 3;
}

message GROUP_INSTANCE_AWARD_ARRAY
{
    repeated GROUP_INSTANCE_AWARD rows = 1;
}

message GROUP_HURT_RANK_AWARD
{
    optional uint32         id          = 1; 
    optional sint32         rank        = 2;
    repeated Common.GameRes award_list  = 3;
}

message GROUP_HURT_RANK_AWARD_ARRAY
{
    repeated GROUP_HURT_RANK_AWARD rows = 1;
}

message GROUP_ICON
{
    optional uint32 id       = 1;
    optional bool   unlocked = 3[default = false];
}

message GROUP_ICON_ARRAY
{
    repeated GROUP_ICON rows = 1;
}

message GROUP_ICON_BOX
{
    optional uint32 id       = 1;
    optional bool   unlocked = 3[default = false];
}

message GROUP_ICON_BOX_ARRAY
{
    repeated GROUP_ICON_BOX rows = 1;
}

message GROUP_BATTLE_SCORE_AWARD
{
    optional sint64         score       = 1;
    repeated Common.GameRes award_list  = 2;
}

message GROUP_BATTLE_SCORE_AWARD_ARRAY
{
    repeated GROUP_BATTLE_SCORE_AWARD rows = 1;
}

message GROUP_BATTLE_SEASON_AWARD
{
    optional sint32         year        = 1;
    optional sint32         month       = 2;
    optional uint32         rank        = 3;
    repeated Common.GameRes award_list  = 4;
}

message GROUP_BATTLE_SEASON_AWARD_ARRAY
{
    repeated GROUP_BATTLE_SEASON_AWARD rows = 1;
}

message GROUP_HEGEMONY_AWARD
{
    optional uint32         id          = 1; 
    repeated Common.GameRes award_list  = 3;
    optional Common.GroupHegemonyAwardType type = 4;
    optional sint32         rank         = 5;
    optional sint32         captain_multiple = 6;
    optional sint32         admin_multiple   = 7;
    optional sint32         rank_limit       = 9;
}

message GROUP_HEGEMONY_AWARD_ARRAY
{
    repeated GROUP_HEGEMONY_AWARD rows = 1;
}

message GROUP_HEGEMONY_BUFF
{
    optional uint32         id   = 1; 
    optional float          prob = 3;
}

message GROUP_HEGEMONY_BUFF_ARRAY
{
    repeated GROUP_HEGEMONY_BUFF rows = 1;
}
