// 社团存档

import "archive_time.proto";
import "common_group.proto";
import "common_effect.proto";
import "common_rank_table.proto";
import "common_game_res.proto";

package Archive;

message Group
{
    optional uint64 id      = 1;
    optional string name    = 2;
    optional uint32 sid     = 3;

    message DataSet0
    {
        // 社团属性
        optional Property property  = 1;
    }
    message DataSet1
    {
        // 健身房
        optional Gym    gym     = 1;
    }
    message DataSet2
    {
        // 社团商店
        optional Shop       shop    = 1;
        optional Log        log     = 2;
    }
    message DataSet3
    {
        // 基地
        optional Base              base             = 1;
        optional Common.GroupIcon  icon_info        = 2;
        optional JoinApply         join_apply       = 3;
    }
    message DataSet4
    {
        // 棋牌室(废弃)
        optional ChessRoom chess_room = 1;
        optional Record    record     = 2;
    }
    message DataSet5
    {
        // 包子铺(废弃)
        optional BunRoom  bun_room    = 1;
        optional Instance Instance    = 2;
    }
    message DataSet6
    {
        optional State   state   = 1; 
        optional History history = 2;
        optional Battle  battle  = 3;
    }
    message DataSet7
    {
        // 装备室(社团科技)
        optional EquipRoom equip_room = 1;
    }

    optional DataSet0   ds0 = 50;
    optional DataSet1   ds1 = 51;
    optional DataSet2   ds2 = 52;
    optional DataSet3   ds3 = 53;
    optional DataSet4   ds4 = 54;
    optional DataSet5   ds5 = 55;
    optional DataSet6   ds6 = 56;
    optional DataSet7   ds7 = 57;

    message Property
    {
        optional uint32 captain        = 1;
        repeated uint32 member_list    = 2;
        optional sint64 wood           = 3;
        optional string notice         = 4;
        optional uint32 daily_coin     = 5; // 棋牌室每日的金币产出
        optional uint32 daily_sp       = 6; // 包子铺每日的体力产出
        optional string bulletin       = 7;
        optional Common.GroupType type = 8[default = NORMAL_GROUP];
        optional sint32 pvp_score      = 9; // 社团大乱斗积分
        repeated Common.GameRes chess_item_output = 10; // 棋牌室道具产出
        repeated Common.GameRes bun_item_output   = 11; // 包子铺道具产出
        
        repeated uint32 admin_list     = 12; // 管理员列表
        optional sint64 active         = 13;
        optional sint64 fund           = 14; 
        optional sint64 join_fc        = 15;
        optional uint32 icon           = 16[default = 1010];
        optional uint32 icon_box       = 17[default = 1001];
        optional Common.GroupJoinOption join_option = 18[default = GROUP_JOIN_ABLE];
        optional sint64 max_battle_fc  = 19;
        optional sint64 battle_score   = 20;
        optional sint64 battle_win_count = 21;
        optional sfixed64 last_battle_time = 22;
    }

    message BuildingBasic
    {
        optional sint32 lev = 1;
    }

    message Base
    {
        optional BuildingBasic           basic           = 1;
        optional Common.BuildUpgradeInfo upgrade_info    = 2; // 升级信息
    }

    message Gym
    {
        optional BuildingBasic  basic                   = 1;
        repeated Common.GymHero hero_pool               = 2;
        optional Common.BuildUpgradeInfo upgrade_info   = 3; 
    }

    message ChessRoom
    {
        optional BuildingBasic           basic           = 1;
        optional Common.BuildUpgradeInfo upgrade_info    = 2;
    }
    
    message BunRoom
    {
        optional BuildingBasic           basic           = 1;
        optional Common.BuildUpgradeInfo upgrade_info    = 2;
    }

    message Shop
    {
        optional BuildingBasic basic              = 1; // 古董商店等级
        optional Common.BuildUpgradeInfo upgrade_info    = 2; // 升级信息
    }
    
    message State
    {
        optional Time       zero_clock_time         = 1;  // 0 点定时器存档
        //optional sfixed64   last_wood_output_time   = 2;  // 上次木材产出时间
        optional Time       five_clock_time         = 3;  // 5 点定时器存档
        optional Time       one_hour_clock_time     = 4;  // 整点点定时器存档
    }

    message EquipRoom
    {
        repeated Common.GroupEquip  equip_list  = 1;
    }

    message Instance
    {
        repeated Common.GroupInstance           instance_list       = 1;
        repeated Common.GroupInstanceAward      award_list          = 2;
        repeated Common.GroupAwardAssignRecord  assign_record_list  = 3;
        repeated uint32                         finished_list       = 4;
    }

    message Record
    {
        repeated sint64  daily_active_list   = 1;
        repeated sint64  daily_fund_list     = 2;
    }

    message ApplyMember
    {
        optional uint32     role_id   = 1;
        optional sfixed64   timestamp = 2;
    }

    message JoinApply
    {
        repeated ApplyMember member_list = 1;
    }

    message Log
    {
        repeated Common.GroupLog  log_list = 1; 
    }

    message History
    {
        repeated Common.BattleInfo battle_list   = 1;
    }

    message Battle
    {
        optional string         tactic         = 1;
        optional float          fc_coefficient = 2[default = 1.0]; 
    }
}

message GroupBattle
{
    message GroupFighter
    {
        optional Common.GroupBrief          group_brief    = 1;
        repeated Common.GroupRoleFighter    top_role_list  = 2; 
        repeated Common.GroupRoleFighter    mid_role_list  = 3; 
        repeated Common.GroupRoleFighter    down_role_list = 4; 
        optional uint32                     zone_id        = 5;
        optional bool                       sign_up        = 6[default = false];
        optional uint64                     battle_id      = 7;
        repeated uint32                     role_list      = 8;
    }

    repeated  GroupFighter        group_list  = 1;
    repeated  Common.BattleInfo   battle_list = 2;
}

message GroupHegemony
{
    message Group
    {
        optional uint32 id    = 1;
        optional string name  = 2;
        optional sint64 score = 3;
        optional uint32 zone_id = 4; 
        optional uint32 site_id = 5; // 分场地
        optional uint32 semifinal_site = 6;
        optional bool   out              = 7[default = false];
        repeated ScoreRecord record_list = 8;
        repeated uint32 role_list        = 9; // 指定名单
        optional bool   close_set_member = 10[default = false]; // 关闭指派
    }

    message Role
    {
        optional uint32 id       = 1;
        optional string name     = 2;
        optional uint64 score    = 3;
        optional uint32 group_id = 4;
        optional string group_name = 5;
        optional bool   out        = 6[default = false];
        optional sint32 battle_count = 7;
        optional float  last_hp  = 8[default = 1.0];
        optional uint32 opponent = 9; // 对手ID
        optional uint32 zone_id  = 10;
        optional uint64 scene_guid = 11;
        repeated ScoreRecord record_list = 12;
        //repeated Common.GroupHegemonyBuff buff_list = 13;
        optional bool     ready             = 14[default = false];
        optional sfixed64 start_battle_time = 15;
        optional uint32   last_buff_id      = 16;
        repeated uint32   buff_list         = 17;
        optional sint32   win_streak        = 18;
    }

    message ZoneCategory
    {
        optional uint32 zone_id  = 1;
        optional uint32 category = 2;  
    }
    
    // 场地信息
    message SiteInfo
    {
        optional uint32   id          = 1; 
        optional bool     finished    = 2[default = false];
        optional sfixed64 finish_time = 3;
    }

    message ScoreRecord
    {
        optional sint64                      score = 1;
        optional sint32                      rank  = 2;
        optional Common.GroupHegemonyStage   stage = 3; 
    }

    message HistoryRankTable
    {
        optional Common.RankTable            group_rank = 1;
        optional Common.RankTable            role_rank  = 2;
        optional Common.GroupHegemonyStage   stage      = 3; 
        optional uint32                      site_id    = 4;
    }
    
    message Hegemony
    {
        optional uint64         id            = 1;
        repeated Group          group_list    = 2;
        repeated Role           role_list     = 3;
        repeated SiteInfo       site_list     = 4;
        optional Common.GroupHegemonyStage   stage = 5; 
        repeated HistoryRankTable   rank_table_list       = 6;
    }

    repeated Group          group_list    = 1;
    repeated Hegemony       hegemony_list = 2;
    repeated ZoneCategory   category_list = 3;
    optional Common.GroupHegemonyStage   stage  = 4[default = GROUP_HEGEMONY_QUALIFIERS]; 
    optional Common.GroupHegemonyStatus  status = 5[default = GROUP_HEGEMONY_NOT_START]; 
    optional bool                        close_sign_up = 6[default = false];
}
